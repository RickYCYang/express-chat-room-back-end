{"version":3,"sources":["Image/chat.png","redux/reducers/loginReducer.ts","redux/actionTypes.ts","redux/reducers/signupReducer.ts","redux/reducers/chatRoomReducer.ts","redux/reducers/rootReducer.ts","config.js","ApiService.ts","StorageService.ts","WebSocketService.ts","redux/sagas/loginSaga.ts","redux/sagas/signupSaga.ts","redux/sagas/chatRoomSaga.ts","redux/sagas/saga.ts","redux/configureStore.ts","view/LoginSignup/Login.tsx","view/ChatRoom/Components/MessageBoxUserInfo.tsx","view/ChatRoom/Components/MessageBoxText.tsx","view/ChatRoom/Components/MessageBox.tsx","view/ChatRoom/Components/MessagePanel.tsx","view/ChatRoom/Components/MessageSender.tsx","view/ChatRoom/ChatRoom.tsx","view/Drawer/Components/StyleList.tsx","view/Drawer/Components/ＭessageAlarm.tsx","view/Drawer/Components/UserList.tsx","view/Drawer/DrawerBar.tsx","view/TopBar.tsx","view/Home.tsx","view/LoginSignup/Components/SignupDialog.tsx","view/LoginSignup/Signup.tsx","view/LoginSignup/Edit.tsx","App.tsx","serviceWorker.js","index.tsx","Image/message.png"],"names":["module","exports","initState","account","password","message","status","loginReducer","state","action","type","payload","userName","confirmPassword","messageBox","webSocket","onlineCount","connectStatus","styleMessageBox","isMobile","drawerOpen","userList","chatPeople","newMessageCount","chatRoomReducer","concat","counter","Object","entries","forEach","key","value","createRootReducer","history","combineReducers","router","connectRouter","signupReducer","PROD_HOST_NAME","axios","defaults","baseURL","headers","post","withCredentials","xsrfCookieName","xsrfHeaderName","axiosPost","url","data","setLocalStorageWithExpiry","ttl","now","Date","item","expiry","getTime","localStorage","setItem","JSON","stringify","removeLocalStorage","removeItem","getLocalStorageWithExpiry","itemStr","getItem","parse","serverName","disconnectWebSocket","disconnect","query","sendNewMessage","messageType","sourceUser","targetUser","timestamp","console","log","emit","setNewMessageAlarm","dispatch","loginRequest","logout","email","result","put","token","push","signupRequest","connectWebSocket","webSocketClient","rootSaga","takeEvery","createBrowserHistory","sagaMiddleware","createSagaMiddleware","Login","useDispatch","useSelector","setAccountPassword","e","currentTarget","id","useEffect","className","role","icon","square","imageUrl","require","label","onTrailingIconSelect","trailingIcon","onChange","outlined","raised","onClick","MessageBoxUserInfo","userMessage","MessageBoxText","src","getMessage","MessageBox","React","memo","prevProps","nextProps","MessagePanel","messagePanelRef","useRef","anchorRef","backgroundStyleCss","current","offsetHeight","scrollHeight","scrollTop","scrollTo","behavior","top","ref","filter","map","MessageSender","useState","setMessage","fileUpload","getTimeStamp","date","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getUTCMilliseconds","sendMessage","enterClick","document","addEventListener","removeEventListener","convertFile","file","Promise","resolve","reject","reader","FileReader","onload","onerror","error","readAsDataURL","click","style","display","accept","files","undefined","then","fileBase64","catch","err","ChatRoom","on","hasFocus","Notification","body","listenPublicMessage","listenPrivateMessage","listenUserList","StyleList","styleListIndex","setStyleListIndex","singleSelection","selectedIndex","handleSelect","index","graphic","primaryText","ＭessageAlarm","props","UserList","setSelectedIndex","myUserName","onlineUser","values","user","splice","changeChatPeople","useCallback","DrawerBar","modal","open","onClose","borderColor","width","TopBar","align","navIcon","tabIndex","hasRipple","actionItem","aria-label","data-tooltip-id","Home","test","navigator","userAgent","substr","window","permission","requestPermission","SignupDialog","Signup","inputHandler","indexOf","Edit","disabled","store","preloadedState","createStore","compose","applyMiddleware","routerMiddleware","run","configureStore","App","exact","path","Boolean","location","hostname","match","ReactDOM","render","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c032911f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/chat.36cb8b4b.png\";","import {\n    SET_LOGIN_ACCOUNT,\n    SET_LOGIN_PASSWORD,\n    LOGIN_REQUEST,\n    LOGIN_SUCCESS,\n    LOGIN_FAIL\n} from '../actionTypes'\n\nconst initState: object = {\n    account: '',\n    password: '',\n    message: '',\n    status: '',\n}\n\nconst loginReducer = (state: object = initState, action: any) => {\n    switch(action.type){\n        case SET_LOGIN_ACCOUNT: {\n            return {...state, account: action.payload};\n        }\n        case SET_LOGIN_PASSWORD: {\n            return {...state, password: action.payload};\n        }\n        case LOGIN_REQUEST: {\n            return {...state, status: 'loading'};\n        }\n        case LOGIN_SUCCESS: {\n            return {...state, status: 'logined'};\n        }\n        case LOGIN_FAIL: {\n            return {\n                ...state, \n                status: 'error',\n                message: action.payload.message,\n            };\n        }\n        default: return state;\n    }\n}\n\nexport default loginReducer;","export const SET_LOGIN_ACCOUNT = 'SET_LOGIN_ACCOUNT';\nexport const SET_LOGIN_PASSWORD = 'SET_LOGIN_PASSWORD';\nexport const LOGIN_REQUEST = 'LOGIN_REQUEST';\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const LOGIN_FAIL = 'LOGIN_FAIL';\nexport const SET_SIGNUP_ACCOUNT = 'SET_SIGNUP_ACCOUNT';\nexport const SET_SIGNUP_USERNAME = 'SET_SIGNUP_USERNAME';\nexport const SET_SIGNUP_PASSWORD = 'SET_SIGNUP_PASSWORD';\nexport const SET_SIGNUP_CONFIRM_PASSWORD = 'SET_SIGNUP_CONFIRM_PASSWORD';\nexport const SET_SIGNUP_MESSAGE = 'SET_SIGNUP_MESSAGE';\nexport const SIGNUP_REQUEST = 'SIGNUP_REQUEST';\nexport const SIGNUP_SUCCESS = 'SIGNUP_SUCCESS';\nexport const SIGNUP_FAIL = 'SIGNUP_FAIL';\nexport const LOGOUT = 'LOGOUT';\n\n\nexport const CONNECT_WEB_SOCKET = 'CONNECT_WEB_SOCKET';\nexport const CONNECT_WEB_SOCKET_SUCCESS = 'CONNECT_WEB_SOCKET_SUCCESS';\nexport const CONNECT_WEB_SOCKET_FAIL = 'CONNECT_WEB_SOCKET_FAIL';\nexport const DISCONNECT_WEB_SOCKET = 'DISCONNECT_WEB_SOCKET';\nexport const SET_MESSAGE_BOX = 'SET_MESSAGE_BOX';\nexport const SET_USER_LIST = 'SET_USER_LIST';\nexport const SET_MESSAGE_BOX_STYLE = 'SET_MESSAGE_BOX_STYLE';\nexport const SET_IS_MOBILE = 'SET_IS_MOBILE';\nexport const SET_DRAWER_OPEN = 'SET_DRAWER_OPEN';\nexport const SET_CHAT_PEOPLE = 'SET_CHAT_PEOPLE';\nexport const SET_NEW_MESSAGE_ALARM = 'SET_NEW_MESSAGE_ALARM';\n\n\n\n\n","import {\n    SET_SIGNUP_ACCOUNT,\n    SET_SIGNUP_PASSWORD,\n    SET_SIGNUP_CONFIRM_PASSWORD,\n    SET_SIGNUP_USERNAME,\n    SET_SIGNUP_MESSAGE,\n    SIGNUP_REQUEST,\n    SIGNUP_SUCCESS,\n    SIGNUP_FAIL,\n} from '../actionTypes'\n\nconst initState: object = {\n    account: '',\n    userName: '',\n    password: '',\n    confirmPassword: '',\n    message: '',\n    status: '',\n}\n\nconst loginReducer = (state: object = initState, action: any) => {\n    switch(action.type){\n        case SET_SIGNUP_ACCOUNT: {\n            return {...state, account: action.payload};\n        }\n        case SET_SIGNUP_PASSWORD: {\n            return {...state, password: action.payload};\n        }\n        case SET_SIGNUP_USERNAME: {\n            return {...state, userName: action.payload};\n        }\n        case SET_SIGNUP_CONFIRM_PASSWORD: {\n            return {...state, confirmPassword: action.payload};\n        }\n        case SET_SIGNUP_MESSAGE:{\n            return {...state, message: action.payload}\n        }\n        case SIGNUP_REQUEST: {\n            return {...state, status: 'processing'};\n        }\n        case SIGNUP_SUCCESS: {\n            return {...state, status: 'success'};\n        }\n        case SIGNUP_FAIL: {\n            return {\n                ...state, \n                status: 'error',\n                message: action.payload.message,\n            };\n        }\n        default: return state;\n    }\n}\n\nexport default loginReducer;","import {\n    CONNECT_WEB_SOCKET,\n    CONNECT_WEB_SOCKET_SUCCESS,\n    CONNECT_WEB_SOCKET_FAIL,\n    SET_MESSAGE_BOX,\n    SET_MESSAGE_BOX_STYLE,\n    SET_IS_MOBILE,\n    DISCONNECT_WEB_SOCKET,\n    SET_DRAWER_OPEN,\n    SET_USER_LIST,\n    SET_CHAT_PEOPLE,\n    SET_NEW_MESSAGE_ALARM\n} from '../actionTypes'\n\nconst initState = {\n    messageBox: [],\n    webSocket: null,\n    onlineCount: 0,\n    connectStatus: '',\n    styleMessageBox: true,\n    isMobile: false,\n    drawerOpen: false,\n    userList: {},\n    chatPeople: <string>'',\n    newMessageCount: {}\n}\n\nconst chatRoomReducer = (state = initState, action: any) => {\n    switch(action.type){\n        case CONNECT_WEB_SOCKET:{\n            return {\n                ...state,\n                connectStatus: 'connecting'\n            }\n        }\n        case CONNECT_WEB_SOCKET_SUCCESS:{\n            return{\n                ...state,\n                connectStatus: 'connected',\n                webSocket: action.payload\n            }\n        }\n        case CONNECT_WEB_SOCKET_FAIL:{\n            return{\n                ...state,\n                connectStatus: 'disconnect',\n                webSocket: action.payload\n            }\n        }\n        case SET_USER_LIST:{\n            return{\n                ...state,\n                userList: action.payload\n            }\n        }\n        case SET_MESSAGE_BOX:{\n            return{\n                ...state,\n                messageBox: state.messageBox.concat(action.payload)\n            }\n        }\n        case SET_MESSAGE_BOX_STYLE:{\n            return{\n                ...state,\n                styleMessageBox: action.payload\n            }\n        }\n        case SET_IS_MOBILE:{\n            return{\n                ...state,\n                isMobile: action.payload\n            }\n        }\n        case DISCONNECT_WEB_SOCKET:{\n            return{\n                ...state,\n                webSocket: null\n            }\n        }\n        case SET_DRAWER_OPEN:{\n            return{\n                ...state,\n                drawerOpen: action.payload\n            }\n        }\n        case SET_CHAT_PEOPLE:{\n            return {\n                ...state,\n                chatPeople: action.payload\n            }\n        }\n        case SET_NEW_MESSAGE_ALARM:{\n            const {userName} = action.payload\n            let counter = 0;\n            if(action.payload.type === 'reset' || state.chatPeople === userName){\n                return{\n                    ...state,\n                    newMessageCount: {\n                        ...state.newMessageCount,\n                        [userName]: counter\n                    }\n                }\n            }else{\n                Object.entries(state.newMessageCount).forEach(([key, value]) => {\n                    if(key === userName && typeof value === 'number'){\n                        counter = value;\n                    }\n                });\n                return{\n                    ...state,\n                    newMessageCount: {\n                        ...state.newMessageCount,\n                        [userName]: counter + 1\n                    }\n                }\n            }\n        }\n        default: return state;\n    }\n}\n\nexport default chatRoomReducer;","import { combineReducers } from 'redux';\nimport { connectRouter } from 'connected-react-router';\nimport loginReducer from './loginReducer';\nimport signupReducer from './signupReducer'\nimport chatRoomReducer from './chatRoomReducer';\n\n\nconst createRootReducer = (history: any) => combineReducers({\n  router: connectRouter(history),\n  loginReducer,\n  signupReducer,\n  chatRoomReducer\n});\n\nexport default createRootReducer;","export const PROD_HOST_NAME = 'https://express-chat-room-back-end.herokuapp.com';\nexport const DEV_HOST_NAME = 'http://localhost:3000';\nexport const PROD_ACCESS_CONTROL_ALLOW_ORIGIN = 'https://express-chat-room-back-end.herokuapp.com';\nexport const DEV_ACCESS_CONTROL_ALLOW_ORIGIN = 'http://localhost:3001';","import {\n    PROD_HOST_NAME,\n    DEV_HOST_NAME,\n    DEV_ACCESS_CONTROL_ALLOW_ORIGIN\n} from './config'\n\nimport {\n    getCookie\n} from './StorageService';\n\nimport axios from 'axios';\n\naxios.defaults.baseURL = PROD_HOST_NAME;\naxios.defaults.headers.post['Accept'] = 'application/json';\naxios.defaults.headers.post['Content-Type'] = 'application/json';\naxios.defaults.withCredentials = true;\naxios.defaults.xsrfCookieName = 'XSRF-TOKEN'; // default\naxios.defaults.xsrfHeaderName = 'X-XSRF-TOKEN'; // default\n\n\nexport const axiosGet = (url: string): object => {\n    return axios.get(url);\n}\n\nexport const axiosPost = (url: string, data: object): object => {\n    return axios.post(url, data);\n}\n\nexport default axios;\n\n/*\nexport let fetchGet = (webApi: string): object => {\n    //console.log(hostName + \"/\" + webApi);\n    const requestHeaders: HeadersInit = new Headers();\n    requestHeaders.set('Accept', 'application/json');\n    requestHeaders.set('Content-Type', 'application/json');\n    //requestHeaders.set('Authorization', token||'');\n    return fetch(DEV_HOST_NAME + \"/\" + webApi, {\n        method: 'GET',\n        //dataType: 'jsonp',\n        headers: requestHeaders\n    }).then(\n      (response: any) => {\n          return response.json();\n      }).then((result) => {\n        return result;\n      }).catch((error) => {\n          console.log(\"fetchGet: \" + webApi, error);\n      }\n    );   \n}\n\nexport let fetchPost = (webApi: string, data: object) => {\n    //console.log(\"web api\", PROD_HOST_NAME + \"/\" + webApi);\n    const requestHeaders: any = {\n        //'Access-Control-Allow-Origin': DEV_ACCESS_CONTROL_ALLOW_ORIGIN,\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        //'Authorization': token\n    };\n    //Dev: DEV_HOST_NAME, Prod: PROD_HOST_NAME\n    return fetch(DEV_HOST_NAME + \"/\" + webApi,{\n        method: 'POST',\n        headers: requestHeaders,\n        credentials: 'include',\n        body: JSON.stringify(data)\n    }).then(\n      (response) => {\n          return response.json();\n      }).then((result) => {\n        return result;\n      }).catch((error) => {\n          console.log(\"fetchPost\", error);\n      }\n    );   \n}\n*/","import Cookies from 'js-cookie';\n\nexport const setLocalStorageWithExpiry = (key: string, value: string, ttl: number = 30) => {\n\tconst now = new Date()\n\t// `item` is an object which contains the original value\n\t// as well as the time when it's supposed to expire\n\tconst item = {\n\t\tvalue: value,\n\t\texpiry: now.getTime() + (ttl * 1000 * 60 * 60 * 24), //By Day\n\t}\n\tlocalStorage.setItem(key, JSON.stringify(item));\n}\n\nexport const removeLocalStorage = (key: string) => {\n\tlocalStorage.removeItem(key);\n}\n\nexport const getLocalStorageWithExpiry = (key: string) => {\n\tconst itemStr = localStorage.getItem(key)\n\t// if the item doesn't exist, return null\n\tif (!itemStr) {\n\t\treturn null\n\t}\n\tconst item = JSON.parse(itemStr)\n\tconst now = new Date();\n\t// compare the expiry time of the item with the current time\n\tif (now.getTime() > item.expiry) {\n\t\t// If the item is expired, delete the item from storage\n\t\t// and return null\n\t\tlocalStorage.removeItem(key)\n\t\treturn null\n\t}\n\treturn item.value\n}\n\nexport const getCookie = (key: string): string|undefined => {    \n    return Cookies.get(key);;\n}\n\nexport const setCookie = (key: string, value: string): void => {\n    Cookies.set(key, value /*, { expires: 7 }*/);\n}\n\nexport const delCookie = (key: string): void => {\n    Cookies.remove(key);\n}","import webSocketClient from 'socket.io-client'\nimport {\n    PROD_HOST_NAME,\n    DEV_HOST_NAME\n} from './config';\nimport {\n    getLocalStorageWithExpiry,\n    setLocalStorageWithExpiry\n} from './StorageService';\n\nimport {\n    SET_MESSAGE_BOX,\n    SET_USER_LIST,\n    SET_NEW_MESSAGE_ALARM\n} from './redux/actionTypes';\n\nconst userName = getLocalStorageWithExpiry('userName');\nconst serverName = PROD_HOST_NAME; //DEV_HOST_NAME\n\nexport const createWebSocket = () => {\n    //Dev: DEV_HOST_NAME, Prod: PROD_HOST_NAME\n    //console.log('userName', userName);\n    return webSocketClient(serverName, {query: `userName=${userName}`});\n}\n\nexport const disconnectWebSocket = (webSocket: any): void => {\n    webSocket.disconnect(serverName, {query: `userName=${userName}`});\n}\n\nexport const sendNewMessage = (webSocket: any, messageType: string, sourceUser: string, targetUser: string, message: string, \n    timestamp: string) => {\n    console.log('socket', sourceUser, targetUser);\n    webSocket.emit('sendMessage', {\n        sourceUser: sourceUser,\n        targetUser: targetUser,\n        messageType: messageType,\n        message: message,\n        timestamp: timestamp\n    });\n}\n\nexport const listenUserList = (webSocket: any, dispatch: any) => {\n    interface userList{\n        userName:{\n            userName: string,\n            status: string\n        }\n    }\n    webSocket.on('userList', (userList: userList) => {\n        dispatch({\n            type: SET_USER_LIST,\n            payload: userList\n        });\n    })\n}\n\ninterface messageInterface{\n    sourceUser: string,\n    targetUser: string,\n    message: string,\n    timestamp: string,\n    messageType: string\n}\n\nexport const listenPublicMessage = (webSocket: any, dispatch: any, isMobile: boolean) => {   \n    webSocket.on('newPublicMessage', (userMessage: messageInterface) => {   \n        //console.log('userMessage', userMessage); \n        setNewMessageAlarm(dispatch, userMessage.sourceUser, userMessage.targetUser);\n        dispatch({\n            type: SET_MESSAGE_BOX,\n            payload: userMessage\n        });\n        if(!document.hasFocus() && !isMobile){  \n            new Notification(userMessage.sourceUser, {\n                body: userMessage.message,\n                icon: require('./Image/message.png'),\n            }); \n        }\n    });\n}\n\nexport const listenPrivateMessage = (webSocket: any, dispatch: any, isMobile: boolean) => {\n    webSocket.on('newPrivateMessage', (userMessage: messageInterface) => {  \n        setNewMessageAlarm(dispatch, userMessage.sourceUser, userMessage.targetUser);\n        dispatch({\n            type: SET_MESSAGE_BOX,\n            payload: userMessage\n        });\n       if(!document.hasFocus() && !isMobile){  \n        new Notification(userMessage.sourceUser, {\n            body: userMessage.message,\n            icon: require('./Image/message.png'),\n            }); \n        }\n    });\n}\n\nconst setNewMessageAlarm = (dispatch: any, sourceUser: string, targetUser: string) => {\n    if(userName !== sourceUser){\n        dispatch({\n            type: SET_NEW_MESSAGE_ALARM,\n            payload: {\n                type: 'append',\n                userName: (targetUser === 'Public')? targetUser: sourceUser\n            }\n        });\n    }\n}","/* eslint-disable no-constant-condition */\nimport { put } from 'redux-saga/effects'\nimport { push } from 'connected-react-router'\nimport {\n  axiosPost\n} from '../../ApiService';\nimport {\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  DISCONNECT_WEB_SOCKET\n} from '../actionTypes';\n\nimport {\n  setLocalStorageWithExpiry,\n  //getLocalStorageWithExpiry,\n  removeLocalStorage,\n} from '../../StorageService'\n\nimport {\n  disconnectWebSocket\n} from '../../WebSocketService';\n\nexport function* loginRequest(action: any) {\n  let {account, password} = action.payload;\n  console.log(account, password);\n  //let result = yield fetchPost(\"login\", {email: account, password: password});\n  let result = yield axiosPost(\"login\", {email: account, password: password});\n  //console.log(result);\n  if(result.data.status === \"fail\"){\n    console.log('Fail:', result);\n    yield put({ \n      type: LOGIN_FAIL,\n      payload: {\n        message: result.data.message\n      }\n    })\n  }else if(result.data.status === \"success\"){\n    console.log('success:', result);\n    yield setLocalStorageWithExpiry('token', result.data.token, 1);\n    yield setLocalStorageWithExpiry('userName', result.data.userName, 1);\n    yield put({ type: LOGIN_SUCCESS });\n    yield put(push('/'));\n  }\n}\n\nexport function *logout(action: any){\n  console.log('logout action', action);\n  const webSocket = action.payload;\n  yield removeLocalStorage('userName');\n  yield removeLocalStorage('token');\n  yield disconnectWebSocket(webSocket);\n  yield put({type: DISCONNECT_WEB_SOCKET});\n  yield put(push('/login'));\n}\n","/* eslint-disable no-constant-condition */\nimport { put } from 'redux-saga/effects'\nimport { push } from 'connected-react-router'\nimport {\n  axiosPost\n} from '../../ApiService';\nimport {\n  SIGNUP_SUCCESS,\n  SIGNUP_FAIL,\n} from '../actionTypes';\n\n\nexport function* signupRequest(action: any) {\n  let {account, password, userName} = action.payload;\n  let result = yield axiosPost(\"signup\", {email: account, password: password, userName: userName});\n  if(result.status === \"error\"){\n    console.log('Fail:', result);\n    yield put({ \n      type: SIGNUP_FAIL,\n      payload: {\n        message: result.message\n      }\n    })\n  }else if(result.status === \"success\"){\n    console.log('Signup success');\n    yield put({ type: SIGNUP_SUCCESS });\n  }\n}\n","/* eslint-disable no-constant-condition */\nimport { put } from 'redux-saga/effects';\n\nimport {\n    CONNECT_WEB_SOCKET_SUCCESS,\n    CONNECT_WEB_SOCKET_FAIL\n\n} from '../actionTypes';\nimport {\n    createWebSocket,\n} from '../../WebSocketService'\n\nexport function *connectWebSocket(action: any) {\n    console.log('connectWebSocket', action);\n    let webSocket = yield createWebSocket(); //webSocketClient(DEV_HOST_NAME, {query: `userName=${userName}`}); //webSocketClient('http://localhost:3000');\n    if(webSocket){\n        yield put({\n            type: CONNECT_WEB_SOCKET_SUCCESS,\n            payload: webSocket\n        });\n    }else{\n        yield put({\n            type: CONNECT_WEB_SOCKET_FAIL\n        })\n    }\n}\n","/* eslint-disable no-constant-condition */\n\nimport { put, takeEvery } from 'redux-saga/effects'\nimport {\n  LOGIN_REQUEST,\n  SIGNUP_REQUEST,\n  CONNECT_WEB_SOCKET,\n  LOGOUT\n} from '../actionTypes'\nimport {\n    loginRequest,\n    logout\n} from './loginSaga';\nimport { signupRequest } from './signupSaga';\n\nimport {\n  connectWebSocket\n} from './chatRoomSaga'\n\nexport default function* rootSaga() {\n  yield takeEvery(LOGIN_REQUEST, loginRequest);\n  yield takeEvery(SIGNUP_REQUEST, signupRequest);\n  yield takeEvery(LOGOUT, logout);\n  yield takeEvery(CONNECT_WEB_SOCKET, connectWebSocket);\n}\n","import { createBrowserHistory } from 'history';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { routerMiddleware } from 'connected-react-router';\nimport createSagaMiddleware from 'redux-saga';\nimport createRootReducer from './reducers/rootReducer';\nimport rootSaga from './sagas/saga';\n\nexport const history = createBrowserHistory()\n\nconst sagaMiddleware = createSagaMiddleware();\n\nexport default function configureStore(preloadedState: object) {\n  const store = createStore(\n    createRootReducer(history), // root reducer with router state\n    preloadedState,\n    compose(\n      applyMiddleware(\n        routerMiddleware(history), // for dispatching history actions\n        sagaMiddleware\n      ),\n    ),\n  )\n  sagaMiddleware.run(rootSaga);\n  return store\n}","import React, {useEffect} from \"react\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport Card, {\n    CardPrimaryContent,\n    CardMedia,\n    CardActions,\n    CardActionButtons,\n} from \"@material/react-card\";\nimport Button from '@material/react-button';\nimport TextField, {Input} from '@material/react-text-field';\nimport MaterialIcon from '@material/react-material-icon';\nimport { push } from 'connected-react-router'\nimport {\n    SET_LOGIN_ACCOUNT,\n    SET_LOGIN_PASSWORD,\n    LOGIN_REQUEST\n} from '../../redux/actionTypes';\nimport {getLocalStorageWithExpiry} from '../../StorageService';\nimport {stateInterface} from '../../Interfaces';\n\n\nconst Login = () => {\n    const dispatch = useDispatch();\n    const {account, password, status, message} = useSelector((state: stateInterface) => state.loginReducer);\n    const token = getLocalStorageWithExpiry('token')\n\n    let setAccountPassword = (e: any): void => {\n        const {id, value} = e.currentTarget;\n        switch(id){\n            case \"account\":\n                dispatch({\n                    type: SET_LOGIN_ACCOUNT,\n                    payload: value,\n                });\n                break;\n            case \"password\":\n                dispatch({\n                    type: SET_LOGIN_PASSWORD,\n                    payload: value,\n                });\n                break;\n        }\n    }\n    \n    let loginHandler = (): void => {\n        dispatch({\n            type: LOGIN_REQUEST,\n            payload: {\n                account: account,\n                password: password\n            }   \n        })\n    }\n    \n    ///Check if is logined\n    useEffect((): void => {\n        if(token){\n            dispatch(push('/'));\n        }\n    }, [token]);\n\n    return(\n        <div id='signLoginContainer'>\n            <Card id=\"signLoginCard\">\n                <CardPrimaryContent className=\"tittle\">\n                    <MaterialIcon role=\"button\" icon=\"person\" />\n                    <a>Login</a>\n                </CardPrimaryContent>\n                <hr className='separate_line'/>\n                <CardMedia id=\"login_logo\" square imageUrl={require('../../Image/chat.png')} />   \n                <CardActions>\n                    <CardActionButtons className='signup_login_info'>\n                        <TextField\n                            label='Email'\n                            className=\"textField\" \n                            //helperText={<HelperText>Help Me!</HelperText>}\n                            onTrailingIconSelect={(): void => {\n                                dispatch({\n                                    type: SET_LOGIN_ACCOUNT,\n                                    payload: ''\n                                })\n                            }}\n                            trailingIcon={<MaterialIcon role=\"button\" icon=\"delete\"/>}\n                        >\n                            <Input\n                                id=\"account\"\n                                type=\"email\"\n                                value={account}\n                                onChange={setAccountPassword} \n                            />\n                        </TextField>\n                        <TextField\n                            label='Password'\n                            className=\"textField\"  \n                            //helperText={<HelperText>Help Me!</HelperText>}\n                            onTrailingIconSelect={ (): void => {\n                                dispatch({\n                                    type: SET_LOGIN_PASSWORD,\n                                    payload: ''\n                                })\n                            }}\n                            trailingIcon={<MaterialIcon role=\"button\" icon=\"delete\"/>}\n                        >\n                            <Input\n                                id=\"password\"\n                                type=\"password\"\n                                value={password}\n                                onChange={setAccountPassword} \n                            />\n                        </TextField>\n                        <div>\n                            <Button \n                                className=\"signup_login_btn\"\n                                outlined={true} \n                                raised={true} \n                                icon={<MaterialIcon role=\"button\" icon=\"login\" />}\n                                onClick={loginHandler}\n                            >Login\n                            </Button>\n                            <Button \n                                className=\"signup_login_btn\"\n                                outlined={true} \n                                raised={true} \n                                icon={<MaterialIcon role=\"button\" icon=\"account_box\" />}\n                                onClick={() => {\n                                    dispatch(push('signup'));\n                                }}\n                            >Signup\n                            </Button>\n                        </div>\n                    </CardActionButtons>\n                </CardActions>\n                {(status === \"error\")?(\n                    <div className='warnMsg'>\n                        <p>{message}</p>\n                    </div>\n                ): []}\n            </Card>\n        </div>\n    )\n}\n\nexport default Login;","import React from 'react';\nimport MaterialIcon from '@material/react-material-icon';\nimport {messageInterface} from '../../../Interfaces';\n\nconst MessageBoxUserInfo = (userMessage: messageInterface) => {\n    return(\n        <div className='message-box-userInfo'>\n            <MaterialIcon role=\"button\" icon=\"account_circle\" className=\"account_icon\"/>\n            <span>{userMessage.sourceUser}({userMessage.timestamp})</span>\n        </div>\n    );\n}\n\nexport default MessageBoxUserInfo;","import React from 'react';\nimport {useSelector} from 'react-redux';\nimport { getLocalStorageWithExpiry } from '../../../StorageService';\nimport {\n    messageInterface,\n    stateInterface\n} from '../../../Interfaces';\n\nconst MessageBoxText = (userMessage: messageInterface) => {\n    const {styleMessageBox} = useSelector((state: stateInterface) => state.chatRoomReducer);\n    const userName = getLocalStorageWithExpiry('userName');\n    const getMessage = () => {\n        switch(userMessage.messageType){\n            case 'string':{\n                return userMessage.message\n            }\n            case 'image':{\n                return <img src={userMessage.message} className='message-image'></img>\n            }\n        }   \n    }\n    //console.log('userMessage', userMessage);\n    return(\n        <div className={(styleMessageBox)?((userName === userMessage.sourceUser)? \"style-message-text-mine\": \"style-message-text-other\"): 'message-text'}>\n            {   \n                getMessage()\n            }\n        </div>\n    );\n}\n\nexport default MessageBoxText;","import React from 'react';\nimport { getLocalStorageWithExpiry } from '../../../StorageService';\nimport MessageBoxUserInfo from './MessageBoxUserInfo';\nimport MessageBoxText from './MessageBoxText';\nimport {messageInterface} from '../../../Interfaces';\n\nconst MessageBox = React.memo((userMessage: messageInterface) => {\n    const userName = getLocalStorageWithExpiry('userName');\n    return(\n        <div \n            className={(userName === userMessage.sourceUser)? \"message-box-mine\": \"message-box-other\"}>\n            <MessageBoxUserInfo {...userMessage} />\n            <MessageBoxText {...userMessage} />\n        </div>\n    );\n}, (prevProps: messageInterface, nextProps: messageInterface): boolean => {\n    console.log(prevProps.sourceUser === nextProps.sourceUser && prevProps.timestamp === nextProps.timestamp);\n    return (prevProps.sourceUser === nextProps.sourceUser && prevProps.timestamp === nextProps.timestamp);\n});\n\nexport default MessageBox","import React, {useEffect, useRef} from 'react';\nimport {useSelector} from 'react-redux';\nimport MessageBox from './MessageBox';\nimport {getLocalStorageWithExpiry} from '../../../StorageService';\nimport {\n    messageInterface,\n    stateInterface\n} from '../../../Interfaces'; \n\nconst MessagePanel = () => {\n    const userName = getLocalStorageWithExpiry('userName');\n    const {messageBox, styleMessageBox, chatPeople} = useSelector((state: stateInterface) => state.chatRoomReducer);\n    const messagePanelRef = useRef<HTMLDivElement>(null);\n    const anchorRef = useRef<HTMLDivElement>(null);\n    const backgroundStyleCss: {style: string, nonStyle: string} = {\n        style: 'style-messagePanel-background', \n        nonStyle: 'non-style-messagePanel-background'\n    };\n\n    useEffect(() => {\n        if(messageBox && messagePanelRef.current){\n            if(messagePanelRef.current.offsetHeight < messagePanelRef.current.scrollHeight\n                && messagePanelRef.current.scrollTop + messagePanelRef.current.offsetHeight + 200\n                > messagePanelRef.current.scrollHeight){\n                    messagePanelRef.current.scrollTo({\n                        behavior: \"smooth\", \n                        top: messagePanelRef.current?.scrollHeight - messagePanelRef.current.offsetHeight\n                    });\n                }\n        }\n    }, [messageBox]); \n    \n\n    return(\n        <div className={(styleMessageBox)? backgroundStyleCss.style: backgroundStyleCss.nonStyle}>\n            <div id=\"messagePanel\" ref={messagePanelRef}>\n                {\n                    messageBox.filter((userMessage:messageInterface) => {\n                        if(chatPeople === 'Public' && userMessage.targetUser === 'Public'){\n                            return userMessage;\n                        }else if((chatPeople === userMessage.targetUser && userName === userMessage.sourceUser) ||\n                                 (chatPeople === userMessage.sourceUser && userName === userMessage.targetUser)\n                                ){\n                                    return userMessage;\n                                }\n                    }).map((userMessage: messageInterface) => (\n                        <MessageBox {...userMessage} key={userMessage.sourceUser + userMessage.timestamp}/>\n                    ))\n                }\n                <div className='anchor' ref={anchorRef}></div>\n            </div>\n        </div>\n    );\n}\n\nexport default MessagePanel;","import React, {useEffect, useState, useRef} from 'react';\nimport { useSelector } from 'react-redux';\nimport TextField, {Input} from '@material/react-text-field';\nimport MaterialIcon from '@material/react-material-icon';\nimport Button from '@material/react-button';\nimport {getLocalStorageWithExpiry} from '../../../StorageService';\nimport {sendNewMessage} from '../../../WebSocketService';\nimport {\n    stateInterface,\n    keyInterface,\n    inputEventInterface\n} from '../../../Interfaces'; \n\n\n\nconst MessageSender = () => {\n    const [message, setMessage] = useState('');\n    const fileUpload = useRef<HTMLInputElement>(null);\n    const  {webSocket, chatPeople} = useSelector((state: stateInterface) => state.chatRoomReducer);\n    const userName = getLocalStorageWithExpiry('userName') || '';\n    \n    const messageHandler = (e: inputEventInterface): void => {\n        const {value} = e.currentTarget;\n        setMessage(value);\n    }\n\n    const getTimeStamp = (): string => {\n        const date: Date = new Date();\n        const timestamp: string = date.getFullYear() + '/' + (date.getMonth() + 1) +  '/' + date.getDate() +\n            ' ' + new Date().getHours() + ':' + new Date().getMinutes() + \n            ':' + new Date().getSeconds() + ':' + new Date().getUTCMilliseconds();\n        return timestamp;\n    }\n\n    const sendMessage = (): void => {\n        const timestamp: string = getTimeStamp();\n        sendNewMessage(webSocket, 'string', userName, chatPeople, message, timestamp);\n        setMessage(''); //Clear Textedit\n    }\n\n    const enterClick = (key: keyInterface): void => {\n        if(key.key === 'Enter'){\n            sendMessage();\n        }\n    };\n\n    useEffect(() => {\n        document.addEventListener('keypress', enterClick);\n        return () => {\n            document.removeEventListener('keypress', enterClick);\n        }\n    }, [message]);\n\n\n    const fileUploadHandler = (): void => {\n        if(fileUpload.current?.files !== null && fileUpload.current?.files !== undefined){\n            const file = fileUpload.current.files[0];\n            //console.log('file', file);\n            /* Convert Image to base64 decode */\n            convertFile(file).then((fileBase64: string) => {\n                //console.log('image Decode', fileBase64);\n                //console.log('file Name', file.name);\n                const timestamp: string = getTimeStamp();\n                sendNewMessage(webSocket, 'image', userName, chatPeople, fileBase64, timestamp);\n            }).catch(err => console.log('error', err));\n        }\n    }\n\n    const convertFile = (file: File): Promise<string> => {\n        return new Promise((resolve,reject) => {\n            let reader = new FileReader()\n            // Resolve the Base64 string result\n            reader.onload = () => { \n                if(typeof reader.result === 'string'){\n                    resolve(reader.result);\n                }\n            }\n            // Reject if error occurs\n            reader.onerror = () => { \n                reject(reader.error) \n            }\n            // Read the file\n            reader.readAsDataURL(file);\n        })\n    }\n\n    return(\n        <div id='messageSender'> \n            <TextField\n                label='你想說什麼'\n                id=\"msgTextEdit\"                 \n                //helperText={<HelperText>Help Me!</HelperText>}\n                onTrailingIconSelect={() => {fileUpload.current?.click();}}\n                trailingIcon={<MaterialIcon role=\"button\" icon=\"image\"/>}\n            >\n                <Input\n                    id=\"msgTextEditInput\" \n                    value={message}\n                    onChange={messageHandler} \n                />\n            </TextField>    \n            <input type='file' style={{display: 'none'}} ref={fileUpload} accept=\"image/*\" onChange={fileUploadHandler}/> \n            <Button \n                id=\"txtSendBtn\"\n                outlined={true} \n                raised={true} \n                icon={<MaterialIcon role=\"button\" icon=\"send\" />}\n                onClick={sendMessage}\n            >Send\n            </Button>\n        </div>\n    );\n}\n\nexport default MessageSender;","import React, { useEffect } from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {\n    CONNECT_WEB_SOCKET\n} from '../../redux/actionTypes';\nimport {\n    listenUserList,\n    listenPublicMessage,\n    listenPrivateMessage\n} from '../../WebSocketService'\nimport MessagePanel from './Components/MessagePanel';\nimport MessageSender from './Components/MessageSender';\nimport {stateInterface} from '../../Interfaces';\n\nconst ChatRoom = () => {  \n    const dispatch = useDispatch();\n    const {webSocket, isMobile} = useSelector((state: stateInterface) => state.chatRoomReducer);\n    \n    ///Connect web socket\n    useEffect(() => {\n        if(webSocket){\n            listenPublicMessage(webSocket, dispatch, isMobile);\n            listenPrivateMessage(webSocket, dispatch, isMobile);\n            listenUserList(webSocket, dispatch);\n        }else{\n            dispatch({type: CONNECT_WEB_SOCKET});\n        }\n    }, [webSocket]);\n\n    return (\n        <main id='mainGrid'>\n            <MessagePanel/>\n            <MessageSender/>\n        </main>\n    );\n}\n\nexport default ChatRoom;","import React, {useState} from 'react';\nimport {useDispatch} from 'react-redux';\nimport List, {ListItem, ListItemGraphic, ListItemText} from '@material/react-list';\nimport MaterialIcon from '@material/react-material-icon';\nimport {SET_MESSAGE_BOX_STYLE} from '../../../redux/actionTypes';\n\nconst StyleList = () => {\n    const [styleListIndex, setStyleListIndex] = useState(0);\n    const dispatch = useDispatch();\n\n    const setMessageBoxStyle = (index: number): void => {\n        setStyleListIndex(index);\n        const isMessageBoxStyle = index === 0? true: false;\n        dispatch({\n            type: SET_MESSAGE_BOX_STYLE,\n            payload: isMessageBoxStyle\n        })\n    }\n\n    return(\n        <List \n            singleSelection \n            selectedIndex={styleListIndex}\n            handleSelect={setMessageBoxStyle}\n        >\n            <ListItem>\n                <ListItemGraphic graphic={<MaterialIcon icon='color_lens'/>} />\n                <ListItemText primaryText='Colorful Theme Style' />\n            </ListItem>\n            <ListItem>\n                <ListItemGraphic graphic={<MaterialIcon icon='format_color_reset'/>} />\n                <ListItemText primaryText='Simple Style' />\n            </ListItem>\n        </List>\n    );\n}\n\nexport default StyleList;","import React from 'react';\n\ninterface propInterface{\n    newMessageCount: number\n}\n\nconst ＭessageAlarm = React.memo((props: propInterface) => {\n    const {newMessageCount} = props;\n    return(\n        <div className='message-alarm'>{newMessageCount}</div>\n    )\n}, (prevProps: propInterface, nextProps: propInterface): boolean => {\n    return (prevProps.newMessageCount === nextProps.newMessageCount);\n})\nexport default ＭessageAlarm;","import React, {useState, useCallback, useEffect} from 'react';\nimport {useSelector, useDispatch} from 'react-redux';\nimport List, {ListItem, ListItemGraphic, ListItemText} from '@material/react-list';\nimport MaterialIcon from '@material/react-material-icon';\nimport {getLocalStorageWithExpiry} from '../../../StorageService';\nimport { \n    SET_CHAT_PEOPLE,\n    SET_NEW_MESSAGE_ALARM\n} from '../../../redux/actionTypes';\nimport ＭessageAlarm from './ＭessageAlarm';\nimport {stateInterface} from '../../../Interfaces'\n\nconst UserList = () => {\n    const [selectedIndex, setSelectedIndex] = useState(0);\n    const myUserName = getLocalStorageWithExpiry('userName');\n    const {userList, newMessageCount} = useSelector((state: stateInterface) => state.chatRoomReducer);\n    //console.log('userList', userList);\n    const dispatch = useDispatch();\n    const onlineUser = Object.values(userList).filter((user) => user.status === 'online' && user.userName !== myUserName);\n    onlineUser.splice(0, 0, {userName: 'Public', status: 'online'});\n\n    const changeChatPeople = useCallback((index: number) => {\n        setSelectedIndex(index);\n        dispatch({\n            type: SET_CHAT_PEOPLE,\n            payload: onlineUser[index].userName\n        });\n        dispatch({\n            type: SET_NEW_MESSAGE_ALARM,\n            payload: {\n                type: 'reset',\n                userName: onlineUser[index].userName\n            }\n        })\n    }, [onlineUser]);\n\n    useEffect(() => {\n        changeChatPeople(0); //Default is public\n    }, []);\n\n    return(\n        <List \n            singleSelection \n            selectedIndex={selectedIndex}\n            handleSelect={changeChatPeople}\n        >\n            {\n                onlineUser.map((user) => {\n                    return(\n                        <ListItem key={user.userName}>\n                            <ListItemGraphic graphic={\n                                <MaterialIcon \n                                    icon={(user.userName==='Public')? 'people': 'person'}\n                                />\n                                } \n                            />\n                            <ListItemText primaryText={user.userName} />\n                            {(newMessageCount[user.userName] > 0)?\n                            <ＭessageAlarm \n                                newMessageCount={(newMessageCount[user.userName])? newMessageCount[user.userName]: 0} \n                            />: []\n                            }\n                        </ListItem>\n                    )\n                })\n            }\n        </List>\n    )\n}\n\nexport default UserList;","import React, {useState} from 'react';\nimport {useSelector, useDispatch} from 'react-redux';\nimport Drawer, {DrawerTitle, DrawerContent, DrawerHeader} from '@material/react-drawer';\nimport MaterialIcon from '@material/react-material-icon';\n\nimport {SET_DRAWER_OPEN} from '../../redux/actionTypes';\nimport StyleList from './Components/StyleList';\nimport UserList from './Components/UserList';\nimport {stateInterface} from '../../Interfaces';\n\nconst DrawerBar = () => {\n    const dispatch = useDispatch();\n    const {drawerOpen} = useSelector((state: stateInterface) => state.chatRoomReducer);\n\n    const closeDrawer = () => {\n        dispatch({\n            type: SET_DRAWER_OPEN,\n            payload: false\n        })\n    }\n\n    return(\n        <Drawer\n            modal\n            open={drawerOpen}\n            onClose={closeDrawer}\n        >\n            <DrawerContent>\n                <StyleList/>\n                <hr style={{borderColor: '#2E86C1', width: '90%'}}/>\n                <UserList/>\n            </DrawerContent>\n        </Drawer>\n    )\n}\n\nexport default DrawerBar;","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { push } from 'connected-react-router';\nimport TopAppBar, {\n    TopAppBarIcon,\n    TopAppBarRow,\n    TopAppBarSection,\n    TopAppBarTitle,\n  } from '@material/react-top-app-bar';\nimport MaterialIcon from '@material/react-material-icon';\nimport {\n    SET_DRAWER_OPEN,\n    LOGOUT\n} from '../redux/actionTypes';\nimport {stateInterface} from '../Interfaces';\n\n\nconst TopBar = () => {\n    const dispatch = useDispatch();\n    const {drawerOpen, webSocket, chatPeople} = useSelector((state: stateInterface) => state.chatRoomReducer);\n\n    const showDrawerHandler = () => {\n        dispatch({\n            type: SET_DRAWER_OPEN,\n            payload: !drawerOpen\n        })\n    }\n\n    /// Logout handler\n    const logoutHandler = (): void => {\n        dispatch({\n            type: LOGOUT,\n            payload: webSocket\n        })\n    };\n\n    return(\n        <TopAppBar>\n            <TopAppBarRow>\n                <TopAppBarSection align='start'>\n                    <TopAppBarIcon navIcon tabIndex={0}>\n                        <MaterialIcon hasRipple icon='menu' onClick={showDrawerHandler}/>\n                    </TopAppBarIcon>\n                    <TopAppBarTitle tabIndex={1}>\n                        {`Chat Room`}\n                        <MaterialIcon \n                            hasRipple \n                            icon='chat' \n                        />\n                    </TopAppBarTitle>\n                </TopAppBarSection>\n                <TopAppBarSection>\n                    <a id='chat-people'> Chat: {chatPeople} </a>\n                </TopAppBarSection>\n                <TopAppBarSection align='end' role='toolbar'>\n                    <TopAppBarIcon actionItem tabIndex={0}>\n                        <MaterialIcon \n                            aria-label=\"Edit\" \n                            hasRipple \n                            icon='person'\n                            data-tooltip-id=\"tooltip-id\"\n                            onClick={() => {dispatch(push('/edit'))}}\n                        />\n                       \n                    </TopAppBarIcon>\n                    <TopAppBarIcon actionItem tabIndex={1}>\n                        <MaterialIcon \n                            aria-label=\"Logout\" \n                            hasRipple \n                            icon='exit_to_app' \n                            onClick={logoutHandler}\n                        />\n                    </TopAppBarIcon>\n                </TopAppBarSection>\n            </TopAppBarRow>\n        </TopAppBar>\n    );\n};\n\nexport default TopBar;","import React, {useEffect} from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { push } from 'connected-react-router';\nimport {TopAppBarFixedAdjust} from '@material/react-top-app-bar';\nimport {\n    getLocalStorageWithExpiry, \n} from '../StorageService';\nimport {\n    SET_IS_MOBILE\n} from '../redux/actionTypes';\nimport ChatRoom from './ChatRoom/ChatRoom';\nimport DrawerBar from './Drawer/DrawerBar';\nimport TopBar from './TopBar';\nimport {stateInterface} from '../Interfaces';\n\nconst Home = () => {\n    const dispatch = useDispatch();\n    const {isMobile} = useSelector((state: stateInterface) => state.chatRoomReducer);\n    const token = getLocalStorageWithExpiry('token');\n\n    /// Check if is mobile device\n    useEffect(() => {\n        if(/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(navigator.userAgent) \n            || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(navigator.userAgent.substr(0,4))) { \n            dispatch({\n                type: SET_IS_MOBILE,\n                payload: true\n            });\n        } \n        if(!isMobile){\n            if(window.Notification && Notification.permission !== 'granted'){\n                Notification.requestPermission((status) => {\n                    console.log('status', status);\n                });\n            }\n        }\n    }, []);\n    \n    /// Check if is logined\n    useEffect(() => {\n        if(!token){\n            dispatch(push('/login'));\n        }\n    }, [token]);\n\n\n    return (\n    <>\n    {\n        (token)?\n        <>\n            <div className='drawer-container'>\n                <TopBar/>\n                <TopAppBarFixedAdjust>\n                    <DrawerBar />\n                    <ChatRoom />\n                </TopAppBarFixedAdjust>\n            </div>\n        </>\n        :[]\n    }\n    </>\n    )\n}\n\nexport default Home;","import React from 'react';\nimport Dialog, {\n    DialogTitle,\n    DialogContent,\n    DialogFooter,\n    DialogButton,\n  } from '@material/react-dialog';\nimport Button from '@material/react-button';\nimport MaterialIcon from '@material/react-material-icon';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { push } from 'connected-react-router';\nimport {stateInterface} from '../../../Interfaces';\n\nconst SignupDialog = () => {\n    const dispatch = useDispatch();\n    const {status} = useSelector((state: stateInterface) => state.signupReducer);\n    return(\n        <Dialog id='signupDialog' open={status==='success'}>\n            <DialogTitle>Success</DialogTitle>\n            <DialogContent>\n                <div>Signup successfully</div>\n            </DialogContent>\n            <DialogFooter>\n                <Button \n                    className=\"signup_login_btn\"\n                    outlined={true} \n                    raised={true} \n                    icon={<MaterialIcon role=\"button\" icon=\"account_box\" />}\n                    onClick={() => {\n                        dispatch(push('login'));\n                    }}\n                >Signup\n                </Button>\n            </DialogFooter>\n        </Dialog>\n    );\n}\n\nexport default SignupDialog;","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Card, {\n    CardPrimaryContent,\n    CardActions,\n    CardActionButtons,\n} from \"@material/react-card\";\nimport Button from '@material/react-button';\nimport TextField, {Input} from '@material/react-text-field';\nimport MaterialIcon from '@material/react-material-icon';\nimport { push } from 'connected-react-router';\nimport {\n    SET_SIGNUP_ACCOUNT,\n    SET_SIGNUP_PASSWORD,\n    SET_SIGNUP_CONFIRM_PASSWORD,\n    SET_SIGNUP_USERNAME,\n    SET_SIGNUP_MESSAGE,\n    SIGNUP_REQUEST\n} from '../../redux/actionTypes';\nimport SignupDialog from './Components/SignupDialog';\nimport {stateInterface} from '../../Interfaces';\n\nconst Signup = () => {\n    const dispatch = useDispatch();\n    const {account, password, confirmPassword, userName, status, message} = useSelector((state: stateInterface) => state.signupReducer);\n\n    const inputHandler = (e: any): void => {\n        const {id, value} = e.currentTarget;\n        switch(id){\n            case \"account\":\n                dispatch({\n                    type: SET_SIGNUP_ACCOUNT,\n                    payload: value,\n                });\n                break;\n            case \"password\":\n                dispatch({\n                    type: SET_SIGNUP_PASSWORD,\n                    payload: value,\n                });\n                break;\n            case \"confirmPassword\":\n                dispatch({\n                    type: SET_SIGNUP_CONFIRM_PASSWORD,\n                    payload: value,\n                });\n                break;\n            case \"userName\":\n                dispatch({\n                    type: SET_SIGNUP_USERNAME,\n                    payload: value,\n                });\n                break;\n        }\n    }\n\n    const signupHandler = (): void => {\n        console.log('signup', account, password, confirmPassword, userName);\n        if(!account || !password || !confirmPassword || !userName){\n            dispatch({\n                type: SET_SIGNUP_MESSAGE,\n                payload: 'Please fill in all information'\n            });\n            return;\n        }\n        if(confirmPassword !== password){\n            dispatch({\n                type: SET_SIGNUP_MESSAGE,\n                payload: 'Passwords are not same!'\n            });\n            return;\n        }\n        if(account.indexOf('@') <= 0){\n            dispatch({\n                type: SET_SIGNUP_MESSAGE,\n                payload: 'Invalid email!'\n            });\n            return;\n        }\n        dispatch({\n            type: SIGNUP_REQUEST,\n            payload: {\n                account: account,\n                password: password,\n                userName: userName\n            }   \n        });\n    }\n\n    return (\n        <>\n        <div id='signLoginContainer'>\n            <Card id=\"signLoginCard\">\n                <CardPrimaryContent className=\"tittle\">\n                    <MaterialIcon role=\"button\" icon=\"person\" />\n                    <a>Signup+</a>\n                </CardPrimaryContent>\n                <hr className='separate_line'/>\n                <CardActions>\n                    <CardActionButtons className='signup_login_info'>\n                        <TextField\n                            label='Email'\n                            className=\"textField\" \n                            //helperText={<HelperText>Help Me!</HelperText>}\n                            onTrailingIconSelect={(): void => {\n                                dispatch({\n                                    type: SET_SIGNUP_ACCOUNT,\n                                    payload: ''\n                                })\n                            }}\n                            trailingIcon={<MaterialIcon role=\"button\" icon=\"delete\"/>}\n                        >\n                            <Input\n                                id=\"account\"\n                                type=\"account\"\n                                value={account}\n                                onChange={inputHandler} \n                            />\n                        </TextField>\n                        <TextField\n                            label='Nick Name'\n                            className=\"textField\" \n                            //helperText={<HelperText>Help Me!</HelperText>}\n                            onTrailingIconSelect={(): void => {\n                                dispatch({\n                                    type: SET_SIGNUP_USERNAME,\n                                    payload: ''\n                                })\n                            }}\n                            trailingIcon={<MaterialIcon role=\"button\" icon=\"delete\"/>}\n                        >\n                            <Input\n                                id=\"userName\"\n                                type=\"string\"\n                                value={userName}\n                                onChange={inputHandler} \n                            />\n                        </TextField>\n                        <TextField\n                            label='Password'\n                            className=\"textField\"  \n                            //helperText={<HelperText>Help Me!</HelperText>}\n                            onTrailingIconSelect={ (): void => {\n                                dispatch({\n                                    type: SET_SIGNUP_PASSWORD,\n                                    payload: ''\n                                })\n                            }}\n                            trailingIcon={<MaterialIcon role=\"button\" icon=\"delete\"/>}\n                        >\n                            <Input\n                                id=\"password\"\n                                type=\"password\"\n                                value={password}\n                                onChange={inputHandler} \n                            />\n                        </TextField>\n                        <TextField\n                            label='Confirm Password'\n                            className=\"textField\"  \n                            //helperText={<HelperText>Help Me!</HelperText>}\n                            onTrailingIconSelect={ (): void => {\n                                dispatch({\n                                    type: SET_SIGNUP_CONFIRM_PASSWORD,\n                                    payload: ''\n                                })\n                            }}\n                            trailingIcon={<MaterialIcon role=\"button\" icon=\"delete\"/>}\n                        >\n                            <Input\n                                id=\"confirmPassword\"\n                                type=\"password\"\n                                value={confirmPassword}\n                                onChange={inputHandler} \n                            />\n                        </TextField>\n                        <div className='signup_btn_block'>\n                            <Button \n                                className=\"signup_login_btn\"\n                                outlined={true} \n                                raised={true} \n                                icon={<MaterialIcon role=\"button\" icon=\"person_add\" />}\n                                onClick={signupHandler}\n                            >Signup\n                            </Button>\n                            <Button \n                                className=\"signup_login_btn\"\n                                outlined={true} \n                                raised={true} \n                                icon={<MaterialIcon role=\"button\" icon=\"keyboard_backspace\" />}\n                                onClick={() => {\n                                    dispatch(push('login'));\n                                }}\n                            >login\n                            </Button>\n                        </div>\n                    </CardActionButtons>\n                </CardActions>\n                {(status === \"error\" || message !== \"\")?(\n                    <div className='warnMsg'>\n                        <p>{message}</p>\n                    </div>\n                ): []}\n            </Card>\n        </div>\n        <SignupDialog/>\n        </>\n    );\n}\n\nexport default Signup;","import React, {useState, useEffect} from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Card, {\n    CardPrimaryContent,\n    CardActions,\n    CardActionButtons,\n} from \"@material/react-card\";\nimport Button from '@material/react-button';\nimport TextField, {Input} from '@material/react-text-field';\nimport MaterialIcon from '@material/react-material-icon';\nimport { push } from 'connected-react-router';\nimport {\n    SET_SIGNUP_ACCOUNT,\n    SET_SIGNUP_PASSWORD,\n    SET_SIGNUP_CONFIRM_PASSWORD,\n    SET_SIGNUP_USERNAME,\n    SET_SIGNUP_MESSAGE,\n    SIGNUP_REQUEST\n} from '../../redux/actionTypes';\nimport SignupDialog from './Components/SignupDialog';\nimport {stateInterface} from '../../Interfaces';\n\nconst Edit = () => {\n    const dispatch = useDispatch();\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const {account, confirmPassword, userName, status, message} = useSelector((state: stateInterface) => state.signupReducer);\n\n    const inputHandler = (e: any): void => {\n        const {id, value} = e.currentTarget;\n        switch(id){\n            case \"account\":\n                dispatch({\n                    type: SET_SIGNUP_ACCOUNT,\n                    payload: value,\n                });\n                break;\n            case \"password\":\n                dispatch({\n                    type: SET_SIGNUP_PASSWORD,\n                    payload: value,\n                });\n                break;\n            case \"confirmPassword\":\n                dispatch({\n                    type: SET_SIGNUP_CONFIRM_PASSWORD,\n                    payload: value,\n                });\n                break;\n            case \"userName\":\n                dispatch({\n                    type: SET_SIGNUP_USERNAME,\n                    payload: value,\n                });\n                break;\n        }\n    }\n\n    const signupHandler = (): void => {\n        console.log('signup', account, password, confirmPassword, userName);\n        if(!account || !password || !confirmPassword || !userName){\n            dispatch({\n                type: SET_SIGNUP_MESSAGE,\n                payload: 'Please fill in all information'\n            });\n            return;\n        }\n        if(confirmPassword !== password){\n            dispatch({\n                type: SET_SIGNUP_MESSAGE,\n                payload: 'Passwords are not same!'\n            });\n            return;\n        }\n        if(account.indexOf('@') <= 0){\n            dispatch({\n                type: SET_SIGNUP_MESSAGE,\n                payload: 'Invalid email!'\n            });\n            return;\n        }\n        dispatch({\n            type: SIGNUP_REQUEST,\n            payload: {\n                account: account,\n                password: password,\n                userName: userName\n            }   \n        });\n    }\n\n    return (\n        <>\n        <div id='signLoginContainer'>\n            <Card id=\"signLoginCard\">\n                <CardPrimaryContent className=\"tittle\">\n                    <MaterialIcon role=\"button\" icon=\"person\" />\n                    <a>Information</a>\n                </CardPrimaryContent>\n                <hr className='separate_line'/>\n                <CardActions>\n                    <CardActionButtons className='signup_login_info'>\n                        <TextField\n                            label='Email'\n                            className=\"textField\" \n                            //helperText={<HelperText>Help Me!</HelperText>}\n                            onTrailingIconSelect={(): void => {\n                                dispatch({\n                                    type: SET_SIGNUP_ACCOUNT,\n                                    payload: ''\n                                })\n                            }}\n                            trailingIcon={<MaterialIcon role=\"button\" icon=\"delete\"/>}\n                        >\n                            <Input\n                                id=\"account\"\n                                type=\"account\"\n                                value={account}\n                                onChange={inputHandler} \n                            />\n                        </TextField>\n                        <TextField\n                            label='Nick Name'\n                            className=\"textField\" \n                            //helperText={<HelperText>Help Me!</HelperText>}\n                            onTrailingIconSelect={(): void => {\n                                dispatch({\n                                    type: SET_SIGNUP_USERNAME,\n                                    payload: ''\n                                })\n                            }}\n                            trailingIcon={<MaterialIcon role=\"button\" icon=\"delete\"/>}\n                        >\n                            <Input\n                                id=\"userName\"\n                                type=\"string\"\n                                value={userName}\n                                onChange={inputHandler} \n                            />\n                        </TextField>\n                        <TextField\n                            label='Password'\n                            className=\"textField\"  \n                            //helperText={<HelperText>Help Me!</HelperText>}\n                            onTrailingIconSelect={ (): void => {\n                                dispatch({\n                                    type: SET_SIGNUP_PASSWORD,\n                                    payload: ''\n                                })\n                            }}\n                            trailingIcon={<MaterialIcon role=\"button\" icon=\"delete\"/>}\n                        >\n                            <Input\n                                id=\"password\"\n                                type=\"password\"\n                                value={password}\n                                onChange={inputHandler} \n                            />\n                        </TextField>\n                        <TextField\n                            label='Confirm Password'\n                            className=\"textField\"  \n                            //helperText={<HelperText>Help Me!</HelperText>}\n                            onTrailingIconSelect={ (): void => {\n                                dispatch({\n                                    type: SET_SIGNUP_CONFIRM_PASSWORD,\n                                    payload: ''\n                                })\n                            }}\n                            trailingIcon={<MaterialIcon role=\"button\" icon=\"delete\"/>}\n                        >\n                            <Input\n                                id=\"confirmPassword\"\n                                type=\"password\"\n                                value={confirmPassword}\n                                onChange={inputHandler} \n                            />\n                        </TextField>\n                        <div className='signup_btn_block'>\n                            <Button \n                                className=\"signup_login_btn\"\n                                outlined={true} \n                                raised={true} \n                                disabled={true}\n                                icon={<MaterialIcon role=\"button\" icon=\"person_add\" />}\n                                onClick={signupHandler}\n                            >Save\n                            </Button>\n                            <Button \n                                className=\"signup_login_btn\"\n                                outlined={true} \n                                raised={true} \n                                icon={<MaterialIcon role=\"button\" icon=\"keyboard_backspace\" />}\n                                onClick={() => {\n                                    dispatch(push('login'));\n                                }}\n                            >Back\n                            </Button>\n                        </div>\n                    </CardActionButtons>\n                </CardActions>\n                {(status === \"error\" || message !== \"\")?(\n                    <div className='warnMsg'>\n                        <p>{message}</p>\n                    </div>\n                ): []}\n            </Card>\n        </div>\n        <SignupDialog/>\n        </>\n    );\n}\n\nexport default Edit;","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport { Route, Switch } from 'react-router'; // react-router v4/v5\r\nimport { ConnectedRouter } from 'connected-react-router';\r\nimport configureStore, { history } from './redux/configureStore';\r\nimport './App.scss';\r\nimport Login from './view/LoginSignup/Login';\r\nimport Home from './view/Home'\r\nimport Signup from './view/LoginSignup/Signup';\r\nimport Edit from './view/LoginSignup/Edit';\r\n\r\n\r\nconst store = configureStore({});\r\n\r\nconst App = () => {\r\n    return (\r\n        <Provider store={store}>\r\n            {/*<Navigator />*/}\r\n            <ConnectedRouter history={history}>      \r\n            <Switch>\r\n                <Route exact path=\"/\">\r\n                    <Home /> \r\n                </Route>\r\n                <Route exact path=\"/login\">\r\n                    <Login />\r\n                </Route>\r\n                <Route exact path=\"/signup\">\r\n                    <Signup />\r\n                </Route>\r\n                <Route exact path=\"/edit\">\r\n                    <Edit />\r\n                </Route>\r\n                <Route exact path=\"*\">\r\n                    <div>\r\n                        <h1>Sorry, No this page</h1>\r\n                    </div>\r\n                </Route>\r\n            </Switch>\r\n            </ConnectedRouter>\r\n        </Provider>\r\n    );\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/message.232a7059.png\";"],"sourceRoot":""}