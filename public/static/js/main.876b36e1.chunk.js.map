{"version":3,"sources":["Image/message.png","Image/chat.png","redux/reducers/loginReducer.ts","redux/actionTypes.ts","redux/reducers/signupReducer.ts","redux/reducers/chatRoomReducer.ts","redux/reducers/editReducer.ts","redux/reducers/rootReducer.ts","config.ts","Services/ApiService.ts","Services/StorageService.ts","Services/CryptoService.ts","Services/WebSocketService.ts","redux/sagas/loginSaga.ts","redux/sagas/chatRoomSaga.ts","redux/sagas/signupSaga.ts","redux/sagas/editSaga.ts","redux/sagas/saga.ts","redux/configureStore.ts","view/LoginSignup/Login.tsx","view/ChatRoom/Components/MessageBoxUserInfo.tsx","view/ChatRoom/Components/MessageBoxText.tsx","view/ChatRoom/Components/MessageBox.tsx","view/ChatRoom/Components/MessagePanel.tsx","Services/CommonService.ts","view/ChatRoom/Components/MessageSender.tsx","view/ChatRoom/ChatRoom.tsx","view/Drawer/Components/StyleList.tsx","view/Drawer/Components/ＭessageAlarm.tsx","view/Drawer/Components/UserList.tsx","view/Drawer/Components/User.tsx","view/Drawer/DrawerBar.tsx","view/TopBar.tsx","view/Components/Modal.tsx","view/Home.tsx","view/LoginSignup/Components/SignupDialog.tsx","view/LoginSignup/Signup.tsx","view/LoginSignup/Components/EditDialog.tsx","view/LoginSignup/Edit.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["module","exports","initState","account","password","message","status","loginReducer","state","action","type","payload","userName","confirmPassword","fileName","successDialog","messageBox","webSocket","onlineCount","connectStatus","styleMessageBox","isMobile","drawerOpen","userList","photo","socketId","chatPeople","newMessageCount","imageModalOpen","imageEncodeString","webSocketIsListening","chatRoomReducer","concat","counter","Object","entries","forEach","key","value","newUserName","newPhotoFileName","editReducer","createRootReducer","history","combineReducers","router","connectRouter","signupReducer","serverHostName","axios","defaults","baseURL","headers","get","post","withCredentials","xsrfCookieName","xsrfHeaderName","axiosGet","url","params","console","log","config","axiosPostFormData","data","formData","FormData","append","axiosPatchFormData","patch","setLocalStorageWithExpiry","ttl","now","Date","item","expiry","getTime","localStorage","setItem","JSON","stringify","removeLocalStorage","removeItem","getLocalStorageWithExpiry","itemStr","getItem","parse","encrypt","plainText","CryptoJS","AES","toString","decrypt","ciphertext","enc","Utf8","getUserName","createWebSocket","webSocketClient","query","disconnectWebSocket","disconnect","sendNewMessage","messageType","sourceUser","targetUser","timestamp","encryptMessage","emit","setNewMessageAlarm","dispatch","loginRequest","logout","email","result","put","token","uid","Cookies","set","push","connectWebSocket","signupRequest","getUserInfoRequest","editUserInfoRequest","rootSaga","takeEvery","createBrowserHistory","sagaMiddleware","createSagaMiddleware","Login","useDispatch","useSelector","setAccountPassword","e","currentTarget","id","loginHandler","useEffect","enterClick","document","addEventListener","removeEventListener","className","role","icon","square","imageUrl","require","label","onTrailingIconSelect","trailingIcon","data-testid","onChange","outlined","raised","onClick","MessageBoxUserInfo","userMessage","MessageBoxText","openImageMadal","src","getMessage","MessageBox","React","memo","prevProps","nextProps","MessagePanel","messagePanelRef","useRef","anchorRef","backgroundStyleCss","current","offsetHeight","scrollHeight","scrollTop","scrollTo","behavior","top","ref","filter","map","convertFile","file","Promise","resolve","reject","reader","FileReader","onload","onerror","error","readAsDataURL","compressImage","a","options","maxSizeMB","maxWidthOrHeight","useWebWorker","imageCompression","compressedFile","MessageSender","useState","setMessage","fileUpload","getTimeStamp","date","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getUTCMilliseconds","sendMessage","fileUploadHandler","files","undefined","then","fileBase64","catch","err","click","accept","ChatRoom","on","listenUserList","decryptMessage","hasFocus","Notification","body","listenNewMessage","StyleList","styleListIndex","setStyleListIndex","singleSelection","selectedIndex","handleSelect","index","graphic","primaryText","ＭessageAlarm","props","UserList","myUserName","isOnline","setSelectedIndex","users","values","user","splice","changeChatPeople","useCallback","alt","User","userInfo","DrawerBar","window","innerWidth","width","setwidth","handleResize","modal","open","onClose","style","borderColor","TopBar","getOnlinePeople","length","align","navIcon","tabIndex","hasRipple","actionItem","aria-label","data-tooltip-id","Modal","closeModal","display","color","Home","test","navigator","userAgent","substr","permission","requestPermission","SignupDialog","returnLoginHandler","Signup","uploadPhotoRef","inputHandler","photoUploadHandler","name","borderBottom","indexOf","EditDialog","returnChatRoomHandler","Edit","newPhoto","disabled","store","preloadedState","createStore","compose","applyMiddleware","routerMiddleware","run","configureStore","App","exact","path","Boolean","location","hostname","match","ReactDOM","render","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.876b36e1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/message.232a7059.png\";","module.exports = __webpack_public_path__ + \"static/media/chat.36cb8b4b.png\";","import {\r\n    SET_LOGIN_ACCOUNT,\r\n    SET_LOGIN_PASSWORD,\r\n    LOGIN_REQUEST,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL\r\n} from '../actionTypes'\r\nimport {loginState} from '../../Interfaces';\r\n\r\nconst initState: loginState = {\r\n    account: '',\r\n    password: '',\r\n    message: '',\r\n    status: '',\r\n}\r\n\r\nconst loginReducer = (state = initState, action: any): loginState => {\r\n    switch(action.type){\r\n        case SET_LOGIN_ACCOUNT: {\r\n            return {...state, account: action.payload};\r\n        }\r\n        case SET_LOGIN_PASSWORD: {\r\n            return {...state, password: action.payload};\r\n        }\r\n        case LOGIN_REQUEST: {\r\n            return {...state, status: 'loading'};\r\n        }\r\n        case LOGIN_SUCCESS: {\r\n            return {...state, status: 'logined'};\r\n        }\r\n        case LOGIN_FAIL: {\r\n            return {\r\n                ...state, \r\n                status: 'error',\r\n                message: action.payload.message,\r\n            };\r\n        }\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default loginReducer;","/* Login related */\r\nexport const SET_LOGIN_ACCOUNT = 'SET_LOGIN_ACCOUNT';\r\nexport const SET_LOGIN_PASSWORD = 'SET_LOGIN_PASSWORD';\r\nexport const LOGIN_REQUEST = 'LOGIN_REQUEST';\r\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\nexport const LOGIN_FAIL = 'LOGIN_FAIL';\r\nexport const LOGOUT = 'LOGOUT';\r\n\r\n/* Signup related */\r\nexport const SET_SIGNUP_ACCOUNT = 'SET_SIGNUP_ACCOUNT';\r\nexport const SET_SIGNUP_USERNAME = 'SET_SIGNUP_USERNAME';\r\nexport const SET_SIGNUP_PASSWORD = 'SET_SIGNUP_PASSWORD';\r\nexport const SET_SIGNUP_CONFIRM_PASSWORD = 'SET_SIGNUP_CONFIRM_PASSWORD';\r\nexport const SET_SIGNUP_MESSAGE = 'SET_SIGNUP_MESSAGE';\r\nexport const SET_SIGNUP_UPLOAD_FILE_NAME = 'SET_SIGNUP_UPLOAD_FILE_NAME';\r\nexport const SIGNUP_REQUEST = 'SIGNUP_REQUEST';\r\nexport const SIGNUP_SUCCESS = 'SIGNUP_SUCCESS';\r\nexport const SIGNUP_FAIL = 'SIGNUP_FAIL';\r\nexport const SET_SUCCESS_DIALOG = 'SET_SUCCESS_DIALOG';\r\n\r\n/* Edit user information related */\r\nexport const GET_USER_ACCOUNT_REQUEST = 'GET_USER_ACCOUNT_REQUEST';\r\nexport const GET_USER_ACCOUNT_SUCCESS = 'GET_USER_ACCOUNT_SUCCESS';\r\nexport const GET_USER_ACCOUNT_FAIL = 'GET_USER_ACCOUNT_FAIL';\r\nexport const SET_EDIT_USER_NAME = 'SET_EDIT_USER_NAME';\r\nexport const SET_EDIT_FILE_NAME = 'SET_EDIT_FILE_NAME';\r\nexport const SET_EDIT_MESSAGE = 'SET_EDIT_MESSAGE';\r\nexport const EDIT_USER_INFO_REQUEST = 'EDIT_USER_INFO_REQUEST';\r\nexport const EDIT_USER_INFO_SUCCESS = 'EDIT_USER_INFO_SUCCESS';\r\nexport const EDIT_USER_INFO_FAIL = 'EDIT_USER_INFO_FAIL';\r\nexport const SET_EDIT_SUCCESS_DIALOG = 'SET_EDIT_SUCCESS_DIALOG';\r\n\r\n\r\n/* Chat room related */\r\nexport const CONNECT_WEB_SOCKET = 'CONNECT_WEB_SOCKET';\r\nexport const CONNECT_WEB_SOCKET_SUCCESS = 'CONNECT_WEB_SOCKET_SUCCESS';\r\nexport const CONNECT_WEB_SOCKET_FAIL = 'CONNECT_WEB_SOCKET_FAIL';\r\nexport const SET_WEB_SOCKET_IS_LISTENING = 'SET_WEB_SOCKET_IS_LISTENING';\r\nexport const DISCONNECT_WEB_SOCKET = 'DISCONNECT_WEB_SOCKET';\r\nexport const SET_MESSAGE_BOX = 'SET_MESSAGE_BOX';\r\nexport const SET_USER_LIST = 'SET_USER_LIST';\r\nexport const SET_MESSAGE_BOX_STYLE = 'SET_MESSAGE_BOX_STYLE';\r\nexport const SET_IS_MOBILE = 'SET_IS_MOBILE';\r\nexport const SET_DRAWER_OPEN = 'SET_DRAWER_OPEN';\r\nexport const SET_CHAT_PEOPLE = 'SET_CHAT_PEOPLE';\r\nexport const SET_NEW_MESSAGE_ALARM = 'SET_NEW_MESSAGE_ALARM';\r\nexport const SET_IMAGE_MODAL = 'SET_IMAGE_MODAL'\r\n\r\n\r\n\r\n\r\n","import {\r\n    SET_SIGNUP_ACCOUNT,\r\n    SET_SIGNUP_PASSWORD,\r\n    SET_SIGNUP_CONFIRM_PASSWORD,\r\n    SET_SIGNUP_USERNAME,\r\n    SET_SIGNUP_MESSAGE,\r\n    SET_SIGNUP_UPLOAD_FILE_NAME,\r\n    SIGNUP_REQUEST,\r\n    SIGNUP_SUCCESS,\r\n    SET_SUCCESS_DIALOG,\r\n    SIGNUP_FAIL,\r\n} from '../actionTypes'\r\n\r\nimport {signupState} from './../../Interfaces'\r\n\r\nconst initState: signupState = {\r\n    account: '',\r\n    userName: '',\r\n    password: '',\r\n    confirmPassword: '',\r\n    message: '',\r\n    status: '',\r\n    fileName: '',\r\n    successDialog: false\r\n}\r\n\r\nconst loginReducer = (state = initState, action: any): signupState => {\r\n    switch(action.type){\r\n        case SET_SIGNUP_ACCOUNT: {\r\n            return {...state, account: action.payload};\r\n        }\r\n        case SET_SIGNUP_PASSWORD: {\r\n            return {...state, password: action.payload};\r\n        }\r\n        case SET_SIGNUP_USERNAME: {\r\n            return {...state, userName: action.payload};\r\n        }\r\n        case SET_SIGNUP_CONFIRM_PASSWORD: {\r\n            return {...state, confirmPassword: action.payload};\r\n        }\r\n        case SET_SIGNUP_MESSAGE:{\r\n            return {...state, message: action.payload}\r\n        }\r\n        case SET_SIGNUP_UPLOAD_FILE_NAME:{\r\n            return {...state, fileName: action.payload}\r\n        }\r\n        case SIGNUP_REQUEST: {\r\n            return {...state, status: 'processing'};\r\n        }\r\n        case SIGNUP_SUCCESS: {\r\n            return {...state, status: 'success', successDialog: true, message: '', fileName: ''};\r\n        }\r\n        case SET_SUCCESS_DIALOG: {\r\n            return {...state, successDialog: action.payload, message: '', fileName: ''}\r\n        }\r\n        case SIGNUP_FAIL: {\r\n            return {\r\n                ...state, \r\n                status: 'error',\r\n                message: action.payload.message,\r\n            };\r\n        }\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default loginReducer;","import {\r\n    CONNECT_WEB_SOCKET,\r\n    CONNECT_WEB_SOCKET_SUCCESS,\r\n    CONNECT_WEB_SOCKET_FAIL,\r\n    DISCONNECT_WEB_SOCKET,\r\n    SET_WEB_SOCKET_IS_LISTENING,\r\n    SET_MESSAGE_BOX,\r\n    SET_MESSAGE_BOX_STYLE,\r\n    SET_IS_MOBILE,\r\n    SET_DRAWER_OPEN,\r\n    SET_USER_LIST,\r\n    SET_CHAT_PEOPLE,\r\n    SET_NEW_MESSAGE_ALARM,\r\n    SET_IMAGE_MODAL\r\n} from '../actionTypes'\r\nimport {chatRoomState} from '../../Interfaces'\r\n\r\nconst initState: chatRoomState = {\r\n    messageBox: [],\r\n    webSocket: null,\r\n    onlineCount: 0,\r\n    connectStatus: '',\r\n    styleMessageBox: true,\r\n    isMobile: false,\r\n    drawerOpen: false,\r\n    userList: {\r\n        userName:{\r\n            userName: '',\r\n            status: '',\r\n            photo: '',\r\n            socketId: '',\r\n        }\r\n    },\r\n    chatPeople: '',\r\n    newMessageCount: {},\r\n    imageModalOpen: false,\r\n    imageEncodeString: '',\r\n    webSocketIsListening: false\r\n}\r\n\r\nconst chatRoomReducer = (state = initState, action: any): chatRoomState => {\r\n    switch(action.type){\r\n        case CONNECT_WEB_SOCKET:{\r\n            return {\r\n                ...state,\r\n                connectStatus: 'connecting'\r\n            }\r\n        }\r\n        case CONNECT_WEB_SOCKET_SUCCESS:{\r\n            return{\r\n                ...state,\r\n                connectStatus: 'connected',\r\n                webSocket: action.payload\r\n            }\r\n        }\r\n        case CONNECT_WEB_SOCKET_FAIL:{\r\n            return{\r\n                ...state,\r\n                connectStatus: 'disconnect',\r\n                webSocket: action.payload\r\n            }\r\n        }\r\n        case DISCONNECT_WEB_SOCKET:{\r\n            return{\r\n                ...state,\r\n                webSocket: null\r\n            }\r\n        }\r\n        case SET_USER_LIST:{\r\n            return{\r\n                ...state,\r\n                userList: action.payload\r\n            }\r\n        }\r\n        case SET_MESSAGE_BOX:{\r\n            return{\r\n                ...state,\r\n                messageBox: state.messageBox.concat(action.payload)\r\n            }\r\n        }\r\n        case SET_MESSAGE_BOX_STYLE:{\r\n            return{\r\n                ...state,\r\n                styleMessageBox: action.payload\r\n            }\r\n        }\r\n        case SET_IS_MOBILE:{\r\n            return{\r\n                ...state,\r\n                isMobile: action.payload\r\n            }\r\n        }\r\n        \r\n        case SET_DRAWER_OPEN:{\r\n            return{\r\n                ...state,\r\n                drawerOpen: action.payload\r\n            }\r\n        }\r\n        case SET_CHAT_PEOPLE:{\r\n            return {\r\n                ...state,\r\n                chatPeople: action.payload\r\n            }\r\n        }\r\n        case SET_NEW_MESSAGE_ALARM:{\r\n            const {userName} = action.payload\r\n            let counter = 0;\r\n            if(action.payload.type === 'reset' || state.chatPeople === userName){\r\n                return{\r\n                    ...state,\r\n                    newMessageCount: {\r\n                        ...state.newMessageCount,\r\n                        [userName]: counter\r\n                    }\r\n                }\r\n            }else{\r\n                Object.entries(state.newMessageCount).forEach(([key, value]) => {\r\n                    if(key === userName && typeof value === 'number'){\r\n                        counter = value;\r\n                    }\r\n                });\r\n                return{\r\n                    ...state,\r\n                    newMessageCount: {\r\n                        ...state.newMessageCount,\r\n                        [userName]: counter + 1\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        case SET_IMAGE_MODAL: {\r\n            return{\r\n                ...state,\r\n                imageModalOpen: action.payload.imageModalOpen,\r\n                imageEncodeString: action.payload.imageEncodeString,\r\n            }\r\n        }\r\n        case SET_WEB_SOCKET_IS_LISTENING: {\r\n            return {\r\n                ...state,\r\n                webSocketIsListening: true\r\n            }\r\n        }\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default chatRoomReducer;","import {\r\n    GET_USER_ACCOUNT_SUCCESS,\r\n    GET_USER_ACCOUNT_FAIL,\r\n    EDIT_USER_INFO_SUCCESS,\r\n    EDIT_USER_INFO_FAIL,\r\n    SET_EDIT_USER_NAME,\r\n    SET_EDIT_FILE_NAME,\r\n    SET_EDIT_MESSAGE,\r\n    SET_EDIT_SUCCESS_DIALOG\r\n} from '../actionTypes'\r\nimport {editState} from '../../Interfaces';\r\n\r\nconst initState: editState = {\r\n    account: '',\r\n    newUserName: '',\r\n    newPhotoFileName: '',\r\n    successDialog: false,\r\n    message: '',\r\n    status: '',\r\n}\r\n\r\nconst editReducer = (state = initState, action: any): editState => {\r\n    switch(action.type){\r\n        case GET_USER_ACCOUNT_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                account: action.payload.account\r\n            }\r\n        }\r\n        case GET_USER_ACCOUNT_FAIL: {\r\n            return {\r\n                ...state,\r\n                status: action.payload.status,\r\n                message: action.payload.message\r\n            }\r\n        }\r\n        case SET_EDIT_USER_NAME: {\r\n            return {\r\n                ...state,\r\n                newUserName: action.payload\r\n            }\r\n        }\r\n        case EDIT_USER_INFO_FAIL: {\r\n            return {\r\n                ...state\r\n            }\r\n        }\r\n        case EDIT_USER_INFO_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                successDialog: true\r\n            }\r\n        }\r\n        case SET_EDIT_FILE_NAME: {\r\n            return {\r\n                ...state,\r\n                newPhotoFileName: action.payload\r\n            }\r\n        }\r\n        case SET_EDIT_MESSAGE: {\r\n            return {\r\n                ...state,\r\n                message: action.payload\r\n            }\r\n        }\r\n        case SET_EDIT_SUCCESS_DIALOG: {\r\n            return {\r\n                ...state,\r\n                successDialog: action.payload\r\n            }\r\n        }\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default editReducer;","import { combineReducers } from 'redux';\r\nimport { connectRouter } from 'connected-react-router';\r\nimport loginReducer from './loginReducer';\r\nimport signupReducer from './signupReducer'\r\nimport chatRoomReducer from './chatRoomReducer';\r\nimport editReducer from './editReducer';\r\n\r\n\r\nconst createRootReducer = (history: any) => combineReducers({\r\n  router: connectRouter(history),\r\n  loginReducer,\r\n  signupReducer,\r\n  chatRoomReducer,\r\n  editReducer\r\n});\r\n\r\nexport default createRootReducer;","const PROD_HOST_NAME: string = 'https://nodejs-express-react-demo.herokuapp.com';\r\nconst DEV_HOST_NAME: string = 'http://localhost:3000';\r\nexport const serverHostName: string = PROD_HOST_NAME;\r\nexport const PROD_ACCESS_CONTROL_ALLOW_ORIGIN: string = 'https://nodejs-express-react-demo.herokuapp.com';\r\nexport const DEV_ACCESS_CONTROL_ALLOW_ORIGIN: string = 'http://localhost:3001';\r\nexport const secretKey: string = \"ThisIsRick\";","import {\r\n    serverHostName,\r\n    DEV_ACCESS_CONTROL_ALLOW_ORIGIN\r\n} from '../config'\r\n\r\nimport {\r\n    getCookie\r\n} from './StorageService';\r\n\r\nimport axios, {AxiosRequestConfig} from 'axios';\r\n\r\naxios.defaults.baseURL = serverHostName;\r\n//axios.defaults.headers.get['Content-Type'] = 'application/json';\r\n//axios.defaults.headers.get['Accept'] = 'application/json';\r\n\r\n//axios.defaults.headers.post['Accept'] = 'application/json';\r\n//axios.defaults.headers.post['Content-Type'] = 'application/json';\r\naxios.defaults.headers['Accept'] = 'application/json';\r\naxios.defaults.headers['Content-Type'] = 'application/json';\r\naxios.defaults.headers.get['Content-Type'] = 'application/json';\r\naxios.defaults.headers.post['Content-Type'] = 'application/json';\r\n\r\n//axios.defaults.headers.Origin = 'http://localhost:3001';\r\n//axios.defaults.headers['Access-Control-Allow-Origin'] = 'http://localhost:3001'; //serverHostName;\r\naxios.defaults.withCredentials = true;\r\naxios.defaults.xsrfCookieName = 'XSRF-TOKEN'; // default\r\naxios.defaults.xsrfHeaderName = 'X-XSRF-TOKEN'; // default\r\n\r\n\r\nexport const axiosGet = (url: string, params: object): object => {\r\n    console.log('url', url, params);\r\n    console.log('hostname', axios.defaults.baseURL);\r\n    let config: AxiosRequestConfig = {\r\n        params: params\r\n    }\r\n    return axios.get(url, config);\r\n}\r\n\r\nexport const axiosPost = (url: string, data: object): object => {\r\n    return axios.post(url, data);\r\n}\r\n\r\nexport const axiosPostFormData = (url: string, data: any): object => {\r\n    console.log('data', data);\r\n    let config: AxiosRequestConfig = {\r\n        headers : {\r\n          'Content-Type' : 'multipart/form-data'\r\n        }\r\n    }\r\n    const formData = new FormData();\r\n    Object.entries(data).forEach(([key, value]: any) => {\r\n        //console.log(key, value);\r\n        formData.append(key, value);\r\n    });\r\n    return axios.post(url, formData, config);\r\n}\r\n\r\nexport const axiosPatchFormData = (url: string, data: any): object => {\r\n    console.log('data', data);\r\n    let config: AxiosRequestConfig = {\r\n        headers : {\r\n          'Content-Type' : 'multipart/form-data'\r\n        }\r\n    }\r\n    const formData = new FormData();\r\n    Object.entries(data).forEach(([key, value]: any) => {\r\n        //console.log(key, value);\r\n        formData.append(key, value);\r\n    });\r\n    return axios.patch(url, formData, config);\r\n}\r\n\r\nexport default axios;\r\n\r\n/*\r\nexport let fetchGet = (webApi: string): object => {\r\n    //console.log(hostName + \"/\" + webApi);\r\n    const requestHeaders: HeadersInit = new Headers();\r\n    requestHeaders.set('Accept', 'application/json');\r\n    requestHeaders.set('Content-Type', 'application/json');\r\n    //requestHeaders.set('Authorization', token||'');\r\n    return fetch(DEV_HOST_NAME + \"/\" + webApi, {\r\n        method: 'GET',\r\n        //dataType: 'jsonp',\r\n        headers: requestHeaders\r\n    }).then(\r\n      (response: any) => {\r\n          return response.json();\r\n      }).then((result) => {\r\n        return result;\r\n      }).catch((error) => {\r\n          console.log(\"fetchGet: \" + webApi, error);\r\n      }\r\n    );   \r\n}\r\n\r\nexport let fetchPost = (webApi: string, data: object) => {\r\n    //console.log(\"web api\", PROD_HOST_NAME + \"/\" + webApi);\r\n    const requestHeaders: any = {\r\n        //'Access-Control-Allow-Origin': DEV_ACCESS_CONTROL_ALLOW_ORIGIN,\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json',\r\n        //'Authorization': token\r\n    };\r\n    //Dev: DEV_HOST_NAME, Prod: PROD_HOST_NAME\r\n    return fetch(DEV_HOST_NAME + \"/\" + webApi,{\r\n        method: 'POST',\r\n        headers: requestHeaders,\r\n        credentials: 'include',\r\n        body: JSON.stringify(data)\r\n    }).then(\r\n      (response) => {\r\n          return response.json();\r\n      }).then((result) => {\r\n        return result;\r\n      }).catch((error) => {\r\n          console.log(\"fetchPost\", error);\r\n      }\r\n    );   \r\n}\r\n*/","import Cookies from 'js-cookie';\r\n\r\nexport const setLocalStorageWithExpiry = (key: string, value: string, ttl: number = 30) => {\r\n\tconst now = new Date()\r\n\t// `item` is an object which contains the original value as well as the time when it's supposed to expire\r\n\tconst item = {\r\n\t\tvalue: value,\r\n\t\texpiry: now.getTime() + (ttl * 1000 * 60 * 60 * 24), //By Day\r\n\t}\r\n\tlocalStorage.setItem(key, JSON.stringify(item));\r\n}\r\n\r\nexport const removeLocalStorage = (key: string) => {\r\n\tlocalStorage.removeItem(key);\r\n}\r\n\r\nexport const getLocalStorageWithExpiry = (key: string) => {\r\n\tconst itemStr = localStorage.getItem(key)\r\n\t// if the item doesn't exist, return null\r\n\tif (!itemStr) {\r\n\t\treturn null\r\n\t}\r\n\tconst item = JSON.parse(itemStr)\r\n\tconst now = new Date();\r\n\t// compare the expiry time of the item with the current time\r\n\tif (now.getTime() > item.expiry) {\r\n\t\t// If the item is expired, delete the item from storage and return null\r\n\t\tlocalStorage.removeItem(key)\r\n\t\treturn null\r\n\t}\r\n\treturn item.value\r\n}\r\n\r\nexport const getCookie = (key: string): string|undefined => {    \r\n    return Cookies.get(key);;\r\n}\r\n\r\nexport const setCookie = (key: string, value: string): void => {\r\n    Cookies.set(key, value /*, { expires: 7 }*/);\r\n}\r\n\r\nexport const delCookie = (key: string): void => {\r\n    Cookies.remove(key);\r\n}","import CryptoJS from 'crypto-js';\r\nimport {secretKey} from '../config';\r\n\r\nexport const encrypt = (plainText: string): string => {\r\n    return CryptoJS.AES.encrypt(plainText, secretKey).toString();\r\n}\r\n\r\nexport const decrypt = (ciphertext: string): string => {\r\n    return CryptoJS.AES.decrypt(ciphertext, secretKey).toString(CryptoJS.enc.Utf8)\r\n}","import webSocketClient from 'socket.io-client'\r\nimport {serverHostName} from '../config';\r\nimport {\r\n    getLocalStorageWithExpiry,\r\n    setLocalStorageWithExpiry\r\n} from './StorageService';\r\n\r\nimport {\r\n    encrypt,\r\n    decrypt\r\n} from './CryptoService'\r\nimport {\r\n    SET_MESSAGE_BOX,\r\n    SET_USER_LIST,\r\n    SET_NEW_MESSAGE_ALARM\r\n} from '../redux/actionTypes';\r\nimport {\r\n    messageInterface, \r\n    userListInterface\r\n} from '../Interfaces'\r\n\r\n\r\nconst getUserName = (): string => {\r\n    return getLocalStorageWithExpiry('userName');\r\n}\r\n\r\nexport const createWebSocket = () => {\r\n    const userName = getUserName();\r\n    return webSocketClient(serverHostName, {query: `userName=${userName}`});\r\n}\r\n\r\nexport const disconnectWebSocket = (webSocket: any): void => {\r\n    const userName = getUserName();\r\n    webSocket.disconnect(serverHostName, {query: `userName=${userName}`});\r\n}\r\n\r\nexport const sendNewMessage = (webSocket: any, messageType: string, \r\n    sourceUser: string, targetUser: string, message: string, timestamp: string) => {\r\n    console.log('before encrypt', sourceUser, targetUser, message);\r\n    console.log('after encrypt', encrypt(message));\r\n    console.log('after decrypt', decrypt(encrypt(message)));\r\n    console.log('socket', sourceUser, targetUser, message);\r\n    const  encryptMessage = encrypt(JSON.stringify(\r\n        {\r\n            sourceUser: sourceUser,\r\n            targetUser: targetUser,\r\n            messageType: messageType,\r\n            message: message,\r\n            timestamp: timestamp\r\n        })\r\n    );\r\n    webSocket.emit('sendMessage', encryptMessage);\r\n}\r\n\r\nexport const listenUserList = (webSocket: any, dispatch: any) => {\r\n    webSocket.on('userList', (userList: userListInterface) => {\r\n        console.log('userList', userList);\r\n        dispatch({\r\n            type: SET_USER_LIST,\r\n            payload: userList\r\n        });\r\n    })\r\n}\r\n\r\nexport const listenNewMessage = (webSocket: any, dispatch: any, isMobile: boolean) => {   \r\n    webSocket.on('newMessage', (userMessage: string) => { \r\n        const decryptMessage: messageInterface = JSON.parse(decrypt(userMessage));  \r\n        setNewMessageAlarm(dispatch, decryptMessage.sourceUser, decryptMessage.targetUser);\r\n        dispatch({\r\n            type: SET_MESSAGE_BOX,\r\n            payload: decryptMessage\r\n        });\r\n        if(!document.hasFocus() && !isMobile){  \r\n            new Notification(decryptMessage.sourceUser, {\r\n                body: decryptMessage.message,\r\n                icon: require('../Image/message.png'),\r\n            }); \r\n        }\r\n    });\r\n}\r\n\r\nconst setNewMessageAlarm = (dispatch: any, sourceUser: string, targetUser: string) => {\r\n    const userName = getUserName();\r\n    if(userName !== sourceUser){\r\n        dispatch({\r\n            type: SET_NEW_MESSAGE_ALARM,\r\n            payload: {\r\n                type: 'append',\r\n                userName: (targetUser === 'Public')? targetUser: sourceUser\r\n            }\r\n        });\r\n    }\r\n}","/* eslint-disable no-constant-condition */\r\nimport { put } from 'redux-saga/effects'\r\nimport { push } from 'connected-react-router'\r\nimport {\r\n  axiosPost\r\n} from '../../Services/ApiService';\r\nimport {\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAIL,\r\n  DISCONNECT_WEB_SOCKET\r\n} from '../actionTypes';\r\nimport {\r\n  setLocalStorageWithExpiry,\r\n  //getLocalStorageWithExpiry,\r\n  removeLocalStorage,\r\n  setCookie\r\n} from '../../Services/StorageService'\r\n\r\nimport {\r\n  disconnectWebSocket\r\n} from '../../Services/WebSocketService';\r\n\r\nexport function* loginRequest(action: any) {\r\n  let {account, password} = action.payload;\r\n  console.log(account, password);\r\n  let result = yield axiosPost(\"login\", {email: account, password: password});\r\n  //console.log(result);\r\n  if(result.data.status === \"fail\"){\r\n    console.log('Fail:', result);\r\n    yield put({ \r\n      type: LOGIN_FAIL,\r\n      payload: {\r\n        message: result.data.message\r\n      }\r\n    })\r\n  }else if(result.data.status === \"success\"){\r\n    console.log('success:', result);\r\n    const {token, userName, uid} = result.data;\r\n    yield setLocalStorageWithExpiry('token', token, 30);\r\n    yield setLocalStorageWithExpiry('userName', userName, 30);\r\n    yield setLocalStorageWithExpiry('uid', uid, 30);\r\n    yield setCookie('XSRF-TOKE', token);\r\n    yield put({ type: LOGIN_SUCCESS });\r\n    yield put(push('/'));\r\n  }\r\n}\r\n\r\nexport function *logout(action: any){\r\n  console.log('logout action', action);\r\n  const webSocket = action.payload;\r\n  yield removeLocalStorage('userName');\r\n  yield removeLocalStorage('token');\r\n  yield disconnectWebSocket(webSocket);\r\n  yield put({type: DISCONNECT_WEB_SOCKET});\r\n  yield put(push('/login'));\r\n}\r\n","/* eslint-disable no-constant-condition */\r\nimport { put } from 'redux-saga/effects';\r\nimport {\r\n    CONNECT_WEB_SOCKET_SUCCESS,\r\n    CONNECT_WEB_SOCKET_FAIL\r\n} from '../actionTypes';\r\nimport {\r\n    createWebSocket\r\n} from '../../Services/WebSocketService'\r\n\r\nexport function *connectWebSocket(action: any) {\r\n    //console.log('connectWebSocket', action);\r\n    let webSocket = yield createWebSocket(); //webSocketClient(DEV_HOST_NAME, {query: `userName=${userName}`}); //webSocketClient('http://localhost:3000');\r\n    if(webSocket){\r\n        yield put({\r\n            type: CONNECT_WEB_SOCKET_SUCCESS,\r\n            payload: webSocket\r\n        });\r\n    }else{\r\n        yield put({\r\n            type: CONNECT_WEB_SOCKET_FAIL\r\n        })\r\n    }\r\n}\r\n","/* eslint-disable no-constant-condition */\r\nimport { put } from 'redux-saga/effects'\r\nimport { push } from 'connected-react-router'\r\nimport {\r\n  axiosPost,\r\n  axiosPostFormData\r\n} from '../../Services/ApiService';\r\nimport {\r\n  SIGNUP_SUCCESS,\r\n  SIGNUP_FAIL,\r\n} from '../actionTypes';\r\n\r\n\r\nexport function* signupRequest(action: any) {\r\n  console.log('action.payload', action.payload);\r\n  const {account, password, userName, photo} = action.payload;  \r\n  const result = yield axiosPostFormData(\r\n    \"signup\", \r\n    {\r\n      email: account, \r\n      password: password, \r\n      userName: userName, \r\n      photo: photo\r\n    }\r\n  );\r\n  const {status, message} = result.data;\r\n  console.log('result', result);\r\n  if(status === \"error\"){\r\n    console.log('Fail:', result);\r\n    yield put({ \r\n      type: SIGNUP_FAIL,\r\n      payload: {\r\n        message: message\r\n      }\r\n    })\r\n  }else if(status === \"success\"){\r\n    console.log('Signup success');\r\n    yield put({ type: SIGNUP_SUCCESS });\r\n  }\r\n}","/* eslint-disable no-constant-condition */\r\nimport { put } from 'redux-saga/effects'\r\nimport { push } from 'connected-react-router'\r\nimport {\r\n  axiosPost,\r\n  axiosPostFormData,\r\n  axiosPatchFormData,\r\n  axiosGet,\r\n} from '../../Services/ApiService';\r\nimport {\r\n  EDIT_USER_INFO_SUCCESS,\r\n  EDIT_USER_INFO_FAIL,\r\n  GET_USER_ACCOUNT_SUCCESS,\r\n  GET_USER_ACCOUNT_FAIL\r\n} from '../actionTypes';\r\nimport {\r\n  setLocalStorageWithExpiry\r\n} from '../../Services/StorageService'\r\n\r\nexport function* getUserInfoRequest(action: any){\r\n  try{\r\n    const result = yield axiosGet('edit/getUserAccount', {uid: action.payload.uid});\r\n    console.log('result', result);\r\n    if(result.data.status === 'success'){\r\n      yield put({\r\n        type: GET_USER_ACCOUNT_SUCCESS,\r\n        payload: {\r\n          account: result.data.account\r\n        }\r\n      })\r\n    }else{\r\n      yield put({\r\n        type: GET_USER_ACCOUNT_FAIL,\r\n        payload:{\r\n          status: result.data.status,\r\n          message: result.data.message\r\n        }\r\n      });\r\n    }\r\n  }catch(err){\r\n    console.log('error occurs')\r\n    yield put({\r\n      type: GET_USER_ACCOUNT_FAIL,\r\n      payload:{\r\n        status: 'error',\r\n        message: 'Error occurs when geting user account'\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport function* editUserInfoRequest(action: any){\r\n  console.log('action.payload', action.payload);\r\n  const {uid, userName, photo} = action.payload;  \r\n  \r\n    console.log('sending request');\r\n    const result = yield axiosPatchFormData(\r\n      \"edit\", \r\n      {\r\n        uid: uid, \r\n        userName: userName, \r\n        photo: photo\r\n      }\r\n    );\r\n    if(result.data.status === 'success'){\r\n      yield setLocalStorageWithExpiry('userName', userName, 1);\r\n      yield put({\r\n        type: EDIT_USER_INFO_SUCCESS,\r\n        payload: {\r\n          status: result.data.status\r\n        }\r\n      })\r\n    }else{\r\n      yield put({\r\n        type: EDIT_USER_INFO_FAIL,\r\n        payload: {\r\n          message: result.data.message,\r\n          account: result.data.status\r\n        }\r\n      })\r\n    }\r\n    console.log('result', result);\r\n  \r\n}\r\n","/* eslint-disable no-constant-condition */\r\n\r\nimport { put, takeEvery } from 'redux-saga/effects'\r\nimport {\r\n  LOGIN_REQUEST,\r\n  SIGNUP_REQUEST,\r\n  CONNECT_WEB_SOCKET,\r\n  LOGOUT,\r\n  GET_USER_ACCOUNT_REQUEST,\r\n  EDIT_USER_INFO_REQUEST\r\n} from '../actionTypes'\r\nimport {\r\n    loginRequest,\r\n    logout,\r\n} from './loginSaga';\r\nimport {connectWebSocket} from './chatRoomSaga';\r\nimport { signupRequest } from './signupSaga';\r\nimport {\r\n  getUserInfoRequest,\r\n  editUserInfoRequest\r\n} from './editSaga';\r\n\r\nexport default function* rootSaga() {\r\n  yield takeEvery(LOGIN_REQUEST, loginRequest);\r\n  yield takeEvery(SIGNUP_REQUEST, signupRequest);\r\n  yield takeEvery(LOGOUT, logout);\r\n  yield takeEvery(CONNECT_WEB_SOCKET, connectWebSocket);\r\n  yield takeEvery(GET_USER_ACCOUNT_REQUEST, getUserInfoRequest);\r\n  yield takeEvery(EDIT_USER_INFO_REQUEST, editUserInfoRequest);\r\n}\r\n","import { createBrowserHistory } from 'history';\r\nimport { applyMiddleware, compose, createStore } from 'redux';\r\nimport { routerMiddleware } from 'connected-react-router';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport createRootReducer from './reducers/rootReducer';\r\nimport rootSaga from './sagas/saga';\r\n\r\nexport const history = createBrowserHistory()\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nexport default function configureStore(preloadedState: object) {\r\n  const store = createStore(\r\n    createRootReducer(history), // root reducer with router state\r\n    preloadedState,\r\n    compose(\r\n      applyMiddleware(\r\n        routerMiddleware(history), // for dispatching history actions\r\n        sagaMiddleware\r\n      ),\r\n    ),\r\n  )\r\n  sagaMiddleware.run(rootSaga);\r\n  return store\r\n}","import React, {useEffect} from \"react\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Card, {\r\n    CardPrimaryContent,\r\n    CardMedia,\r\n    CardActions,\r\n    CardActionButtons,\r\n} from \"@material/react-card\";\r\nimport Button from '@material/react-button';\r\nimport TextField, {Input} from '@material/react-text-field';\r\nimport MaterialIcon from '@material/react-material-icon';\r\nimport { push } from 'connected-react-router'\r\nimport {\r\n    SET_LOGIN_ACCOUNT,\r\n    SET_LOGIN_PASSWORD,\r\n    LOGIN_REQUEST\r\n} from '../../redux/actionTypes';\r\nimport {getLocalStorageWithExpiry} from '../../Services/StorageService';\r\nimport {\r\n    stateInterface,\r\n    keyInterface\r\n} from '../../Interfaces';\r\n\r\n\r\nconst Login = () => {\r\n    const dispatch = useDispatch();\r\n    const {account, password, status, message} = useSelector((state: stateInterface) => state.loginReducer);\r\n    const token = getLocalStorageWithExpiry('token')\r\n\r\n    let setAccountPassword = (e: any): void => {\r\n        const {id, value} = e.currentTarget;\r\n        switch(id){\r\n            case \"account\":\r\n                dispatch({\r\n                    type: SET_LOGIN_ACCOUNT,\r\n                    payload: value,\r\n                });\r\n                break;\r\n            case \"password\":\r\n                dispatch({\r\n                    type: SET_LOGIN_PASSWORD,\r\n                    payload: value,\r\n                });\r\n                break;\r\n        }\r\n    }\r\n    \r\n    let loginHandler = (): void => {\r\n        dispatch({\r\n            type: LOGIN_REQUEST,\r\n            payload: {\r\n                account: account,\r\n                password: password\r\n            }   \r\n        })\r\n    }\r\n    \r\n    ///Check if is logined\r\n    useEffect((): void => {\r\n        if(token){\r\n            dispatch(push('/'));\r\n        }\r\n    }, [token]);\r\n\r\n    const enterClick = (key: keyInterface): void => {\r\n        if(key.key === 'Enter'){\r\n            loginHandler();\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('keypress', enterClick);\r\n        return () => {\r\n            document.removeEventListener('keypress', enterClick);\r\n        }\r\n    }, [account, password]);\r\n\r\n    return(\r\n        <div id='signLoginContainer'>\r\n            <Card id=\"signLoginCard\">\r\n                <CardPrimaryContent className=\"tittle\">\r\n                    <MaterialIcon role=\"button\" icon=\"person\" />\r\n                    <a>Login</a>\r\n                </CardPrimaryContent>\r\n                <hr className='separate_line'/>\r\n                <CardMedia id=\"login_logo\" square imageUrl={require('../../Image/chat.png')} />   \r\n                <CardActions>\r\n                    <CardActionButtons className='signup_login_info'>\r\n                        <TextField\r\n                            label='Email'\r\n                            className=\"textField\" \r\n                            //helperText={<HelperText>Help Me!</HelperText>}\r\n                            onTrailingIconSelect={(): void => {\r\n                                dispatch({\r\n                                    type: SET_LOGIN_ACCOUNT,\r\n                                    payload: ''\r\n                                })\r\n                            }}\r\n                            trailingIcon={<MaterialIcon role=\"button\" icon=\"delete\"/>}\r\n                        >\r\n                            <Input\r\n                                id=\"account\"\r\n                                data-testid='email'\r\n                                type=\"email\"\r\n                                value={account}\r\n                                onChange={setAccountPassword} \r\n                            />\r\n                        </TextField>\r\n                        <TextField\r\n                            label='Password'\r\n                            className=\"textField\"  \r\n                            //helperText={<HelperText>Help Me!</HelperText>}\r\n                            onTrailingIconSelect={ (): void => {\r\n                                dispatch({\r\n                                    type: SET_LOGIN_PASSWORD,\r\n                                    payload: ''\r\n                                })\r\n                            }}\r\n                            trailingIcon={<MaterialIcon role=\"button\" icon=\"delete\"/>}\r\n                        >\r\n                            <Input\r\n                                id=\"password\"\r\n                                type=\"password\"\r\n                                data-testid='password'\r\n                                value={password}\r\n                                onChange={setAccountPassword} \r\n                            />\r\n                        </TextField>\r\n                        <div>\r\n                            <Button \r\n                                className=\"signup_login_btn\"\r\n                                data-testid='login'\r\n                                outlined={true} \r\n                                raised={true} \r\n                                icon={<MaterialIcon role=\"button\" icon=\"login\" />}\r\n                                onClick={loginHandler}\r\n                            >Login\r\n                            </Button>\r\n                            <Button \r\n                                className=\"signup_login_btn\"\r\n                                outlined={true}\r\n                                data-testid='signup'\r\n                                raised={true} \r\n                                icon={<MaterialIcon role=\"button\" icon=\"account_box\" />}\r\n                                onClick={() => {\r\n                                    dispatch(push('signup'));\r\n                                }}\r\n                            >Signup\r\n                            </Button>\r\n                        </div>\r\n                    </CardActionButtons>\r\n                </CardActions>\r\n                {(status === \"error\")?(\r\n                    <div className='warnMsg'>\r\n                        <p>{message}</p>\r\n                    </div>\r\n                ): []}\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;","import React from 'react';\r\nimport MaterialIcon from '@material/react-material-icon';\r\nimport {messageInterface} from '../../../Interfaces';\r\n\r\nconst MessageBoxUserInfo = (userMessage: messageInterface) => {\r\n    return(\r\n        <div className='message-box-userInfo'>\r\n            <MaterialIcon role=\"button\" icon=\"account_circle\" className=\"account_icon\"/>\r\n            <span data-testid=\"userNname-timestamp\">\r\n                {userMessage.sourceUser}({userMessage.timestamp})\r\n            </span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MessageBoxUserInfo;","import React from 'react';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport { getLocalStorageWithExpiry } from '../../../Services/StorageService';\r\nimport {\r\n    SET_IMAGE_MODAL\r\n} from '../../../redux/actionTypes'\r\nimport {\r\n    messageInterface,\r\n    stateInterface\r\n} from '../../../Interfaces';\r\n\r\nconst MessageBoxText = (userMessage: messageInterface) => {\r\n    const styleMessageBox = useSelector((state: stateInterface) => state.chatRoomReducer.styleMessageBox);\r\n    const dispatch = useDispatch();\r\n    const userName = getLocalStorageWithExpiry('userName');\r\n\r\n    const openImageMadal = (): void => {\r\n        dispatch({\r\n            type: SET_IMAGE_MODAL,\r\n            payload:{\r\n                imageModalOpen: true,\r\n                imageEncodeString: userMessage.message\r\n            }\r\n        })\r\n    }\r\n    \r\n    const getMessage = () => {\r\n        switch(userMessage.messageType){\r\n            case 'string':{\r\n                return userMessage.message\r\n            }\r\n            case 'image':{\r\n                return <img src={userMessage.message} className='message-image' onClick={openImageMadal} />\r\n            }\r\n        }   \r\n    }\r\n    //console.log('userMessage', userMessage);\r\n    return(\r\n        <div data-testid='message-box-text' className={(styleMessageBox)?((userName === userMessage.sourceUser)? \"style-message-text-mine\": \"style-message-text-other\"): 'message-text'}>\r\n            {   \r\n                getMessage()\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MessageBoxText;","import React from 'react';\r\nimport { getLocalStorageWithExpiry } from '../../../Services/StorageService';\r\nimport MessageBoxUserInfo from './MessageBoxUserInfo';\r\nimport MessageBoxText from './MessageBoxText';\r\nimport {messageInterface} from '../../../Interfaces';\r\n\r\nconst MessageBox = React.memo((userMessage: messageInterface) => {\r\n    const userName = getLocalStorageWithExpiry('userName');\r\n    return(\r\n        <div\r\n            data-testid='message-box' \r\n            className={(userName === userMessage.sourceUser)? \"message-box-mine\": \"message-box-other\"}>\r\n            <MessageBoxUserInfo {...userMessage} />\r\n            <MessageBoxText {...userMessage} />\r\n        </div>\r\n    );\r\n}, (prevProps: messageInterface, nextProps: messageInterface): boolean => {\r\n    return (prevProps.sourceUser === nextProps.sourceUser && prevProps.timestamp === nextProps.timestamp);\r\n});\r\n\r\nexport default MessageBox","import React, {useEffect, useRef} from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport MessageBox from './MessageBox';\r\nimport {getLocalStorageWithExpiry} from '../../../Services/StorageService';\r\nimport {\r\n    messageInterface,\r\n    stateInterface\r\n} from '../../../Interfaces'; \r\n\r\nconst MessagePanel = () => {\r\n    const userName = getLocalStorageWithExpiry('userName');\r\n    const messageBox = useSelector((state: stateInterface) => state.chatRoomReducer.messageBox);\r\n    const styleMessageBox = useSelector((state: stateInterface) => state.chatRoomReducer.styleMessageBox);\r\n    const chatPeople = useSelector((state: stateInterface) => state.chatRoomReducer.chatPeople);\r\n    const messagePanelRef = useRef<HTMLDivElement>(null);\r\n    const anchorRef = useRef<HTMLDivElement>(null);\r\n    const backgroundStyleCss: {style: string, nonStyle: string} = {\r\n        style: 'style-messagePanel-background', \r\n        nonStyle: 'non-style-messagePanel-background'\r\n    };\r\n\r\n    useEffect(() => {\r\n        if(messageBox && messagePanelRef.current){\r\n            if(messagePanelRef.current.offsetHeight < messagePanelRef.current.scrollHeight\r\n                && messagePanelRef.current.scrollTop + messagePanelRef.current.offsetHeight + 200\r\n                > messagePanelRef.current.scrollHeight){\r\n                    messagePanelRef.current.scrollTo({\r\n                        behavior: \"smooth\", \r\n                        top: messagePanelRef.current?.scrollHeight - messagePanelRef.current.offsetHeight\r\n                    });\r\n                }\r\n        }\r\n    }, [messageBox]); \r\n    \r\n\r\n    return(\r\n        <div className={(styleMessageBox)? backgroundStyleCss.style: backgroundStyleCss.nonStyle}>\r\n            <div id=\"messagePanel\" ref={messagePanelRef}>\r\n                {\r\n                    messageBox.filter((userMessage: messageInterface) => {\r\n                        if(chatPeople === 'Public' && userMessage.targetUser === 'Public'){\r\n                            return userMessage;\r\n                        }else if((chatPeople === userMessage.targetUser && userName === userMessage.sourceUser) ||\r\n                                 (chatPeople === userMessage.sourceUser && userName === userMessage.targetUser)\r\n                                ){\r\n                                    return userMessage;\r\n                                }\r\n                    }).map((userMessage: messageInterface) => (\r\n                        <MessageBox \r\n                            {...userMessage} \r\n                            key={userMessage.sourceUser + userMessage.timestamp}\r\n                        />\r\n                    ))\r\n                }\r\n                <div className='anchor' ref={anchorRef}></div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MessagePanel;","import imageCompression from 'browser-image-compression';\r\n\r\nexport const convertFile = (file: File): Promise<string> => {\r\n    return new Promise((resolve,reject) => {\r\n        let reader = new FileReader()\r\n        // Resolve the Base64 string result\r\n        reader.onload = () => { \r\n            if(typeof reader.result === 'string'){\r\n                resolve(reader.result);\r\n            }\r\n        }\r\n        // Reject if error occurs\r\n        reader.onerror = () => { \r\n            reject(reader.error) \r\n        }\r\n        // Read the file\r\n        reader.readAsDataURL(file);\r\n    })\r\n}\r\n\r\nexport const compressImage = async(file: File): Promise<File> => {\r\n    const options = {\r\n        maxSizeMB: 1,\r\n        maxWidthOrHeight: 1920,\r\n        useWebWorker: true\r\n    }\r\n    //console.log('originalFile instanceof Blob', file instanceof Blob); // true\r\n    //console.log(`originalFile size ${file.size / 1024 / 1024} MB`);\r\n    const compressedFile = await imageCompression(file, options);\r\n    //console.log('compressedFile instanceof Blob', compressedFile instanceof Blob); // true\r\n    //console.log(`compressedFile size ${compressedFile.size / 1024 / 1024} MB`); // smaller than maxSizeMB\r\n    return compressedFile;\r\n}","import React, {useEffect, useState, useRef} from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport TextField, {Input} from '@material/react-text-field';\r\nimport MaterialIcon from '@material/react-material-icon';\r\nimport Button from '@material/react-button';\r\n//import imageCompression from 'browser-image-compression';\r\nimport {convertFile, compressImage} from '../../../Services/CommonService';\r\nimport {getLocalStorageWithExpiry} from '../../../Services/StorageService';\r\nimport {sendNewMessage} from '../../../Services/WebSocketService';\r\nimport {\r\n    stateInterface,\r\n    keyInterface,\r\n    inputEventInterface\r\n} from '../../../Interfaces'; \r\n\r\n\r\n\r\nconst MessageSender = () => {\r\n    const [message, setMessage] = useState('');\r\n    const fileUpload = useRef<HTMLInputElement>(null);\r\n    const  {webSocket, chatPeople} = useSelector((state: stateInterface) => state.chatRoomReducer);\r\n    const userName = getLocalStorageWithExpiry('userName') || '';\r\n    \r\n    const messageHandler = (e: inputEventInterface): void => {\r\n        const {value} = e.currentTarget;\r\n        setMessage(value);\r\n    }\r\n\r\n    const getTimeStamp = (): string => {\r\n        const date: Date = new Date();\r\n        const timestamp: string = date.getFullYear() + '/' + (date.getMonth() + 1) +  '/' + date.getDate() +\r\n            ' ' + new Date().getHours() + ':' + new Date().getMinutes() + \r\n            ':' + new Date().getSeconds() + ':' + new Date().getUTCMilliseconds();\r\n        return timestamp;\r\n    }\r\n\r\n    const sendMessage = (): void => {\r\n        const timestamp: string = getTimeStamp();\r\n        sendNewMessage(webSocket, 'string', userName, chatPeople, message, timestamp);\r\n        setMessage(''); //Clear Textedit\r\n    }\r\n\r\n    const enterClick = (key: keyInterface): void => {\r\n        if(key.key === 'Enter'){\r\n            sendMessage();\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('keypress', enterClick);\r\n        return () => {\r\n            document.removeEventListener('keypress', enterClick);\r\n        }\r\n    }, [message]);\r\n\r\n\r\n    const fileUploadHandler = async() => {\r\n        if(fileUpload.current?.files !== null && fileUpload.current?.files !== undefined){\r\n            const file = fileUpload.current.files[0];\r\n            //Compress Image at first\r\n            try {\r\n                const compressedFile = await compressImage(file);\r\n                /* Convert Image to base64 decode */\r\n                convertFile(compressedFile).then((fileBase64: string) => {\r\n                const timestamp: string = getTimeStamp();\r\n                sendNewMessage(webSocket, 'image', userName, chatPeople, fileBase64, timestamp);\r\n                }).catch(err => console.log('error', err));\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div id='messageSender'> \r\n            <TextField\r\n                label='你想說什麼'\r\n                id=\"msgTextEdit\"\r\n                data-testid='msgTextEdit'             \r\n                //helperText={<HelperText>Help Me!</HelperText>}\r\n                onTrailingIconSelect={() => {fileUpload.current?.click();}}\r\n                trailingIcon={<MaterialIcon role=\"button\" icon=\"image\"/>}\r\n            >\r\n                <Input\r\n                    data-testid='msgTextEditInput'\r\n                    id=\"msgTextEditInput\" \r\n                    value={message}\r\n                    onChange={messageHandler} \r\n                />\r\n            </TextField>    \r\n            <input type='file' className={'input-element'} ref={fileUpload} accept=\"image/*\" onChange={fileUploadHandler}/> \r\n            <Button \r\n                id=\"txtSendBtn\"\r\n                data-testid='txtSendBtn'\r\n                outlined={true} \r\n                raised={true} \r\n                icon={<MaterialIcon role=\"button\" icon=\"send\" />}\r\n                onClick={sendMessage}\r\n            >Send\r\n            </Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MessageSender;","import React, { useEffect, useRef } from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {\r\n    CONNECT_WEB_SOCKET,\r\n    SET_WEB_SOCKET_IS_LISTENING\r\n} from '../../redux/actionTypes';\r\nimport {\r\n    listenUserList,\r\n    listenNewMessage,\r\n} from '../../Services/WebSocketService'\r\nimport MessagePanel from './Components/MessagePanel';\r\nimport MessageSender from './Components/MessageSender';\r\nimport {stateInterface} from '../../Interfaces';\r\n\r\nconst ChatRoom = () => {  \r\n    const dispatch = useDispatch();\r\n    const webSocket = useSelector((state: stateInterface) => state.chatRoomReducer.webSocket);\r\n    const isMobile = useSelector((state: stateInterface) => state.chatRoomReducer.isMobile);\r\n    const webSocketIsListening = useSelector((state: stateInterface) => state.chatRoomReducer.webSocketIsListening);\r\n    ///Connect web socket\r\n    useEffect(() => {\r\n        if(!webSocket){\r\n            dispatch({type: CONNECT_WEB_SOCKET});\r\n        }else if(!webSocketIsListening){\r\n            listenUserList(webSocket, dispatch);\r\n            listenNewMessage(webSocket, dispatch, isMobile);\r\n            dispatch({type: SET_WEB_SOCKET_IS_LISTENING});\r\n        }\r\n    }, [webSocket]);\r\n\r\n    return (\r\n        <div id='wrap'>\r\n            <main id='mainGrid'>\r\n                <MessagePanel/>\r\n                <MessageSender/>\r\n            </main>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ChatRoom;","import React, {useState} from 'react';\r\nimport {useDispatch} from 'react-redux';\r\nimport List, {ListItem, ListItemGraphic, ListItemText} from '@material/react-list';\r\nimport MaterialIcon from '@material/react-material-icon';\r\nimport {SET_MESSAGE_BOX_STYLE} from '../../../redux/actionTypes';\r\n\r\nconst StyleList = () => {\r\n    const [styleListIndex, setStyleListIndex] = useState(0);\r\n    const dispatch = useDispatch();\r\n\r\n    const setMessageBoxStyle = (index: number): void => {\r\n        setStyleListIndex(index);\r\n        const isMessageBoxStyle = index === 0? true: false;\r\n        dispatch({\r\n            type: SET_MESSAGE_BOX_STYLE,\r\n            payload: isMessageBoxStyle\r\n        })\r\n    }\r\n\r\n    return(\r\n        <List \r\n            singleSelection \r\n            selectedIndex={styleListIndex}\r\n            handleSelect={setMessageBoxStyle}\r\n        >\r\n            <ListItem>\r\n                <ListItemGraphic graphic={<MaterialIcon icon='color_lens'/>} />\r\n                <ListItemText primaryText='Colorful Theme' />\r\n            </ListItem>\r\n            <ListItem>\r\n                <ListItemGraphic graphic={<MaterialIcon icon='format_color_reset'/>} />\r\n                <ListItemText primaryText='Simple Theme' />\r\n            </ListItem>\r\n        </List>\r\n    );\r\n}\r\n\r\nexport default StyleList;","import React from 'react';\r\n\r\ninterface propInterface{\r\n    newMessageCount: number\r\n}\r\n\r\nconst ＭessageAlarm = React.memo((props: propInterface) => {\r\n    const {newMessageCount} = props;\r\n    return(\r\n        <div className='message-alarm'>{newMessageCount}</div>\r\n    )\r\n}, (prevProps: propInterface, nextProps: propInterface): boolean => {\r\n    return (prevProps.newMessageCount === nextProps.newMessageCount);\r\n})\r\nexport default ＭessageAlarm;","import React, {useState, useCallback, useEffect} from 'react';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport List, {ListItem, ListItemGraphic, ListItemText} from '@material/react-list';\r\nimport MaterialIcon from '@material/react-material-icon';\r\nimport {getLocalStorageWithExpiry} from '../../../Services/StorageService';\r\nimport { \r\n    SET_CHAT_PEOPLE,\r\n    SET_NEW_MESSAGE_ALARM\r\n} from '../../../redux/actionTypes';\r\nimport ＭessageAlarm from './ＭessageAlarm';\r\nimport {\r\n    stateInterface,\r\n    userListProps,\r\n    userInfoInterface\r\n} from '../../../Interfaces';\r\nimport {serverHostName} from '../../../config';\r\n\r\nconst UserList = (props: userListProps) => {\r\n    const dispatch = useDispatch();\r\n    const myUserName = getLocalStorageWithExpiry('userName');\r\n    const {userList, newMessageCount} = useSelector((state: stateInterface) => state.chatRoomReducer);\r\n    const {isOnline} = props;\r\n    const [selectedIndex, setSelectedIndex] = useState(-1);\r\n    let users: any = {};\r\n    if(isOnline){\r\n        users = Object.values(userList).filter((user) => user.status === 'online' && user.userName !== myUserName);\r\n        users.splice(0, 0, {userName: 'Public', status: 'online'});\r\n    }else{\r\n        users = Object.values(userList).filter((user) => user.status === 'offline' && user.userName !== myUserName);\r\n    }\r\n\r\n    const changeChatPeople = useCallback((index: number) => {\r\n        if(isOnline){\r\n            setSelectedIndex(index);\r\n            dispatch({\r\n                type: SET_CHAT_PEOPLE,\r\n                payload: users[index].userName\r\n            });\r\n            dispatch({\r\n                type: SET_NEW_MESSAGE_ALARM,\r\n                payload: {\r\n                    type: 'reset',\r\n                    userName: users[index].userName\r\n                }\r\n            })\r\n        }\r\n    }, [users]);\r\n\r\n    useEffect(() => {\r\n        if(isOnline){\r\n            changeChatPeople(0); //Default is public\r\n        }\r\n    }, []);\r\n\r\n    return(\r\n        <List \r\n            singleSelection={isOnline}\r\n            selectedIndex={selectedIndex}\r\n            handleSelect={changeChatPeople}\r\n        >\r\n            {\r\n                users.map((user: userInfoInterface) => {\r\n                    return(\r\n                        <ListItem key={user.userName}>\r\n                            <ListItemGraphic graphic={\r\n                                (user.photo)?\r\n                                    <img src={`${serverHostName}/${user.photo}`} alt=\"userPhoto\" />\r\n                                    :\r\n                                    <MaterialIcon \r\n                                        className='userImage'\r\n                                        icon={(user.userName==='Public')? 'people': 'person'}\r\n                                    />\r\n                                } \r\n                            />\r\n                            <ListItemText primaryText={user.userName} />\r\n                            {(newMessageCount[user.userName] > 0)?\r\n                            <ＭessageAlarm \r\n                                newMessageCount={(newMessageCount[user.userName])? newMessageCount[user.userName]: 0} \r\n                            />: []\r\n                            }\r\n                        </ListItem>\r\n                    )\r\n                })\r\n            }\r\n        </List>\r\n    )\r\n}\r\n\r\nexport default UserList;","import React from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport {getLocalStorageWithExpiry} from '../../../Services/StorageService';\r\nimport MaterialIcon from '@material/react-material-icon';\r\nimport {stateInterface, userInfoInterface} from '../../../Interfaces';\r\nimport {serverHostName} from '../../../config';\r\n\r\n\r\nconst User = () => {\r\n    const userName = getLocalStorageWithExpiry('userName');\r\n    const userList = useSelector((state: stateInterface) => state.chatRoomReducer.userList);\r\n    const userInfo: userInfoInterface = Object.values(userList).filter((user) => user.userName === userName)[0];\r\n    const photo = (userInfo)? userInfo.photo: '';\r\n\r\n    return(\r\n        <div id='drawer-user'>\r\n            {(photo)?\r\n                <img \r\n                    id='drawer-user-photo'\r\n                    src={`${serverHostName}/${photo}`}\r\n                    alt=\"new\"\r\n                />\r\n                :\r\n                <MaterialIcon \r\n                    className='userImage'\r\n                    icon={(userName==='Public')? 'people': 'person'}\r\n                />\r\n            } \r\n            <p id='drawer-user-name'>{userName}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default User","import React, {useEffect, useState} from 'react';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport Drawer, {DrawerContent} from '@material/react-drawer';\r\nimport {SET_DRAWER_OPEN} from '../../redux/actionTypes';\r\nimport StyleList from './Components/StyleList';\r\nimport UserList from './Components/UserList';\r\nimport User from './Components/User';\r\nimport {stateInterface} from '../../Interfaces';\r\n\r\nconst DrawerBar = () => {\r\n    const dispatch = useDispatch();\r\n    const drawerOpen = useSelector((state: stateInterface) => state.chatRoomReducer.drawerOpen);\r\n    const [width, setwidth] = useState(window.innerWidth);\r\n\r\n    const closeDrawer = () => {\r\n        dispatch({\r\n            type: SET_DRAWER_OPEN,\r\n            payload: false\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        const handleResize = () => {\r\n            setwidth(window.innerWidth);\r\n        }\r\n        window.addEventListener('resize', handleResize);\r\n        return () => {\r\n            window.removeEventListener('resize', handleResize);\r\n        }\r\n    });\r\n\r\n    //console.log('widht', window.window.innerWidth);\r\n\r\n    return(\r\n        <Drawer\r\n            modal={width<600}\r\n            open={drawerOpen}\r\n            onClose={closeDrawer}\r\n        >\r\n            <DrawerContent>\r\n                <User />\r\n                <hr style={{borderColor: '#2E86C1', width: '90%'}}/>\r\n                <p className='drawer-title'>Theme</p>\r\n                <StyleList/>\r\n                <hr style={{borderColor: '#2E86C1', width: '90%'}}/>\r\n                <p className='drawer-title'>Online People</p>\r\n                <UserList isOnline={true}/>\r\n                <hr style={{borderColor: '#2E86C1', width: '90%'}}/>\r\n                <p className='drawer-title'>Offline People</p>\r\n                <UserList isOnline={false}/>\r\n            </DrawerContent>\r\n        </Drawer>\r\n    )\r\n}\r\n\r\nexport default DrawerBar;","import React, {useCallback} from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { push } from 'connected-react-router';\r\nimport TopAppBar, {\r\n    TopAppBarIcon,\r\n    TopAppBarRow,\r\n    TopAppBarSection,\r\n    TopAppBarTitle,\r\n  } from '@material/react-top-app-bar';\r\nimport MaterialIcon from '@material/react-material-icon';\r\nimport {\r\n    SET_DRAWER_OPEN,\r\n    LOGOUT\r\n} from '../redux/actionTypes';\r\nimport {stateInterface} from '../Interfaces';\r\n\r\n\r\nconst TopBar = () => {\r\n    const dispatch = useDispatch();\r\n    const {drawerOpen, webSocket, chatPeople, userList} = useSelector((state: stateInterface) => state.chatRoomReducer);\r\n    \r\n    /// Turn on/off drawer\r\n    const showDrawerHandler = () => {\r\n        dispatch({\r\n            type: SET_DRAWER_OPEN,\r\n            payload: !drawerOpen\r\n        })\r\n    }\r\n\r\n    /// Logout handler\r\n    const logoutHandler = (): void => {\r\n        dispatch({\r\n            type: LOGOUT,\r\n            payload: webSocket\r\n        })\r\n    };\r\n\r\n    const getOnlinePeople = useCallback(() => {\r\n        return Object.values(userList).filter((item) => item.status === 'online').length;\r\n    }, [userList]);\r\n\r\n    return(\r\n        <TopAppBar>\r\n            <TopAppBarRow>\r\n                <TopAppBarSection align='start'>\r\n                    <TopAppBarIcon navIcon tabIndex={0}>\r\n                        <MaterialIcon hasRipple icon='menu' onClick={showDrawerHandler}/>\r\n                    </TopAppBarIcon>\r\n                    <TopAppBarTitle tabIndex={1}>\r\n                        Chat Room\r\n                        <MaterialIcon \r\n                            hasRipple \r\n                            icon='chat' \r\n                        />\r\n                    </TopAppBarTitle>\r\n                </TopAppBarSection>\r\n                <TopAppBarSection className='chat-people-section'>\r\n                    <div className='chat-people-block'>\r\n                        <p id='chat-people'> Chat: {chatPeople} </p>\r\n                        <p id='online-people'> ( Online People: {getOnlinePeople()} )</p>\r\n                    </div>\r\n                </TopAppBarSection>\r\n                <TopAppBarSection align='end' role='toolbar'>\r\n                    <TopAppBarIcon actionItem tabIndex={0}>\r\n                        <MaterialIcon \r\n                            aria-label=\"Edit\" \r\n                            hasRipple \r\n                            icon='person'\r\n                            data-tooltip-id=\"tooltip-id\"\r\n                            onClick={() => {dispatch(push('/edit'))}}\r\n                        />\r\n                       \r\n                    </TopAppBarIcon>\r\n                    <TopAppBarIcon actionItem tabIndex={1}>\r\n                        <MaterialIcon \r\n                            aria-label=\"Logout\" \r\n                            hasRipple \r\n                            icon='exit_to_app' \r\n                            onClick={logoutHandler}\r\n                        />\r\n                    </TopAppBarIcon>\r\n                </TopAppBarSection>\r\n            </TopAppBarRow>\r\n        </TopAppBar>\r\n    );\r\n};\r\n\r\nexport default TopBar;","import React, {useCallback} from 'react';\r\nimport {useSelector, useDispatch} from 'react-redux'\r\nimport {stateInterface} from '../../Interfaces';\r\nimport {SET_IMAGE_MODAL} from '../../redux/actionTypes';\r\n\r\nconst Modal = () => {\r\n    const {imageModalOpen, imageEncodeString} = useSelector((state: stateInterface) => state.chatRoomReducer);\r\n    const dispatch = useDispatch();\r\n    const closeModal = useCallback((): void => {\r\n        dispatch({\r\n            type: SET_IMAGE_MODAL,\r\n            payload:{\r\n                imageModalOpen: false,\r\n                imageEncodeString: ''\r\n            }\r\n        })\r\n    }, []);\r\n    return(\r\n        <div id=\"myModal\" className=\"modal\" style={{display: (imageModalOpen)? 'block': 'none'} }>\r\n            <span className=\"close\" style={{color: 'white'}} onClick={closeModal}>&times;</span>\r\n            <img className=\"modal-content\" alt='messageImage' src={imageEncodeString} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Modal;","import React, {useEffect} from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { push } from 'connected-react-router';\r\nimport {TopAppBarFixedAdjust} from '@material/react-top-app-bar';\r\nimport {\r\n    getLocalStorageWithExpiry, \r\n} from '../Services/StorageService';\r\nimport {\r\n    SET_IS_MOBILE\r\n} from '../redux/actionTypes';\r\nimport ChatRoom from './ChatRoom/ChatRoom';\r\nimport DrawerBar from './Drawer/DrawerBar';\r\nimport TopBar from './TopBar';\r\nimport Modal from './Components/Modal'\r\nimport {stateInterface} from '../Interfaces';\r\n\r\nconst Home = () => {\r\n    const dispatch = useDispatch();\r\n    const {isMobile} = useSelector((state: stateInterface) => state.chatRoomReducer);\r\n    const token = getLocalStorageWithExpiry('token');\r\n\r\n    /// Check if is mobile device\r\n    \r\n    useEffect(() => {\r\n        // eslint-disable-next-line\r\n        if(/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(navigator.userAgent) \r\n            // eslint-disable-next-line\r\n            || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(navigator.userAgent.substr(0,4))) { \r\n            dispatch({\r\n                type: SET_IS_MOBILE,\r\n                payload: true\r\n            });\r\n        } \r\n        if(!isMobile){\r\n            if(window.Notification && Notification.permission !== 'granted'){\r\n                Notification.requestPermission((status) => {\r\n                    console.log('status', status);\r\n                });\r\n            }\r\n        }\r\n    }, []);\r\n    \r\n    /// Check if is logined\r\n    useEffect(() => {\r\n        if(!token){\r\n            dispatch(push('/login'));\r\n        }\r\n    }, [token]);\r\n\r\n\r\n    return (\r\n    <>\r\n    {\r\n        (token)?\r\n        <>\r\n            <div className='drawer-container'>\r\n                <TopBar/>\r\n                <TopAppBarFixedAdjust className='top-app-bar-fix-adjust'>\r\n                    <DrawerBar />\r\n                    <ChatRoom />                 \r\n                </TopAppBarFixedAdjust>\r\n                <Modal />\r\n            </div>\r\n        </>\r\n        :[]\r\n    }\r\n    </>\r\n    )\r\n}\r\n\r\nexport default Home;","import React, { useCallback } from 'react';\r\nimport Dialog, {\r\n    DialogTitle,\r\n    DialogContent,\r\n    DialogFooter,\r\n  } from '@material/react-dialog';\r\nimport Button from '@material/react-button';\r\nimport MaterialIcon from '@material/react-material-icon';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { push } from 'connected-react-router';\r\nimport { stateInterface } from '../../../Interfaces';\r\nimport { SET_SUCCESS_DIALOG } from '../../../redux/actionTypes'\r\n\r\nconst SignupDialog = () => {\r\n    const dispatch = useDispatch();\r\n    const {successDialog} = useSelector((state: stateInterface) => state.signupReducer);\r\n\r\n    const returnLoginHandler = useCallback((e: any) => {\r\n        dispatch(push('login'));\r\n        dispatch({\r\n            type: SET_SUCCESS_DIALOG,\r\n            payload: false\r\n        })\r\n    }, [successDialog]);\r\n\r\n    return(\r\n        <Dialog id='signupDialog' open={successDialog}>\r\n            <DialogTitle>Success</DialogTitle>\r\n            <DialogContent>\r\n                <div>Signup successfully</div>\r\n            </DialogContent>\r\n            <DialogFooter>\r\n                <Button \r\n                    className=\"signup_login_btn\"\r\n                    outlined={true} \r\n                    raised={true} \r\n                    icon={<MaterialIcon role=\"button\" icon=\"account_box\" />}\r\n                    onClick={returnLoginHandler}\r\n                >Login\r\n                </Button>\r\n            </DialogFooter>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\nexport default SignupDialog;","import React, {useRef} from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Card, {\r\n    CardPrimaryContent,\r\n    CardActions,\r\n    CardActionButtons,\r\n} from \"@material/react-card\";\r\nimport Button from '@material/react-button';\r\nimport TextField, {Input} from '@material/react-text-field';\r\nimport MaterialIcon from '@material/react-material-icon';\r\nimport { push } from 'connected-react-router';\r\nimport {\r\n    SET_SIGNUP_ACCOUNT,\r\n    SET_SIGNUP_PASSWORD,\r\n    SET_SIGNUP_CONFIRM_PASSWORD,\r\n    SET_SIGNUP_USERNAME,\r\n    SET_SIGNUP_MESSAGE,\r\n    SET_SIGNUP_UPLOAD_FILE_NAME,\r\n    SIGNUP_REQUEST\r\n} from '../../redux/actionTypes';\r\nimport SignupDialog from './Components/SignupDialog';\r\nimport {stateInterface} from '../../Interfaces';\r\nimport {compressImage} from './../../Services/CommonService';\r\n\r\nconst Signup = () => {\r\n    const dispatch = useDispatch();\r\n    const uploadPhotoRef = useRef<HTMLInputElement>(null);\r\n    const photo = useRef<File | null>(null);\r\n    const {account, password, confirmPassword, userName, status, message, fileName} = useSelector((state: stateInterface) => state.signupReducer);\r\n\r\n    const inputHandler = (e: any): void => {\r\n        const {id, value} = e.currentTarget;\r\n        switch(id){\r\n            case \"account\":\r\n                dispatch({\r\n                    type: SET_SIGNUP_ACCOUNT,\r\n                    payload: value,\r\n                });\r\n                break;\r\n            case \"password\":\r\n                dispatch({\r\n                    type: SET_SIGNUP_PASSWORD,\r\n                    payload: value,\r\n                });\r\n                break;\r\n            case \"confirmPassword\":\r\n                dispatch({\r\n                    type: SET_SIGNUP_CONFIRM_PASSWORD,\r\n                    payload: value,\r\n                });\r\n                break;\r\n            case \"userName\":\r\n                dispatch({\r\n                    type: SET_SIGNUP_USERNAME,\r\n                    payload: value,\r\n                });\r\n                break;\r\n        }\r\n    }\r\n\r\n    const signupHandler = (): void => {\r\n        console.log('photo', photo.current);\r\n        console.log('signup', account, password, confirmPassword, userName);\r\n        if(!account || !password || !confirmPassword || !userName){\r\n            dispatch({\r\n                type: SET_SIGNUP_MESSAGE,\r\n                payload: 'Please fill in all information'\r\n            });\r\n            return;\r\n        }\r\n        if(confirmPassword !== password){\r\n            dispatch({\r\n                type: SET_SIGNUP_MESSAGE,\r\n                payload: 'Passwords are not same!'\r\n            });\r\n            return;\r\n        }\r\n        if(account.indexOf('@') <= 0){\r\n            dispatch({\r\n                type: SET_SIGNUP_MESSAGE,\r\n                payload: 'Invalid email!'\r\n            });\r\n            return;\r\n        }\r\n        if(!photo.current){\r\n            dispatch({\r\n                type: SET_SIGNUP_MESSAGE,\r\n                payload: 'Please upload one photo'\r\n            });\r\n            return;\r\n        }\r\n        \r\n        dispatch({\r\n            type: SIGNUP_REQUEST,\r\n            payload: {\r\n                account: account,\r\n                password: password,\r\n                userName: userName,\r\n                photo: photo.current\r\n            }   \r\n        });\r\n    }\r\n\r\n    const photoUploadHandler = async() => {\r\n        if(uploadPhotoRef.current?.files && uploadPhotoRef.current?.files.length > 0){\r\n            photo.current = uploadPhotoRef.current.files[0];\r\n            dispatch({\r\n                type: SET_SIGNUP_UPLOAD_FILE_NAME,\r\n                payload: photo.current.name\r\n            });\r\n        }else {\r\n            photo.current = null;\r\n            dispatch({\r\n                type: SET_SIGNUP_UPLOAD_FILE_NAME,\r\n                payload: ''\r\n            });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <div id='signLoginContainer'>\r\n            <Card id=\"signLoginCard\">\r\n                <CardPrimaryContent className=\"tittle\">\r\n                    <MaterialIcon role=\"button\" icon=\"person\" />\r\n                    <a>Signup+</a>\r\n                </CardPrimaryContent>\r\n                <hr className='separate_line'/>\r\n                <CardActions>\r\n                    <CardActionButtons className='signup_login_info'>\r\n                        <TextField\r\n                            label='Email'\r\n                            className=\"textField\" \r\n                            //helperText={<HelperText>Help Me!</HelperText>}\r\n                            onTrailingIconSelect={(): void => {\r\n                                dispatch({\r\n                                    type: SET_SIGNUP_ACCOUNT,\r\n                                    payload: ''\r\n                                })\r\n                            }}\r\n                            trailingIcon={<MaterialIcon role=\"button\" icon=\"delete\"/>}\r\n                        >\r\n                            <Input\r\n                                id=\"account\"\r\n                                type=\"account\"\r\n                                value={account}\r\n                                onChange={inputHandler} \r\n                            />\r\n                        </TextField>\r\n                        <TextField\r\n                            label='Nick Name'\r\n                            className=\"textField\" \r\n                            //helperText={<HelperText>Help Me!</HelperText>}\r\n                            onTrailingIconSelect={(): void => {\r\n                                dispatch({\r\n                                    type: SET_SIGNUP_USERNAME,\r\n                                    payload: ''\r\n                                })\r\n                            }}\r\n                            trailingIcon={<MaterialIcon role=\"button\" icon=\"delete\"/>}\r\n                        >\r\n                            <Input\r\n                                id=\"userName\"\r\n                                type=\"string\"\r\n                                value={userName}\r\n                                onChange={inputHandler} \r\n                            />\r\n                        </TextField>\r\n                        <TextField\r\n                            label='Password'\r\n                            className=\"textField\"  \r\n                            //helperText={<HelperText>Help Me!</HelperText>}\r\n                            onTrailingIconSelect={ (): void => {\r\n                                dispatch({\r\n                                    type: SET_SIGNUP_PASSWORD,\r\n                                    payload: ''\r\n                                })\r\n                            }}\r\n                            trailingIcon={<MaterialIcon role=\"button\" icon=\"delete\"/>}\r\n                        >\r\n                            <Input\r\n                                id=\"password\"\r\n                                type=\"password\"\r\n                                value={password}\r\n                                onChange={inputHandler} \r\n                            />\r\n                        </TextField>\r\n                        <TextField\r\n                            label='Confirm Password'\r\n                            className=\"textField\"  \r\n                            //helperText={<HelperText>Help Me!</HelperText>}\r\n                            onTrailingIconSelect={ (): void => {\r\n                                dispatch({\r\n                                    type: SET_SIGNUP_CONFIRM_PASSWORD,\r\n                                    payload: ''\r\n                                })\r\n                            }}\r\n                            trailingIcon={<MaterialIcon role=\"button\" icon=\"delete\"/>}\r\n                        >\r\n                            <Input\r\n                                id=\"confirmPassword\"\r\n                                type=\"password\"\r\n                                value={confirmPassword}\r\n                                onChange={inputHandler} \r\n                            />\r\n                        </TextField>\r\n                        <div className='textField'>\r\n                            <div className='upload-image-div' style={{borderBottom: '1px solid darkgray'}}>\r\n                                <Button \r\n                                    className=\"upload-image-btn\"\r\n                                    outlined={true} \r\n                                    raised={true} \r\n                                    icon={<MaterialIcon role=\"button\" icon=\"image\" />}\r\n                                    onClick={() => {uploadPhotoRef.current?.click();}}\r\n                                >Photo\r\n                                </Button>\r\n                                <input \r\n                                    type='file' \r\n                                    className={'input-element'} \r\n                                    ref={uploadPhotoRef} \r\n                                    accept=\"image/*\" \r\n                                    onChange={photoUploadHandler}\r\n                                />\r\n                                <span id='upload-photo-name'>{fileName}</span>\r\n                            </div>\r\n                        </div>\r\n                        <div className='signup_btn_block'>\r\n                            <Button \r\n                                className=\"signup_login_btn\"\r\n                                outlined={true} \r\n                                raised={true} \r\n                                icon={<MaterialIcon role=\"button\" icon=\"person_add\" />}\r\n                                onClick={signupHandler}\r\n                            >Signup\r\n                            </Button>\r\n                            <Button \r\n                                className=\"signup_login_btn\"\r\n                                outlined={true} \r\n                                raised={true} \r\n                                icon={<MaterialIcon role=\"button\" icon=\"keyboard_backspace\" />}\r\n                                onClick={() => {\r\n                                    dispatch(push('login'));\r\n                                }}\r\n                            >login\r\n                            </Button>\r\n                        </div>\r\n                    </CardActionButtons>\r\n                </CardActions>\r\n                {(status === \"error\" || message !== \"\")?(\r\n                    <div className='warnMsg'>\r\n                        <p>{message}</p>\r\n                    </div>\r\n                ): []}\r\n            </Card>\r\n        </div>\r\n        <SignupDialog/>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Signup;","import React, { useCallback } from 'react';\r\nimport Dialog, {\r\n    DialogTitle,\r\n    DialogContent,\r\n    DialogFooter,\r\n  } from '@material/react-dialog';\r\nimport Button from '@material/react-button';\r\nimport MaterialIcon from '@material/react-material-icon';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { push } from 'connected-react-router';\r\nimport { stateInterface } from '../../../Interfaces';\r\nimport { SET_EDIT_SUCCESS_DIALOG } from '../../../redux/actionTypes'\r\n\r\nconst EditDialog = () => {\r\n    const dispatch = useDispatch();\r\n    const successDialog = useSelector((state: stateInterface) => state.editReducer.successDialog);\r\n\r\n    const returnChatRoomHandler = useCallback((e: any) => {\r\n        dispatch(push('/'));\r\n        dispatch({\r\n            type: SET_EDIT_SUCCESS_DIALOG,\r\n            payload: false\r\n        })\r\n    }, [successDialog]);\r\n\r\n    return(\r\n        <Dialog id='signupDialog' open={successDialog}>\r\n            <DialogTitle>Success</DialogTitle>\r\n            <DialogContent>\r\n                <div>Update account information successfully</div>\r\n            </DialogContent>\r\n            <DialogFooter>\r\n                <Button \r\n                    className=\"signup_login_btn\"\r\n                    outlined={true} \r\n                    raised={true} \r\n                    icon={<MaterialIcon role=\"button\" icon=\"account_box\" />}\r\n                    onClick={returnChatRoomHandler}\r\n                >Chatroom\r\n                </Button>\r\n            </DialogFooter>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\nexport default EditDialog;","import React, {useRef, useEffect} from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Card, {\r\n    CardPrimaryContent,\r\n    CardActions,\r\n    CardActionButtons,\r\n} from \"@material/react-card\";\r\nimport Button from '@material/react-button';\r\nimport TextField, {Input} from '@material/react-text-field';\r\nimport MaterialIcon from '@material/react-material-icon';\r\nimport { push } from 'connected-react-router';\r\nimport {\r\n    GET_USER_ACCOUNT_REQUEST,\r\n    SET_EDIT_USER_NAME,\r\n    SET_EDIT_FILE_NAME,\r\n    SET_EDIT_MESSAGE,\r\n    EDIT_USER_INFO_REQUEST\r\n} from '../../redux/actionTypes';\r\nimport {stateInterface} from '../../Interfaces';\r\nimport {getLocalStorageWithExpiry} from '../../Services/StorageService';\r\nimport EditDialog from './Components/EditDialog'\r\n\r\nconst Edit = () => {\r\n    const uid: string = getLocalStorageWithExpiry('uid');\r\n    const uploadPhotoRef = useRef<HTMLInputElement>(null);\r\n    const newPhoto = useRef<File | null>(null);\r\n    const dispatch = useDispatch();\r\n    const {\r\n        account, \r\n        newUserName,\r\n        newPhotoFileName,\r\n        successDialog,\r\n        message,\r\n        status\r\n    }  = useSelector((state: stateInterface) => state.editReducer);\r\n\r\n    useEffect(() => {\r\n        if(!uid){\r\n            dispatch(push('/login'));\r\n        }\r\n        dispatch({\r\n            type: GET_USER_ACCOUNT_REQUEST,\r\n            payload: {\r\n                uid: uid\r\n            }\r\n        })\r\n    }, []);\r\n\r\n    const editUserNameHandler = (e: any): void => {\r\n        const {value} = e.currentTarget;\r\n        dispatch({\r\n            type: SET_EDIT_USER_NAME,\r\n            payload: value,\r\n        });\r\n    }\r\n\r\n    const photoUploadHandler = () => {\r\n        if(uploadPhotoRef.current?.files && uploadPhotoRef.current?.files.length > 0){\r\n            newPhoto.current = uploadPhotoRef.current.files[0];\r\n            dispatch({\r\n                type: SET_EDIT_FILE_NAME,\r\n                payload: newPhoto.current.name\r\n            });\r\n        }else {\r\n            newPhoto.current = null;\r\n            dispatch({\r\n                type: SET_EDIT_FILE_NAME,\r\n                payload: ''\r\n            });\r\n        }\r\n    }\r\n\r\n    const updateHandler = (): void => {        \r\n        if(!newUserName && !newPhoto.current){\r\n            dispatch({\r\n                type: SET_EDIT_MESSAGE,\r\n                payload: 'No information has been update'\r\n            });\r\n            return;\r\n        }\r\n        dispatch({\r\n            type: EDIT_USER_INFO_REQUEST,\r\n            payload: {\r\n                uid: uid,\r\n                userName: newUserName,\r\n                photo: newPhoto.current\r\n            }   \r\n        });\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <div id='signLoginContainer'>\r\n            <Card id=\"signLoginCard\">\r\n                <CardPrimaryContent className=\"tittle\">\r\n                    <MaterialIcon role=\"button\" icon=\"person\" />\r\n                    <span>Information</span>\r\n                </CardPrimaryContent>\r\n                <hr className='separate_line'/>\r\n                <CardActions>\r\n                    <CardActionButtons className='signup_login_info'>\r\n                        <TextField\r\n                            label='Email'\r\n                            className=\"textField\" \r\n                            disabled={true}\r\n                        >\r\n                            <Input\r\n                                id=\"account\"\r\n                                type=\"account\"\r\n                                value={account}\r\n                                disabled={true}\r\n                                //onChange={inputHandler} \r\n                            />\r\n                        </TextField>\r\n                        <TextField\r\n                            label='New Nick Name (Optional)'\r\n                            className=\"textField\" \r\n                            //helperText={<HelperText>Help Me!</HelperText>}\r\n                            onTrailingIconSelect={(): void => {\r\n                                dispatch({\r\n                                    type: SET_EDIT_USER_NAME,\r\n                                    payload: ''\r\n                                })\r\n                            }}\r\n                            trailingIcon={<MaterialIcon role=\"button\" icon=\"delete\"/>}\r\n                        >\r\n                            <Input\r\n                                id=\"newUserName\"\r\n                                type=\"string\"\r\n                                value={newUserName}\r\n                                onChange={editUserNameHandler} \r\n                            />\r\n                        </TextField>\r\n                        <div className='textField'>\r\n                            <div className='upload-image-div' style={{borderBottom: '1px solid darkgray'}}>\r\n                                <Button \r\n                                    className=\"upload-image-btn\"\r\n                                    outlined={true} \r\n                                    raised={true} \r\n                                    icon={<MaterialIcon role=\"button\" icon=\"image\" />}\r\n                                    onClick={() => {uploadPhotoRef.current?.click();}}\r\n                                >Photo\r\n                                </Button>\r\n                                <input \r\n                                    type='file' \r\n                                    className={'input-element'} \r\n                                    ref={uploadPhotoRef} \r\n                                    accept=\"image/*\" \r\n                                    onChange={photoUploadHandler}\r\n                                />\r\n                                <span id='upload-photo-name'>{newPhotoFileName}</span>\r\n                            </div>\r\n                        </div>\r\n                        <div className='signup_btn_block'>\r\n                            <Button \r\n                                className=\"signup_login_btn\"\r\n                                outlined={true} \r\n                                raised={true} \r\n                                icon={<MaterialIcon role=\"button\" icon=\"person_add\" />}\r\n                                onClick={updateHandler}\r\n                            >Update\r\n                            </Button>\r\n                            <Button \r\n                                className=\"signup_login_btn\"\r\n                                outlined={true} \r\n                                raised={true} \r\n                                icon={<MaterialIcon role=\"button\" icon=\"keyboard_backspace\" />}\r\n                                onClick={() => {\r\n                                    dispatch(push('/'));\r\n                                }}\r\n                            >Back\r\n                            </Button>\r\n                        </div>\r\n                    </CardActionButtons>\r\n                </CardActions>\r\n                {(status === \"error\" || message !== \"\")?(\r\n                    <div className='warnMsg'>\r\n                        <p>{message}</p>\r\n                    </div>\r\n                ): []}\r\n            </Card>\r\n        </div>\r\n        <EditDialog/>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Edit;","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport { Route, Switch } from 'react-router'; // react-router v4/v5\r\nimport { ConnectedRouter } from 'connected-react-router';\r\nimport configureStore, { history } from './redux/configureStore';\r\nimport './App.scss';\r\nimport Login from './view/LoginSignup/Login';\r\nimport Home from './view/Home'\r\nimport Signup from './view/LoginSignup/Signup';\r\nimport Edit from './view/LoginSignup/Edit';\r\n\r\n\r\nconst store = configureStore({});\r\n\r\nconst App = () => {\r\n    return (\r\n        <Provider store={store}>\r\n            {/*<Navigator />*/}\r\n            <ConnectedRouter history={history}>      \r\n            <Switch>\r\n                <Route exact path=\"/\">\r\n                    <Home /> \r\n                </Route>\r\n                <Route exact path=\"/login\">\r\n                    <Login />\r\n                </Route>\r\n                <Route exact path=\"/signup\">\r\n                    <Signup />\r\n                </Route>\r\n                <Route exact path=\"/edit\">\r\n                    <Edit />\r\n                </Route>\r\n                <Route exact path=\"*\">\r\n                    <div>\r\n                        <h1>Sorry, No this page</h1>\r\n                    </div>\r\n                </Route>\r\n            </Switch>\r\n            </ConnectedRouter>\r\n        </Provider>\r\n    );\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}