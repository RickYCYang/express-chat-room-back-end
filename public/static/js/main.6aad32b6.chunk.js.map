{"version":3,"sources":["Image/chat.png","Image/message.png","redux/reducers/loginReducer.ts","redux/actionTypes.ts","redux/reducers/chatRoomReducer.ts","redux/reducers/rootReducer.ts","config.js","ApiService.ts","redux/sagas/loginSaga.ts","redux/sagas/chatRoomSaga.ts","redux/sagas/saga.ts","redux/configureStore.ts","view/Login.tsx","view/ChatRoom/Components/MessagePanel.tsx","view/ChatRoom/Components/MessageSender.tsx","view/ChatRoom/ChatRoom.tsx","view/Home.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["module","exports","initState","account","password","status","email","error","userName","loginReducer","state","action","type","payload","token","message","messageBox","webSocket","onlineCount","connectStatus","styleMessageBox","chatRoomReducer","concat","createRootReducer","history","combineReducers","router","connectRouter","PROD_HOST_NAME","getCookie","key","Cookies","get","setCookie","value","set","expires","delCookie","remove","loginRequest","data","fetch","method","headers","credentials","body","JSON","stringify","then","response","json","result","catch","console","log","put","push","connectWebSocket","webSocketClient","rootSaga","takeEvery","createBrowserHistory","sagaMiddleware","createSagaMiddleware","Login","dispatch","useDispatch","useSelector","setAccountPassword","e","currentTarget","id","useEffect","checkLogined","useCallback","undefined","columns","square","imageUrl","require","style","display","label","className","trailingIcon","role","icon","onChange","outlined","raised","onClick","disabled","MessagePanel","messagesEnd","backgroundStyleCss","scrollIntoView","behavior","map","timestamp","float","clear","ref","el","MessageSender","useState","setMessage","enterPress","setEnterPress","sendMessage","Date","getHours","getMinutes","getSeconds","getUTCMilliseconds","emit","enterClick","document","addEventListener","removeEventListener","onTrailingIconSelect","ChatRoom","initWebSocket","on","hasFocus","Notification","Home","window","permission","requestPermission","logoutHandler","align","navIcon","tabIndex","hasRipple","nativeControlId","checked","target","htmlFor","actionItem","aria-label","store","preloadedState","createStore","compose","applyMiddleware","routerMiddleware","run","configureStore","App","exact","path","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6aad32b6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/chat.36cb8b4b.png\";","module.exports = __webpack_public_path__ + \"static/media/message.232a7059.png\";","import {\n    SET_USER_ACCOUNT,\n    SET_USER_PASSWORD,\n    LOGIN_REQUEST,\n    LOGIN_SUCCESS,\n    LOGIN_FAIL\n} from '../actionTypes'\n\nconst initState: object = {\n    account: '',\n    password: '',\n    status: '',\n    email: '',\n    error: '',\n    userName: ''\n}\n\nconst loginReducer = (state: object = initState, action: any) => {\n    switch(action.type){\n        case SET_USER_ACCOUNT: {\n            return {...state, account: action.payload};\n        }\n        case SET_USER_PASSWORD: {\n            return {...state, password: action.payload};\n        }\n        case LOGIN_REQUEST: {\n            return {...state, status: 'loading'};\n        }\n        case LOGIN_SUCCESS: {\n            return {\n                ...state, \n                status: 'logined',\n                email: action.payload.email,\n                token: action.payload.token,\n                userName: action.payload.userName\n            };\n        }\n        case LOGIN_FAIL: {\n            return {\n                ...state, \n                status: 'error',\n                message: action.payload.message,\n            };\n        }\n        default: return state;\n    }\n}\n\nexport default loginReducer;","export const SET_USER_ACCOUNT = 'SET_USER_ACCOUNT';\nexport const SET_USER_PASSWORD = 'SET_USER_PASSWORD';\nexport const LOGIN_REQUEST = 'LOGIN_REQUEST';\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const LOGIN_FAIL = 'LOGIN_FAIL';\n\nexport const CONNECT_WEB_SOCKET = 'CONNECT_WEB_SOCKET';\nexport const CONNECT_WEB_SOCKET_SUCCESS = 'CONNECT_WEB_SOCKET_SUCCESS';\nexport const CONNECT_WEB_SOCKET_FAIL = 'CONNECT_WEB_SOCKET_FAIL';\nexport const SET_MESSAGE_BOX = 'SET_MESSAGE_BOX';\nexport const SET_ONLINE_COUNT = 'SET_ONLINE_COUNT';\nexport const SET_MESSAGE_BOX_STYLE = 'SET_MESSAGE_BOX_STYLE';\n\n","import {\n    CONNECT_WEB_SOCKET,\n    CONNECT_WEB_SOCKET_SUCCESS,\n    CONNECT_WEB_SOCKET_FAIL,\n    SET_ONLINE_COUNT,\n    SET_MESSAGE_BOX,\n    SET_MESSAGE_BOX_STYLE\n} from '../actionTypes'\n\nconst initState = {\n    messageBox: [],\n    webSocket: '',\n    onlineCount: 0,\n    connectStatus: '',\n    styleMessageBox: true\n}\n\nconst chatRoomReducer = (state = initState, action: any) => {\n    switch(action.type){\n        case CONNECT_WEB_SOCKET:{\n            return {\n                ...state,\n                connectStatus: 'connecting'\n            }\n        }\n        case CONNECT_WEB_SOCKET_SUCCESS:{\n            return{\n                ...state,\n                connectStatus: 'connected',\n                webSocket: action.payload\n            }\n        }\n        case CONNECT_WEB_SOCKET_FAIL:{\n            return{\n                ...state,\n                connectStatus: 'disconnect',\n                webSocket: action.payload\n            }\n        }\n        case SET_ONLINE_COUNT:{\n            return{\n                ...state,\n                onlineCount: action.payload\n            }\n        }\n        case SET_MESSAGE_BOX:{\n            return{\n                ...state,\n                messageBox: state.messageBox.concat(action.payload)\n            }\n        }\n        case SET_MESSAGE_BOX_STYLE:{\n            return{\n                ...state,\n                styleMessageBox: action.payload\n            }\n        }\n        default: return state;\n    }\n}\n\nexport default chatRoomReducer;","import { combineReducers } from 'redux';\nimport { connectRouter } from 'connected-react-router';\nimport loginReducer from './loginReducer';\nimport chatRoomReducer from './chatRoomReducer';\n\n\nconst createRootReducer = (history: any) => combineReducers({\n  router: connectRouter(history),\n  loginReducer,\n  chatRoomReducer\n});\n\nexport default createRootReducer;","export const PROD_HOST_NAME = 'https://express-chat-room-back-end.herokuapp.com';\nexport const DEV_HOST_NAME = 'http://localhost:3000';\nexport const PROD_ACCESS_CONTROL_ALLOW_ORIGIN = 'https://express-chat-room-back-end.herokuapp.com';\nexport const DEV_ACCESS_CONTROL_ALLOW_ORIGIN = 'http://localhost:3001';","import Cookies from 'js-cookie';\nimport {\n    PROD_HOST_NAME,\n    DEV_HOST_NAME,\n    DEV_ACCESS_CONTROL_ALLOW_ORIGIN\n} from './config'\n\nconst hostName: string = \"https://express-chat-room-back-end.herokuapp.com\" //\"http://localhost:3000\"\nconst token: string|undefined =  getCookie(\"token\");\n\nexport function getCookie(key: string): string|undefined {    \n    return Cookies.get(key);;\n}\n\nexport let setCookie = (key: string, value: string): void => {\n    Cookies.set(key, value, { expires: 7 });\n}\n\nexport let delCookie = (key: string): void => {\n    Cookies.remove(key);\n}\n\nexport let fetchGet = (webApi: string): object => {\n    //console.log(hostName + \"/\" + webApi);\n    const requestHeaders: HeadersInit = new Headers();\n    requestHeaders.set('Accept', 'application/json');\n    requestHeaders.set('Content-Type', 'application/json');\n    requestHeaders.set('Authorization', token||'');\n    return fetch(DEV_HOST_NAME + \"/\" + webApi, {\n        method: 'GET',\n        //dataType: 'jsonp',\n        headers: requestHeaders\n    }).then(\n      (response: any) => {\n          return response.json();\n      }).then((result) => {\n        return result;\n      }).catch((error) => {\n          console.log(\"fetchGet: \" + webApi, error);\n      }\n    );   \n}\n\nexport let fetchPost = (webApi: string, data: object) => {\n    //console.log(\"web api\", PROD_HOST_NAME + \"/\" + webApi);\n    const requestHeaders: any = {\n        'Access-Control-Allow-Origin': DEV_ACCESS_CONTROL_ALLOW_ORIGIN,\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': token\n    };\n    //Dev: DEV_HOST_NAME, Prod: PROD_HOST_NAME\n    return fetch(PROD_HOST_NAME + \"/\" + webApi,{\n        method: 'POST',\n        headers: requestHeaders,\n        credentials: 'include',\n        body: JSON.stringify(data)\n    }).then(\n      (response) => {\n          return response.json();\n      }).then((result) => {\n        return result;\n      }).catch((error) => {\n          console.log(\"fetchPost\", error);\n      }\n    );   \n}","/* eslint-disable no-constant-condition */\nimport { put } from 'redux-saga/effects'\nimport { push } from 'connected-react-router'\nimport {\n  fetchGet,\n  fetchPost\n} from '../../ApiService';\nimport {\n  LOGIN_SUCCESS,\n  LOGIN_FAIL\n} from '../actionTypes';\n\nimport {\n  setCookie\n} from '../../ApiService'\n\nexport function* loginRequest(action: any) {\n  let {account, password} = action.payload;\n  let result = yield fetchPost(\"login\", {email: account, password: password});\n  if(result.status === \"fail\"){\n    console.log('Fail:', result);\n    yield put({ \n      type: LOGIN_FAIL,\n      payload: {\n        message: result.message\n      }\n    })\n  }else if(result.status === \"success\"){\n    console.log('success:', result);\n    yield put({ \n      type: LOGIN_SUCCESS,\n      payload: {\n        token: result.token,\n        email: result.email,\n        userName: result.userName\n      }\n    });\n    yield setCookie('token', result.token);\n    yield setCookie('userName', result.userName);\n    yield put(push('/'));\n  }\n}\n","/* eslint-disable no-constant-condition */\nimport { put } from 'redux-saga/effects';\n\nimport {\n    CONNECT_WEB_SOCKET_SUCCESS,\n    CONNECT_WEB_SOCKET_FAIL\n\n} from '../actionTypes';\nimport webSocketClient from 'socket.io-client'\nimport {\n    PROD_HOST_NAME,\n    DEV_HOST_NAME\n} from '../../config'\n\n\n\nexport function *connectWebSocket(action: any) {\n    console.log('connectWebSocket', action);\n    //Dev: DEV_HOST_NAME, Prod: PROD_HOST_NAME\n    let webSocket = yield webSocketClient(PROD_HOST_NAME); //webSocketClient('http://localhost:3000');\n    if(webSocket){\n        yield put({\n            type: CONNECT_WEB_SOCKET_SUCCESS,\n            payload: webSocket\n        })\n    }else{\n        yield put({\n            type: CONNECT_WEB_SOCKET_FAIL\n        })\n    }\n}\n","/* eslint-disable no-constant-condition */\n\nimport { put, takeEvery } from 'redux-saga/effects'\nimport {\n  LOGIN_REQUEST,\n  CONNECT_WEB_SOCKET\n} from '../actionTypes'\nimport {\n    loginRequest\n} from './loginSaga';\n\nimport {\n  connectWebSocket\n} from './chatRoomSaga'\n\nexport default function* rootSaga() {\n  yield takeEvery(LOGIN_REQUEST, loginRequest);\n  yield takeEvery(CONNECT_WEB_SOCKET, connectWebSocket);\n}\n","import { createBrowserHistory } from 'history';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { routerMiddleware } from 'connected-react-router';\nimport createSagaMiddleware from 'redux-saga';\nimport createRootReducer from './reducers/rootReducer';\nimport rootSaga from './sagas/saga';\n\nexport const history = createBrowserHistory()\n\nconst sagaMiddleware = createSagaMiddleware();\n\nexport default function configureStore(preloadedState: object) {\n  const store = createStore(\n    createRootReducer(history), // root reducer with router state\n    preloadedState,\n    compose(\n      applyMiddleware(\n        routerMiddleware(history), // for dispatching history actions\n        sagaMiddleware\n      ),\n    ),\n  )\n  sagaMiddleware.run(rootSaga);\n  return store\n}","import React, {useCallback, useEffect} from \"react\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport {Cell, Grid, Row} from '@material/react-layout-grid';\nimport Card, {\n    CardPrimaryContent,\n    CardMedia,\n    CardActions,\n    CardActionButtons,\n} from \"@material/react-card\";\nimport Button from '@material/react-button';\nimport TextField, {Input} from '@material/react-text-field';\nimport MaterialIcon from '@material/react-material-icon';\nimport {\n    getCookie\n} from '../ApiService'; \nimport { push } from 'connected-react-router'\nimport {\n    SET_USER_ACCOUNT,\n    SET_USER_PASSWORD,\n    LOGIN_REQUEST\n} from '../redux/actionTypes';\n\ninterface stateInterface {\n    loginReducer:{\n        account: string,\n        password: string,\n        status: string,\n        message: string\n    }\n}\n\nconst Login = () => {\n    const dispatch = useDispatch();\n    const {account, password, status, message} = useSelector((state: stateInterface) => state.loginReducer);\n    const token =  getCookie('token');\n    \n    let setAccountPassword = (e: any): void => {\n        const {id, value} = e.currentTarget;\n        switch(id){\n            case \"account\":\n                dispatch({\n                    type: SET_USER_ACCOUNT,\n                    payload: value,\n                });\n            case \"password\":\n                dispatch({\n                    type: SET_USER_PASSWORD,\n                    payload: value,\n                });\n        }\n    }\n    \n    let loginHandler = (): void => {\n        dispatch({\n            type: LOGIN_REQUEST,\n            payload: {\n                account: account,\n                password: password\n            }   \n        })\n    }\n    \n    useEffect((): any => {\n        checkLogined();\n    }, [token]);\n\n    const checkLogined = useCallback((): any => {\n        console.log('checkLogined', token !== undefined);\n        if(token) {\n            dispatch(push('/'));\n        }\n    }, [token]);\n\n    return(\n    <Grid>        \n        <Row>    \n            <Cell columns={3} />\n            <Cell columns={6}>\n                <Card id=\"loginCard\">\n                    <CardPrimaryContent id=\"tittle\">\n                        <h1>Rick's Chat Room: Beta</h1>\n                        <CardMedia id=\"logoImg\" square imageUrl={require('../Image/chat.png')} />   \n                    </CardPrimaryContent>\n                    <CardActions style={{display: \"block\"}}>\n                        <CardActionButtons id=\"textFieldArea\">\n                            <TextField\n                                label='Email'\n                                className=\"textField\" \n                                //helperText={<HelperText>Help Me!</HelperText>}\n                                //onTrailingIconSelect={() => setAccount(\"\")}\n                                trailingIcon={<MaterialIcon role=\"button\" icon=\"delete\"/>}\n                            >\n                                <Input\n                                    id=\"account\"\n                                    type=\"email\"\n                                    value={account}\n                                    onChange={setAccountPassword} \n                                />\n                            </TextField>\n                            <TextField\n                                label='Password'\n                                className=\"textField\"  \n                                //helperText={<HelperText>Help Me!</HelperText>}\n                                //onTrailingIconSelect={() => setPassword(\"\")}\n                                trailingIcon={<MaterialIcon role=\"button\" icon=\"delete\"/>}\n                            >\n                                <Input\n                                    id=\"password\"\n                                    type=\"password\"\n                                    value={password}\n                                    onChange={setAccountPassword} \n                                />\n                            </TextField>\n                            <div>\n                                <Button \n                                    className=\"loginBtn\"\n                                    outlined={true} \n                                    raised={true} \n                                    icon={<MaterialIcon role=\"button\" icon=\"login\" />}\n                                    onClick={loginHandler}\n                                >Login\n                                </Button>\n                                <Button \n                                    className=\"loginBtn\"\n                                    outlined={true} \n                                    raised={true} \n                                    disabled={true}\n                                    icon={<MaterialIcon role=\"button\" icon=\"account_box\" />}\n                                    onClick={() => {}}\n                                >Signup\n                                </Button>\n                            </div>\n                        </CardActionButtons>\n                    </CardActions>\n                    {(status === \"error\")?(\n                        <div>\n                            <p className='warnMsg'>{message}</p>\n                        </div>\n                    ): []}\n                </Card>\n            </Cell>\n            <Cell columns={3} />\n        </Row>\n    </Grid>\n    )\n}\n\nexport default Login;","import React, {useState, useEffect} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {Cell, Grid, Row} from '@material/react-layout-grid';\nimport MaterialIcon from '@material/react-material-icon';\nimport { getCookie } from '../../../ApiService';\n//import MessageBoxComponent from './MessageBox';\n\ninterface stateInterface{\n    chatRoomReducer:{\n        messageBox: any,\n        styleMessageBox: boolean\n    }\n}\n\ninterface message{\n    userName: string,\n    timestamp: string,\n    message: string\n}\n\nconst MessagePanel = () => {\n    const {messageBox, styleMessageBox} = useSelector((state: stateInterface) => state.chatRoomReducer);\n    const userName = getCookie('userName');\n    let messagesEnd: any;\n    const backgroundStyleCss: {style: string, nonStyle: string} = {\n        style: 'style-messagePanel-background', \n        nonStyle: 'non-style-messagePanel-background'\n    };\n    useEffect(() => {\n        messagesEnd.scrollIntoView({ behavior: \"smooth\" });\n    }, [messageBox]); \n\n    return(\n        <div className={(styleMessageBox)? backgroundStyleCss.style: backgroundStyleCss.nonStyle}>\n            <div id=\"messagePanel\">\n                {\n                    messageBox.map((message: message) => (\n                        <Row key={\"row\" + message.userName + message.timestamp}>\n                            <Cell columns={12}>\n                                <div className={(userName === message.userName)? \"message-box-mine\": \"message-box-other\"}>\n                                    <MaterialIcon role=\"button\" icon=\"account_circle\" className=\"account_icon\"/>\n                                    <span>{message.userName}({message.timestamp})</span>\n                                    <div className={(styleMessageBox)?((userName === message.userName)? \"style-message-mine\": \"style-message-other\"): 'non-style-message'}>\n                                        {message.message}\n                                    </div>\n                                </div>\n                            </Cell>\n                        </Row>\n                    ))\n                }\n                <div style={{ float:\"left\", clear: \"both\" }}\n                    ref={(el) => { messagesEnd = el; }}>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default MessagePanel;","import React, {useEffect, useState} from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport TextField, {Input} from '@material/react-text-field';\nimport MaterialIcon from '@material/react-material-icon';\nimport Button from '@material/react-button';\nimport {getCookie} from '../../../ApiService';\n\ninterface stateInterface{\n    chatRoomReducer:{\n        webSocket: any,\n        onlineCount: number\n    }\n}\n\ninterface key{\n    key: string\n}\n\nconst MessageSender = () => {\n    const [message, setMessage] = useState('');\n    const  {webSocket} = useSelector((state: stateInterface) => state.chatRoomReducer);\n    const [enterPress, setEnterPress] = useState(false);\n    const userName = getCookie('userName');\n    \n    const messageHandler = (e: any) => {\n        const {value} = e.currentTarget;\n        setMessage(value);\n    }\n\n    useEffect(() => {\n        if(enterPress) {\n            sendMessage();\n            setEnterPress(false);\n        }\n    });\n\n    const sendMessage = () => {\n        const timestamp = new Date().getHours() + ':' + new Date().getMinutes() + \n            ':' + new Date().getSeconds() + ':' + new Date().getUTCMilliseconds();\n        //console.log('sendMessage', message);\n        webSocket.emit('send', {\n            userName: userName,\n            message: message,\n            timestamp: timestamp\n        });\n        setMessage(''); //Clear Textedit\n    }\n\n    const enterClick = (key: key) => {\n        //console.log('key', key);\n        if(key.key === 'Enter'){\n            setEnterPress(true);\n        }\n    }\n\n    useEffect(() => {\n        if(webSocket){\n            document.addEventListener('keypress', enterClick);\n        }\n        return () => {\n            document.removeEventListener('keypress', enterClick)\n        }\n    }, [webSocket])\n\n    return(\n        <div id='messageSender'>\n            <TextField\n                label='你想說什麼'\n                id=\"msgTextEdit\" \n                \n                //helperText={<HelperText>Help Me!</HelperText>}\n                onTrailingIconSelect={() => setMessage(\"\")}\n                trailingIcon={<MaterialIcon role=\"button\" icon=\"delete\"/>}\n            >\n                <Input\n                id=\"msgTextEditInput\" \n                    value={message}\n                    onChange={messageHandler} \n                />\n            </TextField>\n            <div className=\"wrapper-div\">\n                <Button \n                    id=\"msgSendBtn\"\n                    outlined={true} \n                    raised={true} \n                    icon={<MaterialIcon role=\"button\" icon=\"send\" />}\n                    onClick={sendMessage}\n                >Send\n                </Button>\n            </div>\n            \n        </div>\n    );\n}\n\nexport default MessageSender;","import React, { useEffect, useCallback, useState } from 'react';\nimport {connect, useDispatch, useSelector} from 'react-redux';\nimport {Cell, Grid, Row} from '@material/react-layout-grid';\nimport MaterialIcon from '@material/react-material-icon';\n\nimport {\n    CONNECT_WEB_SOCKET,\n    SET_ONLINE_COUNT,\n    SET_MESSAGE_BOX\n} from '../../redux/actionTypes'\n\nimport MessagePanel from './Components/MessagePanel';\nimport MessageSender from './Components/MessageSender';\n\n\ninterface stateInterface {\n    chatRoomReducer:{\n        webSocket: any,\n    }\n}\n\ninterface messageInterface{\n    userName: string,\n    message: string,\n    timestamp: string\n}\n\nconst ChatRoom = () => {  \n    const dispatch = useDispatch();\n    const {webSocket} = useSelector((state: stateInterface) => state.chatRoomReducer);\n\n    useEffect(() => {\n        if(webSocket){\n            initWebSocket();\n        }else{\n            dispatch({\n                type: CONNECT_WEB_SOCKET,\n            });\n        }\n    }, [webSocket]);\n\n    const initWebSocket = () => {\n        console.log('initWebSocket');\n        webSocket.on('online', (onlineCount: number) => {\n            //console.log('onlineCount', onlineCount);\n            dispatch({\n                type: SET_ONLINE_COUNT,\n                payload: onlineCount\n            });\n        });\n\n        webSocket.on('msg', (message: messageInterface) => {\n            //console.log('message', message)\n            dispatch({\n                type: SET_MESSAGE_BOX,\n                payload: message\n            });\n            if(!document.hasFocus()){\n                new Notification(message.userName, {\n                    body: message.message,\n                    icon: require('../../Image/message.png'),\n                });\n            }\n        });\n    }\n\n    return (\n    <Grid id='mainGrid'>\n        <Row>\n            <Cell columns={12}>\n                <MessagePanel/>\n            </Cell>\n        </Row>\n        <Row>\n            <Cell columns={12}>\n                <MessageSender/>\n            </Cell>\n        </Row>\n    </Grid>\n    );\n}\n\nexport default ChatRoom;","import React, {useCallback, useEffect} from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { push } from 'connected-react-router';\nimport TopAppBar, {\n    TopAppBarFixedAdjust, \n    TopAppBarIcon,\n    TopAppBarRow,\n    TopAppBarSection,\n    TopAppBarTitle,\n  } from '@material/react-top-app-bar';\nimport MaterialIcon from '@material/react-material-icon';\nimport Switch from '@material/react-switch';\nimport {getCookie, delCookie} from '../ApiService';\nimport {SET_MESSAGE_BOX_STYLE} from '../redux/actionTypes'\nimport ChatRoom from './ChatRoom/ChatRoom';\n\ninterface stateInterface {\n    chatRoomReducer:{\n        onlineCount: number\n    }\n}\n\nconst Home = () => {\n    const dispatch = useDispatch();\n    //useSelector((state: stateInterface) => {console.log('state', state)});\n    const {onlineCount} = useSelector((state: stateInterface) => state.chatRoomReducer);\n    const token =  getCookie('token');\n    const userName =  getCookie('userName');\n\n    useEffect(() => {\n        if(window.Notification && Notification.permission !== 'granted'){\n            Notification.requestPermission((status) => {\n                console.log('status', status);\n            });\n        }\n    }, [Notification.permission]);\n    \n\n    useEffect(() => {\n        if(!token) dispatch(push('/login'));\n    }, [token]);\n\n\n    const logoutHandler = useCallback((): void => {\n        console.log('logout');\n        delCookie('token');\n        delCookie('userName');\n        dispatch(push('/login'));\n    }, [token]);\n\n\n    // useEffect(() => {\n    //     //localStorage.setItem('myData', '123');\n    //     const data = localStorage.getItem('myData')\n    //     console.log('localStorage', data);\n    // })\n\n    const styleMessageBox = (e: any): void => {\n        dispatch({\n            type: SET_MESSAGE_BOX_STYLE,\n            payload: e.target.checked\n        })\n    }\n    \n    return (\n    <>\n    {(token)?\n    <>\n       <TopAppBar>\n            <TopAppBarRow>\n                <TopAppBarSection align='start'>\n                    <TopAppBarIcon navIcon tabIndex={0}>\n                        <MaterialIcon hasRipple icon='menu' onClick={() => console.log('click')}/>\n                    </TopAppBarIcon>\n                    <TopAppBarTitle tabIndex={1}>\n                        Welcome {userName}, Online People: {onlineCount}\n                    </TopAppBarTitle>\n                </TopAppBarSection>\n                <TopAppBarSection align='start'>\n                    <Switch\n                        nativeControlId='my-switch'\n                        checked={true}\n                        onChange={styleMessageBox} \n                    />\n                    <label htmlFor='my-switch' id=\"mode-switch-label\">Style Message Box</label>\n                </TopAppBarSection>\n                <TopAppBarSection align='end' role='toolbar'>\n                    <TopAppBarIcon actionItem tabIndex={0}>\n                        <MaterialIcon \n                            aria-label=\"print page\" \n                            hasRipple \n                            icon='exit_to_app' \n                            onClick={logoutHandler}\n                        />\n                    </TopAppBarIcon>\n                </TopAppBarSection>\n            </TopAppBarRow>\n        </TopAppBar>\n        <TopAppBarFixedAdjust>\n            <ChatRoom />\n        </TopAppBarFixedAdjust>\n    </>\n    :[]\n    }\n    </>\n    )\n}\n\nexport default Home;","import React, { useState } from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport { Route, Switch } from 'react-router'; // react-router v4/v5\r\nimport { ConnectedRouter } from 'connected-react-router';\r\nimport configureStore, { history } from './redux/configureStore';\r\nimport './App.scss';\r\nimport Login from './view/Login';\r\nimport Home from './view/Home'\r\n\r\n\r\nconst store = configureStore({});\r\n\r\nconst App = () => {\r\n    return (\r\n        <Provider store={store}>\r\n            {/*<Navigator />*/}\r\n            <ConnectedRouter history={history}>      \r\n            <Switch>\r\n                <Route exact path=\"/\">\r\n                    <Home /> \r\n                </Route>\r\n                <Route exact path=\"/login\">\r\n                    <Login />\r\n                </Route>\r\n            </Switch>\r\n            </ConnectedRouter>\r\n        </Provider>\r\n    );\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}