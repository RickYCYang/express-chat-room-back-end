{"version":3,"sources":["Image/message.png","Image/chat.png","redux/reducers/loginReducer.ts","redux/actionTypes.ts","redux/reducers/signupReducer.ts","redux/reducers/chatRoomReducer.ts","redux/reducers/editReducer.ts","redux/reducers/rootReducer.ts","config.ts","Services/ApiService.ts","Services/StorageService.ts","Services/WebSocketService.ts","redux/sagas/loginSaga.ts","redux/sagas/chatRoomSaga.ts","redux/sagas/signupSaga.ts","redux/sagas/editSaga.ts","redux/sagas/saga.ts","redux/configureStore.ts","view/LoginSignup/Login.tsx","view/ChatRoom/Components/MessageBoxUserInfo.tsx","view/ChatRoom/Components/MessageBoxText.tsx","view/ChatRoom/Components/MessageBox.tsx","view/ChatRoom/Components/MessagePanel.tsx","Services/CommonService.ts","view/ChatRoom/Components/MessageSender.tsx","view/ChatRoom/ChatRoom.tsx","view/Drawer/Components/StyleList.tsx","view/Drawer/Components/ＭessageAlarm.tsx","view/Drawer/Components/UserList.tsx","view/Drawer/Components/User.tsx","view/Drawer/DrawerBar.tsx","view/TopBar.tsx","view/Components/Modal.tsx","view/Home.tsx","view/LoginSignup/Components/SignupDialog.tsx","view/LoginSignup/Signup.tsx","view/LoginSignup/Components/EditDialog.tsx","view/LoginSignup/Edit.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["module","exports","initState","account","password","message","status","loginReducer","state","action","type","payload","userName","confirmPassword","fileName","successDialog","messageBox","webSocket","onlineCount","connectStatus","styleMessageBox","isMobile","drawerOpen","userList","photo","socketId","chatPeople","newMessageCount","imageModalOpen","imageEncodeString","webSocketIsListening","chatRoomReducer","concat","counter","Object","entries","forEach","key","value","newUserName","newPhotoFileName","editReducer","createRootReducer","history","combineReducers","router","connectRouter","signupReducer","serverHostName","axios","defaults","baseURL","headers","post","withCredentials","xsrfCookieName","xsrfHeaderName","axiosPostFormData","url","data","console","log","formData","FormData","append","axiosPatchFormData","patch","setLocalStorageWithExpiry","ttl","now","Date","item","expiry","getTime","localStorage","setItem","JSON","stringify","removeLocalStorage","removeItem","getLocalStorageWithExpiry","itemStr","getItem","parse","getUserName","createWebSocket","webSocketClient","query","disconnectWebSocket","disconnect","sendNewMessage","messageType","sourceUser","targetUser","timestamp","emit","setNewMessageAlarm","dispatch","loginRequest","logout","email","result","put","token","uid","Cookies","set","push","connectWebSocket","signupRequest","getUserInfoRequest","editUserInfoRequest","params","get","rootSaga","takeEvery","createBrowserHistory","sagaMiddleware","createSagaMiddleware","Login","useDispatch","useSelector","setAccountPassword","e","currentTarget","id","loginHandler","useEffect","enterClick","document","addEventListener","removeEventListener","className","role","icon","square","imageUrl","require","label","onTrailingIconSelect","trailingIcon","onChange","outlined","raised","onClick","MessageBoxUserInfo","userMessage","MessageBoxText","openImageMadal","src","getMessage","MessageBox","React","memo","prevProps","nextProps","MessagePanel","messagePanelRef","useRef","anchorRef","backgroundStyleCss","current","offsetHeight","scrollHeight","scrollTop","scrollTo","behavior","top","ref","filter","map","convertFile","file","Promise","resolve","reject","reader","FileReader","onload","onerror","error","readAsDataURL","compressImage","a","options","maxSizeMB","maxWidthOrHeight","useWebWorker","imageCompression","compressedFile","MessageSender","useState","setMessage","fileUpload","getTimeStamp","date","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getUTCMilliseconds","sendMessage","fileUploadHandler","files","undefined","then","fileBase64","catch","err","click","accept","ChatRoom","on","listenUserList","hasFocus","Notification","body","listenNewMessage","StyleList","styleListIndex","setStyleListIndex","singleSelection","selectedIndex","handleSelect","index","graphic","primaryText","ＭessageAlarm","props","UserList","myUserName","isOnline","setSelectedIndex","users","values","user","splice","changeChatPeople","useCallback","alt","User","userInfo","DrawerBar","window","innerWidth","width","setwidth","handleResize","modal","open","onClose","style","borderColor","TopBar","getOnlinePeople","length","align","navIcon","tabIndex","hasRipple","actionItem","aria-label","data-tooltip-id","Modal","closeModal","display","color","Home","test","navigator","userAgent","substr","permission","requestPermission","SignupDialog","returnLoginHandler","Signup","uploadPhotoRef","inputHandler","photoUploadHandler","name","borderBottom","indexOf","EditDialog","returnChatRoomHandler","Edit","newPhoto","disabled","store","preloadedState","createStore","compose","applyMiddleware","routerMiddleware","run","configureStore","App","exact","path","Boolean","location","hostname","match","ReactDOM","render","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"qJAAAA,EAAOC,QAAU,IAA0B,qC,0CCA3CD,EAAOC,QAAU,IAA0B,kC,mJCSrCC,EAAwB,CAC1BC,QAAS,GACTC,SAAU,GACVC,QAAS,GACTC,OAAQ,IA4BGC,EAzBM,WAAiD,IAAhDC,EAA+C,uDAAvCN,EAAWO,EAA4B,uCACjE,OAAOA,EAAOC,MACV,ICjByB,oBDkBrB,OAAO,eAAIF,EAAX,CAAkBL,QAASM,EAAOE,UAEtC,ICnB0B,qBDoBtB,OAAO,eAAIH,EAAX,CAAkBJ,SAAUK,EAAOE,UAEvC,ICrBqB,gBDsBjB,OAAO,eAAIH,EAAX,CAAkBF,OAAQ,YAE9B,ICvBqB,gBDwBjB,OAAO,eAAIE,EAAX,CAAkBF,OAAQ,YAE9B,ICzBkB,aD0Bd,OAAO,eACAE,EADP,CAEIF,OAAQ,QACRD,QAASI,EAAOE,QAAQN,UAGhC,QAAS,OAAOG,IEtBlBN,EAAyB,CAC3BC,QAAS,GACTS,SAAU,GACVR,SAAU,GACVS,gBAAiB,GACjBR,QAAS,GACTC,OAAQ,GACRQ,SAAU,GACVC,eAAe,GA2CJR,EAxCM,WAAkD,IAAjDC,EAAgD,uDAAxCN,EAAWO,EAA6B,uCAClE,OAAOA,EAAOC,MACV,IDnB0B,qBCoBtB,OAAO,eAAIF,EAAX,CAAkBL,QAASM,EAAOE,UAEtC,IDpB2B,sBCqBvB,OAAO,eAAIH,EAAX,CAAkBJ,SAAUK,EAAOE,UAEvC,IDxB2B,sBCyBvB,OAAO,eAAIH,EAAX,CAAkBI,SAAUH,EAAOE,UAEvC,IDzBmC,8BC0B/B,OAAO,eAAIH,EAAX,CAAkBK,gBAAiBJ,EAAOE,UAE9C,ID3B0B,qBC4BtB,OAAO,eAAIH,EAAX,CAAkBH,QAASI,EAAOE,UAEtC,ID7BmC,8BC8B/B,OAAO,eAAIH,EAAX,CAAkBM,SAAUL,EAAOE,UAEvC,ID/BsB,iBCgClB,OAAO,eAAIH,EAAX,CAAkBF,OAAQ,eAE9B,IDjCsB,iBCkClB,OAAO,eAAIE,EAAX,CAAkBF,OAAQ,UAAWS,eAAe,EAAMV,QAAS,GAAIS,SAAU,KAErF,IDlC0B,qBCmCtB,OAAO,eAAIN,EAAX,CAAkBO,cAAeN,EAAOE,QAASN,QAAS,GAAIS,SAAU,KAE5E,IDtCmB,cCuCf,OAAO,eACAN,EADP,CAEIF,OAAQ,QACRD,QAASI,EAAOE,QAAQN,UAGhC,QAAS,OAAOG,I,gBC7ClBN,EAA2B,CAC7Bc,WAAY,GACZC,UAAW,KACXC,YAAa,EACbC,cAAe,GACfC,iBAAiB,EACjBC,UAAU,EACVC,YAAY,EACZC,SAAU,CACNX,SAAS,CACLA,SAAU,GACVN,OAAQ,GACRkB,MAAO,GACPC,SAAU,KAGlBC,WAAY,GACZC,gBAAiB,GACjBC,gBAAgB,EAChBC,kBAAmB,GACnBC,sBAAsB,GA+GXC,EA5GS,WAAoD,IAAnDvB,EAAkD,uDAA1CN,EAAWO,EAA+B,uCACvE,OAAOA,EAAOC,MACV,IFR0B,qBEStB,OAAO,eACAF,EADP,CAEIW,cAAe,eAGvB,IFbkC,6BEc9B,sBACOX,EADP,CAEIW,cAAe,YACfF,UAAWR,EAAOE,UAG1B,IFnB+B,0BEoB3B,sBACOH,EADP,CAEIW,cAAe,aACfF,UAAWR,EAAOE,UAG1B,IFxB6B,wBEyBzB,sBACOH,EADP,CAEIS,UAAW,OAGnB,IF5BqB,gBE6BjB,sBACOT,EADP,CAEIe,SAAUd,EAAOE,UAGzB,IFnCuB,kBEoCnB,sBACOH,EADP,CAEIQ,WAAYR,EAAMQ,WAAWgB,OAAOvB,EAAOE,WAGnD,IFvC6B,wBEwCzB,sBACOH,EADP,CAEIY,gBAAiBX,EAAOE,UAGhC,IF5CqB,gBE6CjB,sBACOH,EADP,CAEIa,SAAUZ,EAAOE,UAIzB,IFlDuB,kBEmDnB,sBACOH,EADP,CAEIc,WAAYb,EAAOE,UAG3B,IFvDuB,kBEwDnB,OAAO,eACAH,EADP,CAEIkB,WAAYjB,EAAOE,UAG3B,IF5D6B,wBE4DD,IACjBC,EAAYH,EAAOE,QAAnBC,SACHqB,EAAU,EACd,MAA2B,UAAxBxB,EAAOE,QAAQD,MAAoBF,EAAMkB,aAAed,EACvD,eACOJ,EADP,CAEImB,gBAAgB,eACTnB,EAAMmB,gBADE,eAEVf,EAAWqB,OAIpBC,OAAOC,QAAQ3B,EAAMmB,iBAAiBS,SAAQ,YAAmB,IAAD,mBAAhBC,EAAgB,KAAXC,EAAW,KACzDD,IAAQzB,GAA6B,kBAAV0B,IAC1BL,EAAUK,MAGlB,eACO9B,EADP,CAEImB,gBAAgB,eACTnB,EAAMmB,gBADE,eAEVf,EAAWqB,EAAU,OAKtC,IFrFuB,kBEsFnB,sBACOzB,EADP,CAEIoB,eAAgBnB,EAAOE,QAAQiB,eAC/BC,kBAAmBpB,EAAOE,QAAQkB,oBAG1C,IFrGmC,8BEsG/B,OAAO,eACArB,EADP,CAEIsB,sBAAsB,IAG9B,QAAS,OAAOtB,ICpIlBN,EAAuB,CACzBC,QAAS,GACToC,YAAa,GACbC,iBAAkB,GAClBzB,eAAe,EACfV,QAAS,GACTC,OAAQ,IAyDGmC,EAtDK,WAAgD,IAA/CjC,EAA8C,uDAAtCN,EAAWO,EAA2B,uCAC/D,OAAOA,EAAOC,MACV,IHDgC,2BGE5B,OAAO,eACAF,EADP,CAEIL,QAASM,EAAOE,QAAQR,UAGhC,IHN6B,wBGOzB,OAAO,eACAK,EADP,CAEIF,OAAQG,EAAOE,QAAQL,OACvBD,QAASI,EAAOE,QAAQN,UAGhC,IHZ0B,qBGatB,OAAO,eACAG,EADP,CAEI+B,YAAa9B,EAAOE,UAG5B,IHb2B,sBGcvB,OAAO,eACAH,GAGX,IHnB8B,yBGoB1B,OAAO,eACAA,EADP,CAEIO,eAAe,IAGvB,IH5B0B,qBG6BtB,OAAO,eACAP,EADP,CAEIgC,iBAAkB/B,EAAOE,UAGjC,IHjCwB,mBGkCpB,OAAO,eACAH,EADP,CAEIH,QAASI,EAAOE,UAGxB,IHnC+B,0BGoC3B,OAAO,eACAH,EADP,CAEIO,cAAeN,EAAOE,UAG9B,QAAS,OAAOH,ICvDTkC,EARW,SAACC,GAAD,OAAkBC,YAAgB,CAC1DC,OAAQC,YAAcH,GACtBpC,eACAwC,gBACAhB,kBACAU,iB,+BCXWO,EAFkB,mD,iBCW/BC,IAAMC,SAASC,QAAUH,EACzBC,IAAMC,SAASE,QAAQC,KAAvB,OAAwC,mBACxCJ,IAAMC,SAASE,QAAQC,KAAK,gBAAkB,mBAC9CJ,IAAMC,SAASI,iBAAkB,EACjCL,IAAMC,SAASK,eAAiB,aAChCN,IAAMC,SAASM,eAAiB,eAGzB,IASMC,EAAoB,SAACC,EAAaC,GAC3CC,QAAQC,IAAI,OAAQF,GACpB,IAKMG,EAAW,IAAIC,SAKrB,OAJA7B,OAAOC,QAAQwB,GAAMvB,SAAQ,YAAwB,IAAD,mBAArBC,EAAqB,KAAhBC,EAAgB,KAEhDwB,EAASE,OAAO3B,EAAKC,MAElBW,IAAMI,KAAKK,EAAKI,EAVU,CAC7BV,QAAU,CACR,eAAiB,0BAWda,EAAqB,SAACP,EAAaC,GAC5CC,QAAQC,IAAI,OAAQF,GACpB,IAKMG,EAAW,IAAIC,SAKrB,OAJA7B,OAAOC,QAAQwB,GAAMvB,SAAQ,YAAwB,IAAD,mBAArBC,EAAqB,KAAhBC,EAAgB,KAEhDwB,EAASE,OAAO3B,EAAKC,MAElBW,IAAMiB,MAAMR,EAAKI,EAVS,CAC7BV,QAAU,CACR,eAAiB,0B,GAWZH,EAAf,E,gBCxDakB,EAA4B,SAAC9B,EAAaC,GAAqC,IAAtB8B,EAAqB,uDAAP,GAC7EC,EAAM,IAAIC,KAEVC,EAAO,CACZjC,MAAOA,EACPkC,OAAQH,EAAII,UAAmB,IAANL,EAAa,GAAK,GAAK,IAEjDM,aAAaC,QAAQtC,EAAKuC,KAAKC,UAAUN,KAG7BO,EAAqB,SAACzC,GAClCqC,aAAaK,WAAW1C,IAGZ2C,EAA4B,SAAC3C,GACzC,IAAM4C,EAAUP,aAAaQ,QAAQ7C,GAErC,IAAK4C,EACJ,OAAO,KAER,IAAMV,EAAOK,KAAKO,MAAMF,GAGxB,OAFY,IAAIX,MAERG,UAAYF,EAAKC,QAExBE,aAAaK,WAAW1C,GACjB,MAEDkC,EAAKjC,O,iBCbP8C,EAAc,WAChB,OAAOJ,EAA0B,aAGxBK,EAAkB,WAC3B,IAAMzE,EAAWwE,IACjB,OAAOE,IAAgBtC,EAAgB,CAACuC,MAAM,YAAD,OAAc3E,MAGlD4E,EAAsB,SAACvE,GAChC,IAAML,EAAWwE,IACjBnE,EAAUwE,WAAWzC,EAAgB,CAACuC,MAAM,YAAD,OAAc3E,MAGhD8E,EAAiB,SAACzE,EAAgB0E,EAAqBC,EAAoBC,EAAoBxF,EACxGyF,GAEA7E,EAAU8E,KAAK,cAAe,CAC1BH,WAAYA,EACZC,WAAYA,EACZF,YAAaA,EACbtF,QAASA,EACTyF,UAAWA,KA8BbE,EAAqB,SAACC,EAAeL,EAAoBC,GAC1CT,MACDQ,GACZK,EAAS,CACLvF,KR5ByB,wBQ6BzBC,QAAS,CACLD,KAAM,SACNE,SAA0B,WAAfiF,EAA0BA,EAAYD,M,WCtDhDM,G,WAyBAC,GAzBV,SAAUD,EAAazF,GAAvB,qFAGQ,OAHR,EACqBA,EAAOE,QAA5BR,EADA,EACAA,QAASC,EADT,EACSA,SACdwD,QAAQC,IAAI1D,EAASC,GAFhB,SHEmBsD,EGCK,QHDQC,EGCC,CAACyC,MAAOjG,EAASC,SAAUA,GHAxD6C,IAAMI,KAAKK,EAAKC,GGHpB,UAKqB,UAFtB0C,EAHC,QAKK1C,KAAKrD,OALV,iBAOH,OADAsD,QAAQC,IAAI,QAASwC,GANlB,SAOGC,YAAI,CACR5F,KTzBoB,aS0BpBC,QAAS,CACPN,QAASgG,EAAO1C,KAAKtD,WAVtB,kCAa2B,YAAvBgG,EAAO1C,KAAKrD,OAbhB,iBAgBH,OAFAsD,QAAQC,IAAI,WAAYwC,GAdrB,EAe4BA,EAAO1C,KAA/B4C,EAfJ,EAeIA,MAAO3F,EAfX,EAeWA,SAAU4F,EAfrB,EAeqBA,IAfrB,UAgBGrC,EAA0B,QAASoC,EAAO,GAhB7C,QAiBH,OAjBG,UAiBGpC,EAA0B,WAAYvD,EAAU,GAjBnD,QAkBH,OAlBG,UAkBGuD,EAA0B,MAAOqC,EAAK,GAlBzC,QAmBH,OAnBG,UFemBnE,EEIN,YFJmBC,EEINiE,OFH7BE,IAAQC,IAAIrE,EAAKC,GEhBd,QAoBH,OApBG,UAoBGgE,YAAI,CAAE5F,KTtCa,kBSkBtB,QAqBH,OArBG,UAqBG4F,YAAIK,YAAK,MArBZ,kCFekB,IAACtE,EAAaC,EDbboB,EAAaC,IGFhC,GAyBA,SAAUwC,EAAO1F,GAAjB,uEAGL,OAFAmD,QAAQC,IAAI,gBAAiBpD,GACvBQ,EAAYR,EAAOE,QAFpB,SAGCmE,EAAmB,YAHpB,OAIL,OAJK,SAICA,EAAmB,SAJpB,OAKL,OALK,SAKCU,EAAoBvE,GALrB,OAML,OANK,UAMCqF,YAAI,CAAC5F,KTfwB,0BSS9B,QAOL,OAPK,UAOC4F,YAAIK,YAAK,WAPV,wC,eCrCUC,GAAV,SAAUA,EAAiBnG,GAA3B,uEAEa,OAFb,SAEmB4E,IAFnB,YAECpE,EAFD,wBAIC,OAJD,SAIOqF,YAAI,CACN5F,KVoB8B,6BUnB9BC,QAASM,IANd,8BASC,OATD,UASOqF,YAAI,CACN5F,KVgB2B,4BU1BhC,wC,eCGUmG,IAAV,SAAUA,GAAcpG,GAAxB,uFAGU,OAFfmD,QAAQC,IAAI,iBAAkBpD,EAAOE,SADhC,EAEwCF,EAAOE,QAA7CR,EAFF,EAEEA,QAASC,EAFX,EAEWA,SAAUQ,EAFrB,EAEqBA,SAAUY,EAF/B,EAE+BA,MAF/B,SAGgBiC,EACnB,SACA,CACE2C,MAAOjG,EACPC,SAAUA,EACVQ,SAAUA,EACVY,MAAOA,IATN,UAGC6E,EAHD,SAYqBA,EAAO1C,KAA1BrD,EAZF,EAYEA,OAAQD,EAZV,EAYUA,QACfuD,QAAQC,IAAI,SAAUwC,GACR,UAAX/F,EAdE,iBAgBH,OADAsD,QAAQC,IAAI,QAASwC,GAflB,UAgBGC,YAAI,CACR5F,KXbqB,cWcrBC,QAAS,CACPN,QAASA,KAnBV,mCAsBe,YAAXC,EAtBJ,iBAwBH,OADAsD,QAAQC,IAAI,kBAvBT,UAwBGyC,YAAI,CAAE5F,KXrBc,mBWHvB,wC,gBCMUoG,I,YAgCAC,IAhCV,SAAUD,GAAmBrG,GAA7B,uEAEY,OAFZ,kBNAkBiD,EMES,sBNFIsD,EMEmB,CAACR,IAAK/F,EAAOE,QAAQ6F,KND1E5C,QAAQC,IAAI,MAAOH,EAAKsD,GACjB/D,IAAMgE,IAAIvD,EAAK,CAACsD,OAAQA,IMF5B,UAEGX,EAFH,OAGHzC,QAAQC,IAAI,SAAUwC,GACI,YAAvBA,EAAO1C,KAAKrD,OAJZ,iBAKD,OALC,SAKKgG,YAAI,CACR5F,KZHgC,2BYIhCC,QAAS,CACPR,QAASkG,EAAO1C,KAAKxD,WARxB,+BAYD,OAZC,UAYKmG,YAAI,CACR5F,KZT6B,wBYU7BC,QAAQ,CACNL,OAAQ+F,EAAO1C,KAAKrD,OACpBD,QAASgG,EAAO1C,KAAKtD,WAhBxB,gCAsBH,OAtBG,0BAqBHuD,QAAQC,IAAI,gBArBT,UAsBGyC,YAAI,CACR5F,KZnB+B,wBYoB/BC,QAAQ,CACNL,OAAQ,OACRD,QAAQ,EAAD,MA1BR,kCNAiB,IAACqD,EAAasD,IMA/B,kBAgCA,SAAUD,GAAoBtG,GAA9B,+EAKY,OAJjBmD,QAAQC,IAAI,iBAAkBpD,EAAOE,SADhC,EAE0BF,EAAOE,QAA/B6F,EAFF,EAEEA,IAAK5F,EAFP,EAEOA,SAAUY,EAFjB,EAEiBA,MAEpBoC,QAAQC,IAAI,mBAJT,SAKkBI,EACnB,OACA,CACEuC,IAAKA,EACL5F,SAAUA,EACVY,MAAOA,IAVR,UAauB,aARpB6E,EALH,QAaO1C,KAAKrD,OAbZ,iBAcD,OAdC,SAcK6D,EAA0B,WAAYvD,EAAU,GAdrD,OAeD,OAfC,UAeK0F,YAAI,CACR5F,KZvC8B,yBYwC9BC,QAAS,CACPL,OAAQ+F,EAAO1C,KAAKrD,UAlBvB,gCAsBD,OAtBC,UAsBKgG,YAAI,CACR5F,KZ7C2B,sBY8C3BC,QAAS,CACPN,QAASgG,EAAO1C,KAAKtD,QACrBF,QAASkG,EAAO1C,KAAKrD,UA1BxB,QA8BHsD,QAAQC,IAAI,SAAUwC,GA9BnB,yC,gBC7BkBa,IAAV,SAAUA,KAAV,iEACb,OADa,SACPC,YbpBqB,gBaoBIjB,GADlB,OAEb,OAFa,SAEPiB,YbTsB,iBaSIN,IAFnB,OAGb,OAHa,SAGPM,YbnBc,SamBIhB,GAHX,OAIb,OAJa,SAIPgB,YbQ0B,qBaRIP,GAJvB,OAKb,OALa,UAKPO,YbNgC,2BaMIL,IAL7B,QAMb,OANa,UAMPK,YbD8B,yBaCIJ,IAN3B,yCCfR,IAAMpE,GAAUyE,cAEjBC,GAAiBC,c,yFCqJRC,GAtID,WACV,IAAMtB,EAAWuB,cADD,EAE6BC,aAAY,SAACjH,GAAD,OAA2BA,EAAMD,gBAAnFJ,EAFS,EAETA,QAASC,EAFA,EAEAA,SAAUE,EAFV,EAEUA,OAAQD,EAFlB,EAEkBA,QAC5BkG,EAAQvB,EAA0B,SAEpC0C,EAAqB,SAACC,GAAkB,IAAD,EACnBA,EAAEC,cAAfC,EADgC,EAChCA,GAAIvF,EAD4B,EAC5BA,MACX,OAAOuF,GACH,IAAK,UACD5B,EAAS,CACLvF,KfjCa,oBekCbC,QAAS2B,IAEb,MACJ,IAAK,WACD2D,EAAS,CACLvF,KftCc,qBeuCdC,QAAS2B,MAMrBwF,EAAe,WACf7B,EAAS,CACLvF,Kf9CiB,gBe+CjBC,QAAS,CACLR,QAASA,EACTC,SAAUA,MAMtB2H,qBAAU,WACHxB,GACCN,EAASU,YAAK,QAEnB,CAACJ,IAEJ,IAAMyB,EAAa,SAAC3F,GACD,UAAZA,EAAIA,KACHyF,KAWR,OAPAC,qBAAU,WAEN,OADAE,SAASC,iBAAiB,WAAYF,GAC/B,WACHC,SAASE,oBAAoB,WAAYH,MAE9C,CAAC7H,EAASC,IAGT,yBAAKyH,GAAG,sBACJ,kBAAC,KAAD,CAAMA,GAAG,iBACL,kBAAC,sBAAD,CAAoBO,UAAU,UAC1B,kBAAC,KAAD,CAAcC,KAAK,SAASC,KAAK,WACjC,qCAEJ,wBAAIF,UAAU,kBACd,kBAAC,aAAD,CAAWP,GAAG,aAAaU,QAAM,EAACC,SAAUC,EAAQ,OACpD,kBAAC,eAAD,KACI,kBAAC,qBAAD,CAAmBL,UAAU,qBACzB,kBAAC,KAAD,CACIM,MAAM,QACNN,UAAU,YAEVO,qBAAsB,WAClB1C,EAAS,CACLvF,Kf7FH,oBe8FGC,QAAS,MAGjBiI,aAAc,kBAAC,KAAD,CAAcP,KAAK,SAASC,KAAK,YAE/C,kBAAC,SAAD,CACIT,GAAG,UACHnH,KAAK,QACL4B,MAAOnC,EACP0I,SAAUnB,KAGlB,kBAAC,KAAD,CACIgB,MAAM,WACNN,UAAU,YAEVO,qBAAuB,WACnB1C,EAAS,CACLvF,Kf/GF,qBegHEC,QAAS,MAGjBiI,aAAc,kBAAC,KAAD,CAAcP,KAAK,SAASC,KAAK,YAE/C,kBAAC,SAAD,CACIT,GAAG,WACHnH,KAAK,WACL4B,MAAOlC,EACPyI,SAAUnB,KAGlB,6BACI,kBAAC,KAAD,CACIU,UAAU,mBACVU,UAAU,EACVC,QAAQ,EACRT,KAAM,kBAAC,KAAD,CAAcD,KAAK,SAASC,KAAK,UACvCU,QAASlB,GALb,SAQA,kBAAC,KAAD,CACIM,UAAU,mBACVU,UAAU,EACVC,QAAQ,EACRT,KAAM,kBAAC,KAAD,CAAcD,KAAK,SAASC,KAAK,gBACvCU,QAAS,WACL/C,EAASU,YAAK,aANtB,aAaC,UAAXrG,EACE,yBAAK8H,UAAU,WACX,2BAAI/H,IAET,M,oBC3IJ4I,GATY,SAACC,GACxB,OACI,yBAAKd,UAAU,wBACX,kBAAC,KAAD,CAAcC,KAAK,SAASC,KAAK,iBAAiBF,UAAU,iBAC5D,8BAAOc,EAAYtD,WAAnB,IAAgCsD,EAAYpD,UAA5C,OCsCGqD,GAnCQ,SAACD,GACpB,IAAM9H,EAAkBqG,aAAY,SAACjH,GAAD,OAA2BA,EAAMuB,gBAAgBX,mBAC/E6E,EAAWuB,cACX5G,EAAWoE,EAA0B,YAErCoE,EAAiB,WACnBnD,EAAS,CACLvF,KjB4BmB,kBiB3BnBC,QAAQ,CACJiB,gBAAgB,EAChBC,kBAAmBqH,EAAY7I,YAgB3C,OACI,yBAAK+H,UAAYhH,EAAmBR,IAAasI,EAAYtD,WAAa,0BAA2B,2BAA6B,gBAZnH,WACf,OAAOsD,EAAYvD,aACf,IAAK,SACD,OAAOuD,EAAY7I,QAEvB,IAAK,QACD,OAAO,yBAAKgJ,IAAKH,EAAY7I,QAAS+H,UAAU,gBAAgBY,QAASI,KAQzEE,KCrBDC,GAbIC,IAAMC,MAAK,SAACP,GAC3B,IAAMtI,EAAWoE,EAA0B,YAC3C,OACI,yBACIoD,UAAYxH,IAAasI,EAAYtD,WAAa,mBAAoB,qBACtE,kBAAC,GAAuBsD,GACxB,kBAAC,GAAmBA,OAG7B,SAACQ,EAA6BC,GAC7B,OAAQD,EAAU9D,aAAe+D,EAAU/D,YAAc8D,EAAU5D,YAAc6D,EAAU7D,aCyChF8D,GAhDM,WACjB,IAAMhJ,EAAWoE,EAA0B,YACrChE,EAAayG,aAAY,SAACjH,GAAD,OAA2BA,EAAMuB,gBAAgBf,cAC1EI,EAAkBqG,aAAY,SAACjH,GAAD,OAA2BA,EAAMuB,gBAAgBX,mBAC/EM,EAAa+F,aAAY,SAACjH,GAAD,OAA2BA,EAAMuB,gBAAgBL,cAC1EmI,EAAkBC,iBAAuB,MACzCC,EAAYD,iBAAuB,MACnCE,EACK,gCADLA,EAEQ,oCAiBd,OAdAjC,qBAAU,WAI0C,IAAD,EAH5C/G,GAAc6I,EAAgBI,UAC1BJ,EAAgBI,QAAQC,aAAeL,EAAgBI,QAAQE,cAC3DN,EAAgBI,QAAQG,UAAYP,EAAgBI,QAAQC,aAAe,IAC5EL,EAAgBI,QAAQE,cACtBN,EAAgBI,QAAQI,SAAS,CAC7BC,SAAU,SACVC,KAAK,UAAAV,EAAgBI,eAAhB,eAAyBE,cAAeN,EAAgBI,QAAQC,kBAItF,CAAClJ,IAIA,yBAAKoH,UAAYhH,EAAkB4I,EAA0BA,GACzD,yBAAKnC,GAAG,eAAe2C,IAAKX,GAEpB7I,EAAWyJ,QAAO,SAACvB,GACf,MAAkB,WAAfxH,GAAsD,WAA3BwH,EAAYrD,WAC/BqD,EACDxH,IAAewH,EAAYrD,YAAcjF,IAAasI,EAAYtD,YAClElE,IAAewH,EAAYtD,YAAchF,IAAasI,EAAYrD,WAEzDqD,OAHb,KAKPwB,KAAI,SAACxB,GAAD,OACH,kBAAC,GAAD,iBAAgBA,EAAhB,CAA6B7G,IAAK6G,EAAYtD,WAAasD,EAAYpD,gBAG/E,yBAAKsC,UAAU,SAASoC,IAAKT,O,kBCjDhCY,GAAc,SAACC,GACxB,OAAO,IAAIC,SAAQ,SAACC,EAAQC,GACxB,IAAIC,EAAS,IAAIC,WAEjBD,EAAOE,OAAS,WACgB,kBAAlBF,EAAO3E,QACbyE,EAAQE,EAAO3E,SAIvB2E,EAAOG,QAAU,WACbJ,EAAOC,EAAOI,QAGlBJ,EAAOK,cAAcT,OAIhBU,GAAa,wCAAG,WAAMV,GAAN,iBAAAW,EAAA,6DACnBC,EAAU,CACZC,UAAW,EACXC,iBAAkB,KAClBC,cAAc,GAJO,SAQIC,aAAiBhB,EAAMY,GAR3B,cAQnBK,EARmB,yBAWlBA,GAXkB,2CAAH,sDCiFXC,GApFO,WAAO,IAAD,EACMC,mBAAS,IADf,mBACjB1L,EADiB,KACR2L,EADQ,KAElBC,EAAanC,iBAAyB,MAFpB,EAGSrC,aAAY,SAACjH,GAAD,OAA2BA,EAAMuB,mBAAtEd,EAHgB,EAGhBA,UAAWS,EAHK,EAGLA,WACbd,EAAWoE,EAA0B,aAAe,GAOpDkH,EAAe,WACjB,IAAMC,EAAa,IAAI7H,KAIvB,OAH0B6H,EAAKC,cAAgB,KAAOD,EAAKE,WAAa,GAAM,IAAMF,EAAKG,UACrF,KAAM,IAAIhI,MAAOiI,WAAa,KAAM,IAAIjI,MAAOkI,aAC/C,KAAM,IAAIlI,MAAOmI,aAAe,KAAM,IAAInI,MAAOoI,sBAInDC,EAAc,WAChB,IAAM7G,EAAoBoG,IAC1BxG,EAAezE,EAAW,SAAUL,EAAUc,EAAYrB,EAASyF,GACnEkG,EAAW,KAGThE,EAAa,SAAC3F,GACD,UAAZA,EAAIA,KACHsK,KAIR5E,qBAAU,WAEN,OADAE,SAASC,iBAAiB,WAAYF,GAC/B,WACHC,SAASE,oBAAoB,WAAYH,MAE9C,CAAC3H,IAGJ,IAAMuM,EAAiB,wCAAG,kCAAArB,EAAA,yDACW,QAA9B,UAAAU,EAAWhC,eAAX,eAAoB4C,aAAgDC,KAA9B,UAAAb,EAAWhC,eAAX,eAAoB4C,OADvC,wBAEZjC,EAAOqB,EAAWhC,QAAQ4C,MAAM,GAFpB,kBAKevB,GAAcV,GAL7B,OAKRiB,EALQ,OAOdlB,GAAYkB,GAAgBkB,MAAK,SAACC,GAClC,IAAMlH,EAAoBoG,IAC1BxG,EAAezE,EAAW,QAASL,EAAUc,EAAYsL,EAAYlH,MACtEmH,OAAM,SAAAC,GAAG,OAAItJ,QAAQC,IAAI,QAASqJ,MAVnB,gDAYdtJ,QAAQC,IAAR,MAZc,yDAAH,qDAiBvB,OACI,yBAAKgE,GAAG,iBACJ,kBAAC,KAAD,CACIa,MAAM,iCACNb,GAAG,cAEHc,qBAAsB,WAAO,IAAD,EAAC,UAAAsD,EAAWhC,eAAX,SAAoBkD,SACjDvE,aAAc,kBAAC,KAAD,CAAcP,KAAK,SAASC,KAAK,WAE/C,kBAAC,SAAD,CACIT,GAAG,mBACHvF,MAAOjC,EACPwI,SA9DO,SAAClB,GAAkC,IAC/CrF,EAASqF,EAAEC,cAAXtF,MACP0J,EAAW1J,OA+DP,2BAAO5B,KAAK,OAAO0H,UAAW,gBAAiBoC,IAAKyB,EAAYmB,OAAO,UAAUvE,SAAU+D,IAC3F,kBAAC,KAAD,CACI/E,GAAG,aACHiB,UAAU,EACVC,QAAQ,EACRT,KAAM,kBAAC,KAAD,CAAcD,KAAK,SAASC,KAAK,SACvCU,QAAS2D,GALb,UCjDGU,GA1BE,WACb,IAAMpH,EAAWuB,cACXvG,EAAYwG,aAAY,SAACjH,GAAD,OAA2BA,EAAMuB,gBAAgBd,aACzEI,EAAWoG,aAAY,SAACjH,GAAD,OAA2BA,EAAMuB,gBAAgBV,YACxES,EAAuB2F,aAAY,SAACjH,GAAD,OAA2BA,EAAMuB,gBAAgBD,wBAY1F,OAVAiG,qBAAU,WACF9G,EAEMa,KdoBY,SAACb,EAAgBgF,GAC3ChF,EAAUqM,GAAG,YAAY,SAAC/L,GACtBqC,QAAQC,IAAI,WAAYtC,GACxB0E,EAAS,CACLvF,KRPiB,gBQQjBC,QAASY,OcxBTgM,CAAetM,EAAWgF,Gd6BN,SAAChF,EAAgBgF,EAAe5E,GAC5DJ,EAAUqM,GAAG,cAAc,SAACpE,GACxBlD,EAAmBC,EAAUiD,EAAYtD,WAAYsD,EAAYrD,YACjEI,EAAS,CACLvF,KRlBmB,kBQmBnBC,QAASuI,IAETjB,SAASuF,YAAenM,GACxB,IAAIoM,aAAavE,EAAYtD,WAAY,CACrC8H,KAAMxE,EAAY7I,QAClBiI,KAAMG,EAAQ,UctClBkF,CAAiB1M,EAAWgF,EAAU5E,GACtC4E,EAAS,CAACvF,KtBWqB,iCsBf/BuF,EAAS,CAACvF,KtBYY,yBsBN3B,CAACO,IAGA,yBAAK4G,GAAG,QACJ,0BAAMA,GAAG,YACL,kBAAC,GAAD,MACA,kBAAC,GAAD,S,wCCGD+F,GA/BG,WAAO,IAAD,EACwB7B,mBAAS,GADjC,mBACb8B,EADa,KACGC,EADH,KAEd7H,EAAWuB,cAWjB,OACI,kBAAC,KAAD,CACIuG,iBAAe,EACfC,cAAeH,EACfI,aAbmB,SAACC,GACxBJ,EAAkBI,GAElBjI,EAAS,CACLvF,KvB2ByB,wBuB1BzBC,QAHgC,IAAVuN,MAatB,kBAAC,YAAD,KACI,kBAAC,mBAAD,CAAiBC,QAAS,kBAAC,KAAD,CAAc7F,KAAK,iBAC7C,kBAAC,gBAAD,CAAc8F,YAAY,oBAE9B,kBAAC,YAAD,KACI,kBAAC,mBAAD,CAAiBD,QAAS,kBAAC,KAAD,CAAc7F,KAAK,yBAC7C,kBAAC,gBAAD,CAAc8F,YAAY,oBCjB3BC,GARM7E,IAAMC,MAAK,SAAC6E,GAA0B,IAChD3M,EAAmB2M,EAAnB3M,gBACP,OACI,yBAAKyG,UAAU,iBAAiBzG,MAErC,SAAC+H,EAA0BC,GAC1B,OAAQD,EAAU/H,kBAAoBgI,EAAUhI,mBC4ErC4M,GAvEE,SAACD,GACd,IAAMrI,EAAWuB,cACXgH,EAAaxJ,EAA0B,YAFN,EAGHyC,aAAY,SAACjH,GAAD,OAA2BA,EAAMuB,mBAA1ER,EAHgC,EAGhCA,SAAUI,EAHsB,EAGtBA,gBACV8M,EAAYH,EAAZG,SAJgC,EAKG1C,oBAAU,GALb,mBAKhCiC,EALgC,KAKjBU,EALiB,KAMnCC,EAAa,GACdF,GACCE,EAAQzM,OAAO0M,OAAOrN,GAAUkJ,QAAO,SAACoE,GAAD,MAA0B,WAAhBA,EAAKvO,QAAuBuO,EAAKjO,WAAa4N,MACzFM,OAAO,EAAG,EAAG,CAAClO,SAAU,SAAUN,OAAQ,WAEhDqO,EAAQzM,OAAO0M,OAAOrN,GAAUkJ,QAAO,SAACoE,GAAD,MAA0B,YAAhBA,EAAKvO,QAAwBuO,EAAKjO,WAAa4N,KAGpG,IAAMO,EAAmBC,uBAAY,SAACd,GAC/BO,IACCC,EAAiBR,GACjBjI,EAAS,CACLvF,KzBSe,kByBRfC,QAASgO,EAAMT,GAAOtN,WAE1BqF,EAAS,CACLvF,KzBMqB,wByBLrBC,QAAS,CACLD,KAAM,QACNE,SAAU+N,EAAMT,GAAOtN,eAIpC,CAAC+N,IAQJ,OANA5G,qBAAU,WACH0G,GACCM,EAAiB,KAEtB,IAGC,kBAAC,KAAD,CACIhB,gBAAiBU,EACjBT,cAAeA,EACfC,aAAcc,GAGVJ,EAAMjE,KAAI,SAACmE,GACP,OACI,kBAAC,YAAD,CAAUxM,IAAKwM,EAAKjO,UAChB,kBAAC,mBAAD,CAAiBuN,QACZU,EAAKrN,MACF,yBAAK6H,IAAG,UAAKrG,EAAL,YAAuB6L,EAAKrN,OAASyN,IAAI,cAEjD,kBAAC,KAAD,CACI7G,UAAU,YACVE,KAAuB,WAAhBuG,EAAKjO,SAAsB,SAAU,aAIxD,kBAAC,gBAAD,CAAcwN,YAAaS,EAAKjO,WAC9Be,EAAgBkN,EAAKjO,UAAY,EACnC,kBAAC,GAAD,CACIe,gBAAkBA,EAAgBkN,EAAKjO,UAAYe,EAAgBkN,EAAKjO,UAAW,IACnF,SC7CjBsO,GAzBF,WACT,IAAMtO,EAAWoE,EAA0B,YACrCzD,EAAWkG,aAAY,SAACjH,GAAD,OAA2BA,EAAMuB,gBAAgBR,YACxE4N,EAA8BjN,OAAO0M,OAAOrN,GAAUkJ,QAAO,SAACoE,GAAD,OAAUA,EAAKjO,WAAaA,KAAU,GACnGY,EAAS2N,EAAWA,EAAS3N,MAAO,GAE1C,OACI,yBAAKqG,GAAG,eACFrG,EACE,yBACIqG,GAAG,oBACHwB,IAAG,UAAKrG,EAAL,YAAuBxB,GAC1ByN,IAAI,QAGR,kBAAC,KAAD,CACI7G,UAAU,YACVE,KAAkB,WAAX1H,EAAsB,SAAU,WAG/C,uBAAGiH,GAAG,oBAAoBjH,KC4BvBwO,GA/CG,WACd,IAAMnJ,EAAWuB,cACXlG,EAAamG,aAAY,SAACjH,GAAD,OAA2BA,EAAMuB,gBAAgBT,cAF5D,EAGMyK,mBAASsD,OAAOC,YAHtB,mBAGbC,EAHa,KAGNC,EAHM,KAyBpB,OAbAzH,qBAAU,WACN,IAAM0H,EAAe,WACjB7L,QAAQC,IAAIwL,OAAOC,YACnBE,EAASH,OAAOC,aAGpB,OADAD,OAAOnH,iBAAiB,SAAUuH,GAC3B,WACHJ,OAAOlH,oBAAoB,SAAUsH,OAOzC,kBAAC,KAAD,CACIC,MAAOH,EAAM,IACbI,KAAMrO,EACNsO,QAxBY,WAChB3J,EAAS,CACLvF,K3B2BmB,kB2B1BnBC,SAAS,MAuBT,kBAAC,iBAAD,KACI,kBAAC,GAAD,MACA,wBAAIkP,MAAO,CAACC,YAAa,UAAWP,MAAO,SAC3C,uBAAGnH,UAAU,gBAAb,SACA,kBAAC,GAAD,MACA,wBAAIyH,MAAO,CAACC,YAAa,UAAWP,MAAO,SAC3C,uBAAGnH,UAAU,gBAAb,iBACA,kBAAC,GAAD,CAAUqG,UAAU,IACpB,wBAAIoB,MAAO,CAACC,YAAa,UAAWP,MAAO,SAC3C,uBAAGnH,UAAU,gBAAb,kBACA,kBAAC,GAAD,CAAUqG,UAAU,OCqCrBsB,GAtEA,WACX,IAAM9J,EAAWuB,cADA,EAEqCC,aAAY,SAACjH,GAAD,OAA2BA,EAAMuB,mBAA5FT,EAFU,EAEVA,WAAYL,EAFF,EAEEA,UAAWS,EAFb,EAEaA,WAAYH,EAFzB,EAEyBA,SAkBpCyO,EAAkBhB,uBAAY,WAChC,OAAO9M,OAAO0M,OAAOrN,GAAUkJ,QAAO,SAAClG,GAAD,MAA0B,WAAhBA,EAAKjE,UAAqB2P,SAC3E,CAAC1O,IAEJ,OACI,kBAAC,KAAD,KACI,kBAAC,gBAAD,KACI,kBAAC,oBAAD,CAAkB2O,MAAM,SACpB,kBAAC,iBAAD,CAAeC,SAAO,EAACC,SAAU,GAC7B,kBAAC,KAAD,CAAcC,WAAS,EAAC/H,KAAK,OAAOU,QAxB9B,WACtB/C,EAAS,CACLvF,K5BmBmB,kB4BlBnBC,SAAUW,QAuBF,kBAAC,kBAAD,CAAgB8O,SAAU,GAA1B,YAEI,kBAAC,KAAD,CACIC,WAAS,EACT/H,KAAK,WAIjB,kBAAC,oBAAD,CAAkBF,UAAU,uBACxB,yBAAKA,UAAU,qBACX,uBAAGP,GAAG,eAAN,UAA4BnG,EAA5B,KACA,uBAAGmG,GAAG,iBAAN,qBAAyCmI,IAAzC,QAGR,kBAAC,oBAAD,CAAkBE,MAAM,MAAM7H,KAAK,WAC/B,kBAAC,iBAAD,CAAeiI,YAAU,EAACF,SAAU,GAChC,kBAAC,KAAD,CACIG,aAAW,OACXF,WAAS,EACT/H,KAAK,SACLkI,kBAAgB,aAChBxH,QAAS,WAAO/C,EAASU,YAAK,cAItC,kBAAC,iBAAD,CAAe2J,YAAU,EAACF,SAAU,GAChC,kBAAC,KAAD,CACIG,aAAW,SACXF,WAAS,EACT/H,KAAK,cACLU,QAhDF,WAClB/C,EAAS,CACLvF,K5B1BU,S4B2BVC,QAASM,YCRNwP,GApBD,WAAO,IAAD,EAC4BhJ,aAAY,SAACjH,GAAD,OAA2BA,EAAMuB,mBAAlFH,EADS,EACTA,eAAgBC,EADP,EACOA,kBACjBoE,EAAWuB,cACXkJ,EAAa1B,uBAAY,WAC3B/I,EAAS,CACLvF,K7BoCmB,kB6BnCnBC,QAAQ,CACJiB,gBAAgB,EAChBC,kBAAmB,QAG5B,IACH,OACI,yBAAKgG,GAAG,UAAUO,UAAU,QAAQyH,MAAO,CAACc,QAAU/O,EAAiB,QAAS,SAC5E,0BAAMwG,UAAU,QAAQyH,MAAO,CAACe,MAAO,SAAU5H,QAAS0H,GAA1D,QACA,yBAAKtI,UAAU,gBAAgB6G,IAAI,eAAe5F,IAAKxH,MC+CpDgP,GAnDF,WACT,IAAM5K,EAAWuB,cACVnG,EAAYoG,aAAY,SAACjH,GAAD,OAA2BA,EAAMuB,mBAAzDV,SACDkF,EAAQvB,EAA0B,SA4BxC,OAzBA+C,qBAAU,YACH,qUAAqU+I,KAAKC,UAAUC,YAChV,0kDAA0kDF,KAAKC,UAAUC,UAAUC,OAAO,EAAE,MAC/mDhL,EAAS,CACLvF,K9BgBa,gB8BfbC,SAAS,IAGbU,GACGgO,OAAO5B,cAA4C,YAA5BA,aAAayD,YACnCzD,aAAa0D,mBAAkB,SAAC7Q,GAC5BsD,QAAQC,IAAI,SAAUvD,QAInC,IAGHyH,qBAAU,WACFxB,GACAN,EAASU,YAAK,aAEnB,CAACJ,IAIJ,oCAEKA,EACD,oCACI,yBAAK6B,UAAU,oBACX,kBAAC,GAAD,MACA,kBAAC,wBAAD,CAAsBA,UAAU,0BAC5B,kBAAC,GAAD,MACA,kBAAC,GAAD,OAEJ,kBAAC,GAAD,QAGP,K,oBChBMgJ,GAhCM,WACjB,IAAMnL,EAAWuB,cACVzG,EAAiB0G,aAAY,SAACjH,GAAD,OAA2BA,EAAMuC,iBAA9DhC,cAEDsQ,EAAqBrC,uBAAY,SAACrH,GACpC1B,EAASU,YAAK,UACdV,EAAS,CACLvF,K/BFsB,qB+BGtBC,SAAS,MAEd,CAACI,IAEJ,OACI,kBAAC,KAAD,CAAQ8G,GAAG,eAAe8H,KAAM5O,GAC5B,kBAAC,eAAD,gBACA,kBAAC,iBAAD,KACI,qDAEJ,kBAAC,gBAAD,KACI,kBAAC,KAAD,CACIqH,UAAU,mBACVU,UAAU,EACVC,QAAQ,EACRT,KAAM,kBAAC,KAAD,CAAcD,KAAK,SAASC,KAAK,gBACvCU,QAASqI,GALb,YCoODC,GA5OA,WACX,IAAMrL,EAAWuB,cACX+J,EAAiBzH,iBAAyB,MAC1CtI,EAAQsI,iBAAoB,MAHjB,EAIiErC,aAAY,SAACjH,GAAD,OAA2BA,EAAMuC,iBAAxH5C,EAJU,EAIVA,QAASC,EAJC,EAIDA,SAAUS,EAJT,EAISA,gBAAiBD,EAJ1B,EAI0BA,SAAUN,EAJpC,EAIoCA,OAAQD,EAJ5C,EAI4CA,QAASS,EAJrD,EAIqDA,SAEhE0Q,EAAe,SAAC7J,GAAkB,IAAD,EACfA,EAAEC,cAAfC,EAD4B,EAC5BA,GAAIvF,EADwB,EACxBA,MACX,OAAOuF,GACH,IAAK,UACD5B,EAAS,CACLvF,KhC1Bc,qBgC2BdC,QAAS2B,IAEb,MACJ,IAAK,WACD2D,EAAS,CACLvF,KhC9Be,sBgC+BfC,QAAS2B,IAEb,MACJ,IAAK,kBACD2D,EAAS,CACLvF,KhCnCuB,8BgCoCvBC,QAAS2B,IAEb,MACJ,IAAK,WACD2D,EAAS,CACLvF,KhC3Ce,sBgC4CfC,QAAS2B,MAiDnBmP,EAAkB,wCAAG,8BAAAlG,EAAA,uDACpB,UAAAgG,EAAetH,eAAf,eAAwB4C,SAAS,UAAA0E,EAAetH,eAAf,eAAwB4C,MAAMoD,QAAS,GACvEzO,EAAMyI,QAAUsH,EAAetH,QAAQ4C,MAAM,GAC7C5G,EAAS,CACLvF,KhC7F2B,8BgC8F3BC,QAASa,EAAMyI,QAAQyH,SAG3BlQ,EAAMyI,QAAU,KAChBhE,EAAS,CACLvF,KhCnG2B,8BgCoG3BC,QAAS,MAXM,2CAAH,qDAgBxB,OACI,oCACA,yBAAKkH,GAAG,sBACJ,kBAAC,KAAD,CAAMA,GAAG,iBACL,kBAAC,sBAAD,CAAoBO,UAAU,UAC1B,kBAAC,KAAD,CAAcC,KAAK,SAASC,KAAK,WACjC,uCAEJ,wBAAIF,UAAU,kBACd,kBAAC,eAAD,KACI,kBAAC,qBAAD,CAAmBA,UAAU,qBACzB,kBAAC,KAAD,CACIM,MAAM,QACNN,UAAU,YAEVO,qBAAsB,WAClB1C,EAAS,CACLvF,KhC/HF,qBgCgIEC,QAAS,MAGjBiI,aAAc,kBAAC,KAAD,CAAcP,KAAK,SAASC,KAAK,YAE/C,kBAAC,SAAD,CACIT,GAAG,UACHnH,KAAK,UACL4B,MAAOnC,EACP0I,SAAU2I,KAGlB,kBAAC,KAAD,CACI9I,MAAM,YACNN,UAAU,YAEVO,qBAAsB,WAClB1C,EAAS,CACLvF,KhCjJD,sBgCkJCC,QAAS,MAGjBiI,aAAc,kBAAC,KAAD,CAAcP,KAAK,SAASC,KAAK,YAE/C,kBAAC,SAAD,CACIT,GAAG,WACHnH,KAAK,SACL4B,MAAO1B,EACPiI,SAAU2I,KAGlB,kBAAC,KAAD,CACI9I,MAAM,WACNN,UAAU,YAEVO,qBAAuB,WACnB1C,EAAS,CACLvF,KhCnKD,sBgCoKCC,QAAS,MAGjBiI,aAAc,kBAAC,KAAD,CAAcP,KAAK,SAASC,KAAK,YAE/C,kBAAC,SAAD,CACIT,GAAG,WACHnH,KAAK,WACL4B,MAAOlC,EACPyI,SAAU2I,KAGlB,kBAAC,KAAD,CACI9I,MAAM,mBACNN,UAAU,YAEVO,qBAAuB,WACnB1C,EAAS,CACLvF,KhCrLO,8BgCsLPC,QAAS,MAGjBiI,aAAc,kBAAC,KAAD,CAAcP,KAAK,SAASC,KAAK,YAE/C,kBAAC,SAAD,CACIT,GAAG,kBACHnH,KAAK,WACL4B,MAAOzB,EACPgI,SAAU2I,KAGlB,yBAAKpJ,UAAU,aACX,yBAAKA,UAAU,mBAAmByH,MAAO,CAAC8B,aAAc,uBACpD,kBAAC,KAAD,CACIvJ,UAAU,mBACVU,UAAU,EACVC,QAAQ,EACRT,KAAM,kBAAC,KAAD,CAAcD,KAAK,SAASC,KAAK,UACvCU,QAAS,WAAO,IAAD,EAAC,UAAAuI,EAAetH,eAAf,SAAwBkD,UAL5C,SAQA,2BACIzM,KAAK,OACL0H,UAAW,gBACXoC,IAAK+G,EACLnE,OAAO,UACPvE,SAAU4I,IAEd,0BAAM5J,GAAG,qBAAqB/G,KAGtC,yBAAKsH,UAAU,oBACX,kBAAC,KAAD,CACIA,UAAU,mBACVU,UAAU,EACVC,QAAQ,EACRT,KAAM,kBAAC,KAAD,CAAcD,KAAK,SAASC,KAAK,eACvCU,QA5KN,WAClBpF,QAAQC,IAAI,QAASrC,EAAMyI,SAC3BrG,QAAQC,IAAI,SAAU1D,EAASC,EAAUS,EAAiBD,GACtDT,GAAYC,GAAaS,GAAoBD,EAO9CC,IAAoBT,EAOpBD,EAAQyR,QAAQ,MAAQ,EACvB3L,EAAS,CACLvF,KhClEkB,qBgCmElBC,QAAS,mBAIba,EAAMyI,QAQVhE,EAAS,CACLvF,KhC9EkB,iBgC+ElBC,QAAS,CACLR,QAASA,EACTC,SAAUA,EACVQ,SAAUA,EACVY,MAAOA,EAAMyI,WAbjBhE,EAAS,CACLvF,KhCzEkB,qBgC0ElBC,QAAS,4BAhBbsF,EAAS,CACLvF,KhC3DkB,qBgC4DlBC,QAAS,4BATbsF,EAAS,CACLvF,KhCpDkB,qBgCqDlBC,QAAS,qCAiKG,UAQA,kBAAC,KAAD,CACIyH,UAAU,mBACVU,UAAU,EACVC,QAAQ,EACRT,KAAM,kBAAC,KAAD,CAAcD,KAAK,SAASC,KAAK,uBACvCU,QAAS,WACL/C,EAASU,YAAK,YANtB,YAaC,UAAXrG,GAAkC,KAAZD,EACpB,yBAAK+H,UAAU,WACX,2BAAI/H,IAET,KAGX,kBAAC,GAAD,QClNOwR,GAhCI,WACf,IAAM5L,EAAWuB,cACXzG,EAAgB0G,aAAY,SAACjH,GAAD,OAA2BA,EAAMiC,YAAY1B,iBAEzE+Q,EAAwB9C,uBAAY,SAACrH,GACvC1B,EAASU,YAAK,MACdV,EAAS,CACLvF,KjCU2B,0BiCT3BC,SAAS,MAEd,CAACI,IAEJ,OACI,kBAAC,KAAD,CAAQ8G,GAAG,eAAe8H,KAAM5O,GAC5B,kBAAC,eAAD,gBACA,kBAAC,iBAAD,KACI,yEAEJ,kBAAC,gBAAD,KACI,kBAAC,KAAD,CACIqH,UAAU,mBACVU,UAAU,EACVC,QAAQ,EACRT,KAAM,kBAAC,KAAD,CAAcD,KAAK,SAASC,KAAK,gBACvCU,QAAS8I,GALb,eC2JDC,GArKF,WACT,IAAMvL,EAAcxB,EAA0B,OACxCuM,EAAiBzH,iBAAyB,MAC1CkI,EAAWlI,iBAAoB,MAC/B7D,EAAWuB,cAJF,EAYVC,aAAY,SAACjH,GAAD,OAA2BA,EAAMiC,eAN9CtC,EANW,EAMXA,QACAoC,EAPW,EAOXA,YACAC,EARW,EAQXA,iBAEAnC,GAVW,EASXU,cATW,EAUXV,SACAC,EAXW,EAWXA,OAGJyH,qBAAU,WACFvB,GACAP,EAASU,YAAK,WAElBV,EAAS,CACLvF,KlCpB4B,2BkCqB5BC,QAAS,CACL6F,IAAKA,OAGd,IA4CH,OACI,oCACA,yBAAKqB,GAAG,sBACJ,kBAAC,KAAD,CAAMA,GAAG,iBACL,kBAAC,sBAAD,CAAoBO,UAAU,UAC1B,kBAAC,KAAD,CAAcC,KAAK,SAASC,KAAK,WACjC,8CAEJ,wBAAIF,UAAU,kBACd,kBAAC,eAAD,KACI,kBAAC,qBAAD,CAAmBA,UAAU,qBACzB,kBAAC,KAAD,CACIM,MAAM,QACNN,UAAU,YACV6J,UAAU,GAEV,kBAAC,SAAD,CACIpK,GAAG,UACHnH,KAAK,UACL4B,MAAOnC,EACP8R,UAAU,KAIlB,kBAAC,KAAD,CACIvJ,MAAM,2BACNN,UAAU,YAEVO,qBAAsB,WAClB1C,EAAS,CACLvF,KlChGF,qBkCiGEC,QAAS,MAGjBiI,aAAc,kBAAC,KAAD,CAAcP,KAAK,SAASC,KAAK,YAE/C,kBAAC,SAAD,CACIT,GAAG,cACHnH,KAAK,SACL4B,MAAOC,EACPsG,SAlFA,SAAClB,GAAkB,IACpCrF,EAASqF,EAAEC,cAAXtF,MACP2D,EAAS,CACLvF,KlC3BsB,qBkC4BtBC,QAAS2B,QAiFG,yBAAK8F,UAAU,aACX,yBAAKA,UAAU,mBAAmByH,MAAO,CAAC8B,aAAc,uBACpD,kBAAC,KAAD,CACIvJ,UAAU,mBACVU,UAAU,EACVC,QAAQ,EACRT,KAAM,kBAAC,KAAD,CAAcD,KAAK,SAASC,KAAK,UACvCU,QAAS,WAAO,IAAD,EAAC,UAAAuI,EAAetH,eAAf,SAAwBkD,UAL5C,SAQA,2BACIzM,KAAK,OACL0H,UAAW,gBACXoC,IAAK+G,EACLnE,OAAO,UACPvE,SA5FL,WAAO,IAAD,KAC1B,UAAA0I,EAAetH,eAAf,eAAwB4C,SAAS,UAAA0E,EAAetH,eAAf,eAAwB4C,MAAMoD,QAAS,GACvE+B,EAAS/H,QAAUsH,EAAetH,QAAQ4C,MAAM,GAChD5G,EAAS,CACLvF,KlCnCkB,qBkCoClBC,QAASqR,EAAS/H,QAAQyH,SAG9BM,EAAS/H,QAAU,KACnBhE,EAAS,CACLvF,KlCzCkB,qBkC0ClBC,QAAS,SAmFO,0BAAMkH,GAAG,qBAAqBrF,KAGtC,yBAAK4F,UAAU,oBACX,kBAAC,KAAD,CACIA,UAAU,mBACVU,UAAU,EACVC,QAAQ,EACRT,KAAM,kBAAC,KAAD,CAAcD,KAAK,SAASC,KAAK,eACvCU,QAvFN,WACdzG,GAAgByP,EAAS/H,QAO7BhE,EAAS,CACLvF,KlCtD0B,yBkCuD1BC,QAAS,CACL6F,IAAKA,EACL5F,SAAU2B,EACVf,MAAOwQ,EAAS/H,WAXpBhE,EAAS,CACLvF,KlCjDgB,mBkCkDhBC,QAAS,qCA8EG,UAQA,kBAAC,KAAD,CACIyH,UAAU,mBACVU,UAAU,EACVC,QAAQ,EACRT,KAAM,kBAAC,KAAD,CAAcD,KAAK,SAASC,KAAK,uBACvCU,QAAS,WACL/C,EAASU,YAAK,QANtB,WAaC,UAAXrG,GAAkC,KAAZD,EACpB,yBAAK+H,UAAU,WACX,2BAAI/H,IAET,KAGX,kBAAC,GAAD,QC1KF6R,GrBDS,SAAwBC,GACrC,IAAMD,EAAQE,YACZ1P,EAAkBC,IAClBwP,EACAE,YACEC,YACEC,YAAiB5P,IACjB0E,MAKN,OADAA,GAAemL,IAAItL,IACZgL,EqBXKO,CAAe,IA+BdC,GA7BH,WACR,OACI,kBAAC,IAAD,CAAUR,MAAOA,IAEb,kBAAC,IAAD,CAAiBvP,QAASA,IAC1B,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOgQ,OAAK,EAACC,KAAK,KACd,kBAAC,GAAD,OAEJ,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,UACd,kBAAC,GAAD,OAEJ,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,WACd,kBAAC,GAAD,OAEJ,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,SACd,kBAAC,GAAD,OAEJ,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,KACd,6BACI,yDCtBJC,QACW,cAA7BxD,OAAOyD,SAASC,UAEe,UAA7B1D,OAAOyD,SAASC,UAEhB1D,OAAOyD,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,GAAD,MAASjL,SAASkL,eAAe,SD6H3C,kBAAmBpC,WACrBA,UAAUqC,cAAcC,MAAMtG,MAAK,SAAAuG,GACjCA,EAAaC,iB","file":"static/js/main.c39dda98.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/message.232a7059.png\";","module.exports = __webpack_public_path__ + \"static/media/chat.36cb8b4b.png\";","import {\n    SET_LOGIN_ACCOUNT,\n    SET_LOGIN_PASSWORD,\n    LOGIN_REQUEST,\n    LOGIN_SUCCESS,\n    LOGIN_FAIL\n} from '../actionTypes'\nimport {loginState} from '../../Interfaces';\n\nconst initState: loginState = {\n    account: '',\n    password: '',\n    message: '',\n    status: '',\n}\n\nconst loginReducer = (state = initState, action: any): loginState => {\n    switch(action.type){\n        case SET_LOGIN_ACCOUNT: {\n            return {...state, account: action.payload};\n        }\n        case SET_LOGIN_PASSWORD: {\n            return {...state, password: action.payload};\n        }\n        case LOGIN_REQUEST: {\n            return {...state, status: 'loading'};\n        }\n        case LOGIN_SUCCESS: {\n            return {...state, status: 'logined'};\n        }\n        case LOGIN_FAIL: {\n            return {\n                ...state, \n                status: 'error',\n                message: action.payload.message,\n            };\n        }\n        default: return state;\n    }\n}\n\nexport default loginReducer;","/* Login related */\nexport const SET_LOGIN_ACCOUNT = 'SET_LOGIN_ACCOUNT';\nexport const SET_LOGIN_PASSWORD = 'SET_LOGIN_PASSWORD';\nexport const LOGIN_REQUEST = 'LOGIN_REQUEST';\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const LOGIN_FAIL = 'LOGIN_FAIL';\nexport const LOGOUT = 'LOGOUT';\n\n/* Signup related */\nexport const SET_SIGNUP_ACCOUNT = 'SET_SIGNUP_ACCOUNT';\nexport const SET_SIGNUP_USERNAME = 'SET_SIGNUP_USERNAME';\nexport const SET_SIGNUP_PASSWORD = 'SET_SIGNUP_PASSWORD';\nexport const SET_SIGNUP_CONFIRM_PASSWORD = 'SET_SIGNUP_CONFIRM_PASSWORD';\nexport const SET_SIGNUP_MESSAGE = 'SET_SIGNUP_MESSAGE';\nexport const SET_SIGNUP_UPLOAD_FILE_NAME = 'SET_SIGNUP_UPLOAD_FILE_NAME';\nexport const SIGNUP_REQUEST = 'SIGNUP_REQUEST';\nexport const SIGNUP_SUCCESS = 'SIGNUP_SUCCESS';\nexport const SIGNUP_FAIL = 'SIGNUP_FAIL';\nexport const SET_SUCCESS_DIALOG = 'SET_SUCCESS_DIALOG';\n\n/* Edit user information related */\nexport const GET_USER_ACCOUNT_REQUEST = 'GET_USER_ACCOUNT_REQUEST';\nexport const GET_USER_ACCOUNT_SUCCESS = 'GET_USER_ACCOUNT_SUCCESS';\nexport const GET_USER_ACCOUNT_FAIL = 'GET_USER_ACCOUNT_FAIL';\nexport const SET_EDIT_USER_NAME = 'SET_EDIT_USER_NAME';\nexport const SET_EDIT_FILE_NAME = 'SET_EDIT_FILE_NAME';\nexport const SET_EDIT_MESSAGE = 'SET_EDIT_MESSAGE';\nexport const EDIT_USER_INFO_REQUEST = 'EDIT_USER_INFO_REQUEST';\nexport const EDIT_USER_INFO_SUCCESS = 'EDIT_USER_INFO_SUCCESS';\nexport const EDIT_USER_INFO_FAIL = 'EDIT_USER_INFO_FAIL';\nexport const SET_EDIT_SUCCESS_DIALOG = 'SET_EDIT_SUCCESS_DIALOG';\n\n\n/* Chat room related */\nexport const CONNECT_WEB_SOCKET = 'CONNECT_WEB_SOCKET';\nexport const CONNECT_WEB_SOCKET_SUCCESS = 'CONNECT_WEB_SOCKET_SUCCESS';\nexport const CONNECT_WEB_SOCKET_FAIL = 'CONNECT_WEB_SOCKET_FAIL';\nexport const SET_WEB_SOCKET_IS_LISTENING = 'SET_WEB_SOCKET_IS_LISTENING';\nexport const DISCONNECT_WEB_SOCKET = 'DISCONNECT_WEB_SOCKET';\nexport const SET_MESSAGE_BOX = 'SET_MESSAGE_BOX';\nexport const SET_USER_LIST = 'SET_USER_LIST';\nexport const SET_MESSAGE_BOX_STYLE = 'SET_MESSAGE_BOX_STYLE';\nexport const SET_IS_MOBILE = 'SET_IS_MOBILE';\nexport const SET_DRAWER_OPEN = 'SET_DRAWER_OPEN';\nexport const SET_CHAT_PEOPLE = 'SET_CHAT_PEOPLE';\nexport const SET_NEW_MESSAGE_ALARM = 'SET_NEW_MESSAGE_ALARM';\nexport const SET_IMAGE_MODAL = 'SET_IMAGE_MODAL'\n\n\n\n\n","import {\n    SET_SIGNUP_ACCOUNT,\n    SET_SIGNUP_PASSWORD,\n    SET_SIGNUP_CONFIRM_PASSWORD,\n    SET_SIGNUP_USERNAME,\n    SET_SIGNUP_MESSAGE,\n    SET_SIGNUP_UPLOAD_FILE_NAME,\n    SIGNUP_REQUEST,\n    SIGNUP_SUCCESS,\n    SET_SUCCESS_DIALOG,\n    SIGNUP_FAIL,\n} from '../actionTypes'\n\nimport {signupState} from './../../Interfaces'\n\nconst initState: signupState = {\n    account: '',\n    userName: '',\n    password: '',\n    confirmPassword: '',\n    message: '',\n    status: '',\n    fileName: '',\n    successDialog: false\n}\n\nconst loginReducer = (state = initState, action: any): signupState => {\n    switch(action.type){\n        case SET_SIGNUP_ACCOUNT: {\n            return {...state, account: action.payload};\n        }\n        case SET_SIGNUP_PASSWORD: {\n            return {...state, password: action.payload};\n        }\n        case SET_SIGNUP_USERNAME: {\n            return {...state, userName: action.payload};\n        }\n        case SET_SIGNUP_CONFIRM_PASSWORD: {\n            return {...state, confirmPassword: action.payload};\n        }\n        case SET_SIGNUP_MESSAGE:{\n            return {...state, message: action.payload}\n        }\n        case SET_SIGNUP_UPLOAD_FILE_NAME:{\n            return {...state, fileName: action.payload}\n        }\n        case SIGNUP_REQUEST: {\n            return {...state, status: 'processing'};\n        }\n        case SIGNUP_SUCCESS: {\n            return {...state, status: 'success', successDialog: true, message: '', fileName: ''};\n        }\n        case SET_SUCCESS_DIALOG: {\n            return {...state, successDialog: action.payload, message: '', fileName: ''}\n        }\n        case SIGNUP_FAIL: {\n            return {\n                ...state, \n                status: 'error',\n                message: action.payload.message,\n            };\n        }\n        default: return state;\n    }\n}\n\nexport default loginReducer;","import {\n    CONNECT_WEB_SOCKET,\n    CONNECT_WEB_SOCKET_SUCCESS,\n    CONNECT_WEB_SOCKET_FAIL,\n    DISCONNECT_WEB_SOCKET,\n    SET_WEB_SOCKET_IS_LISTENING,\n    SET_MESSAGE_BOX,\n    SET_MESSAGE_BOX_STYLE,\n    SET_IS_MOBILE,\n    SET_DRAWER_OPEN,\n    SET_USER_LIST,\n    SET_CHAT_PEOPLE,\n    SET_NEW_MESSAGE_ALARM,\n    SET_IMAGE_MODAL\n} from '../actionTypes'\nimport {chatRoomState} from '../../Interfaces'\n\nconst initState: chatRoomState = {\n    messageBox: [],\n    webSocket: null,\n    onlineCount: 0,\n    connectStatus: '',\n    styleMessageBox: true,\n    isMobile: false,\n    drawerOpen: false,\n    userList: {\n        userName:{\n            userName: '',\n            status: '',\n            photo: '',\n            socketId: '',\n        }\n    },\n    chatPeople: '',\n    newMessageCount: {},\n    imageModalOpen: false,\n    imageEncodeString: '',\n    webSocketIsListening: false\n}\n\nconst chatRoomReducer = (state = initState, action: any): chatRoomState => {\n    switch(action.type){\n        case CONNECT_WEB_SOCKET:{\n            return {\n                ...state,\n                connectStatus: 'connecting'\n            }\n        }\n        case CONNECT_WEB_SOCKET_SUCCESS:{\n            return{\n                ...state,\n                connectStatus: 'connected',\n                webSocket: action.payload\n            }\n        }\n        case CONNECT_WEB_SOCKET_FAIL:{\n            return{\n                ...state,\n                connectStatus: 'disconnect',\n                webSocket: action.payload\n            }\n        }\n        case DISCONNECT_WEB_SOCKET:{\n            return{\n                ...state,\n                webSocket: null\n            }\n        }\n        case SET_USER_LIST:{\n            return{\n                ...state,\n                userList: action.payload\n            }\n        }\n        case SET_MESSAGE_BOX:{\n            return{\n                ...state,\n                messageBox: state.messageBox.concat(action.payload)\n            }\n        }\n        case SET_MESSAGE_BOX_STYLE:{\n            return{\n                ...state,\n                styleMessageBox: action.payload\n            }\n        }\n        case SET_IS_MOBILE:{\n            return{\n                ...state,\n                isMobile: action.payload\n            }\n        }\n        \n        case SET_DRAWER_OPEN:{\n            return{\n                ...state,\n                drawerOpen: action.payload\n            }\n        }\n        case SET_CHAT_PEOPLE:{\n            return {\n                ...state,\n                chatPeople: action.payload\n            }\n        }\n        case SET_NEW_MESSAGE_ALARM:{\n            const {userName} = action.payload\n            let counter = 0;\n            if(action.payload.type === 'reset' || state.chatPeople === userName){\n                return{\n                    ...state,\n                    newMessageCount: {\n                        ...state.newMessageCount,\n                        [userName]: counter\n                    }\n                }\n            }else{\n                Object.entries(state.newMessageCount).forEach(([key, value]) => {\n                    if(key === userName && typeof value === 'number'){\n                        counter = value;\n                    }\n                });\n                return{\n                    ...state,\n                    newMessageCount: {\n                        ...state.newMessageCount,\n                        [userName]: counter + 1\n                    }\n                }\n            }\n        }\n        case SET_IMAGE_MODAL: {\n            return{\n                ...state,\n                imageModalOpen: action.payload.imageModalOpen,\n                imageEncodeString: action.payload.imageEncodeString,\n            }\n        }\n        case SET_WEB_SOCKET_IS_LISTENING: {\n            return {\n                ...state,\n                webSocketIsListening: true\n            }\n        }\n        default: return state;\n    }\n}\n\nexport default chatRoomReducer;","import {\n    GET_USER_ACCOUNT_SUCCESS,\n    GET_USER_ACCOUNT_FAIL,\n    EDIT_USER_INFO_SUCCESS,\n    EDIT_USER_INFO_FAIL,\n    SET_EDIT_USER_NAME,\n    SET_EDIT_FILE_NAME,\n    SET_EDIT_MESSAGE,\n    SET_EDIT_SUCCESS_DIALOG\n} from '../actionTypes'\nimport {editState} from '../../Interfaces';\n\nconst initState: editState = {\n    account: '',\n    newUserName: '',\n    newPhotoFileName: '',\n    successDialog: false,\n    message: '',\n    status: '',\n}\n\nconst editReducer = (state = initState, action: any): editState => {\n    switch(action.type){\n        case GET_USER_ACCOUNT_SUCCESS: {\n            return {\n                ...state,\n                account: action.payload.account\n            }\n        }\n        case GET_USER_ACCOUNT_FAIL: {\n            return {\n                ...state,\n                status: action.payload.status,\n                message: action.payload.message\n            }\n        }\n        case SET_EDIT_USER_NAME: {\n            return {\n                ...state,\n                newUserName: action.payload\n            }\n        }\n        case EDIT_USER_INFO_FAIL: {\n            return {\n                ...state\n            }\n        }\n        case EDIT_USER_INFO_SUCCESS: {\n            return {\n                ...state,\n                successDialog: true\n            }\n        }\n        case SET_EDIT_FILE_NAME: {\n            return {\n                ...state,\n                newPhotoFileName: action.payload\n            }\n        }\n        case SET_EDIT_MESSAGE: {\n            return {\n                ...state,\n                message: action.payload\n            }\n        }\n        case SET_EDIT_SUCCESS_DIALOG: {\n            return {\n                ...state,\n                successDialog: action.payload\n            }\n        }\n        default: return state;\n    }\n}\n\nexport default editReducer;","import { combineReducers } from 'redux';\nimport { connectRouter } from 'connected-react-router';\nimport loginReducer from './loginReducer';\nimport signupReducer from './signupReducer'\nimport chatRoomReducer from './chatRoomReducer';\nimport editReducer from './editReducer';\n\n\nconst createRootReducer = (history: any) => combineReducers({\n  router: connectRouter(history),\n  loginReducer,\n  signupReducer,\n  chatRoomReducer,\n  editReducer\n});\n\nexport default createRootReducer;","const PROD_HOST_NAME: string = 'https://express-chat-room-back-end.herokuapp.com';\nconst DEV_HOST_NAME: string = 'http://localhost:3000';\nexport const serverHostName: string = PROD_HOST_NAME;\nexport const PROD_ACCESS_CONTROL_ALLOW_ORIGIN: string = 'https://express-chat-room-back-end.herokuapp.com';\nexport const DEV_ACCESS_CONTROL_ALLOW_ORIGIN: string = 'http://localhost:3001';","import {\n    serverHostName,\n    DEV_ACCESS_CONTROL_ALLOW_ORIGIN\n} from '../config'\n\nimport {\n    getCookie\n} from './StorageService';\n\nimport axios, {AxiosRequestConfig} from 'axios';\n\naxios.defaults.baseURL = serverHostName;\naxios.defaults.headers.post['Accept'] = 'application/json';\naxios.defaults.headers.post['Content-Type'] = 'application/json';\naxios.defaults.withCredentials = true;\naxios.defaults.xsrfCookieName = 'XSRF-TOKEN'; // default\naxios.defaults.xsrfHeaderName = 'X-XSRF-TOKEN'; // default\n\n\nexport const axiosGet = (url: string, params: object): object => {\n    console.log('url', url, params);\n    return axios.get(url, {params: params});\n}\n\nexport const axiosPost = (url: string, data: object): object => {\n    return axios.post(url, data);\n}\n\nexport const axiosPostFormData = (url: string, data: any): object => {\n    console.log('data', data);\n    let config: AxiosRequestConfig = {\n        headers : {\n          'Content-Type' : 'multipart/form-data'\n        }\n    }\n    const formData = new FormData();\n    Object.entries(data).forEach(([key, value]: any) => {\n        //console.log(key, value);\n        formData.append(key, value);\n    });\n    return axios.post(url, formData, config);\n}\n\nexport const axiosPatchFormData = (url: string, data: any): object => {\n    console.log('data', data);\n    let config: AxiosRequestConfig = {\n        headers : {\n          'Content-Type' : 'multipart/form-data'\n        }\n    }\n    const formData = new FormData();\n    Object.entries(data).forEach(([key, value]: any) => {\n        //console.log(key, value);\n        formData.append(key, value);\n    });\n    return axios.patch(url, formData, config);\n}\n\nexport default axios;\n\n/*\nexport let fetchGet = (webApi: string): object => {\n    //console.log(hostName + \"/\" + webApi);\n    const requestHeaders: HeadersInit = new Headers();\n    requestHeaders.set('Accept', 'application/json');\n    requestHeaders.set('Content-Type', 'application/json');\n    //requestHeaders.set('Authorization', token||'');\n    return fetch(DEV_HOST_NAME + \"/\" + webApi, {\n        method: 'GET',\n        //dataType: 'jsonp',\n        headers: requestHeaders\n    }).then(\n      (response: any) => {\n          return response.json();\n      }).then((result) => {\n        return result;\n      }).catch((error) => {\n          console.log(\"fetchGet: \" + webApi, error);\n      }\n    );   \n}\n\nexport let fetchPost = (webApi: string, data: object) => {\n    //console.log(\"web api\", PROD_HOST_NAME + \"/\" + webApi);\n    const requestHeaders: any = {\n        //'Access-Control-Allow-Origin': DEV_ACCESS_CONTROL_ALLOW_ORIGIN,\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        //'Authorization': token\n    };\n    //Dev: DEV_HOST_NAME, Prod: PROD_HOST_NAME\n    return fetch(DEV_HOST_NAME + \"/\" + webApi,{\n        method: 'POST',\n        headers: requestHeaders,\n        credentials: 'include',\n        body: JSON.stringify(data)\n    }).then(\n      (response) => {\n          return response.json();\n      }).then((result) => {\n        return result;\n      }).catch((error) => {\n          console.log(\"fetchPost\", error);\n      }\n    );   \n}\n*/","import Cookies from 'js-cookie';\n\nexport const setLocalStorageWithExpiry = (key: string, value: string, ttl: number = 30) => {\n\tconst now = new Date()\n\t// `item` is an object which contains the original value as well as the time when it's supposed to expire\n\tconst item = {\n\t\tvalue: value,\n\t\texpiry: now.getTime() + (ttl * 1000 * 60 * 60 * 24), //By Day\n\t}\n\tlocalStorage.setItem(key, JSON.stringify(item));\n}\n\nexport const removeLocalStorage = (key: string) => {\n\tlocalStorage.removeItem(key);\n}\n\nexport const getLocalStorageWithExpiry = (key: string) => {\n\tconst itemStr = localStorage.getItem(key)\n\t// if the item doesn't exist, return null\n\tif (!itemStr) {\n\t\treturn null\n\t}\n\tconst item = JSON.parse(itemStr)\n\tconst now = new Date();\n\t// compare the expiry time of the item with the current time\n\tif (now.getTime() > item.expiry) {\n\t\t// If the item is expired, delete the item from storage and return null\n\t\tlocalStorage.removeItem(key)\n\t\treturn null\n\t}\n\treturn item.value\n}\n\nexport const getCookie = (key: string): string|undefined => {    \n    return Cookies.get(key);;\n}\n\nexport const setCookie = (key: string, value: string): void => {\n    Cookies.set(key, value /*, { expires: 7 }*/);\n}\n\nexport const delCookie = (key: string): void => {\n    Cookies.remove(key);\n}","import webSocketClient from 'socket.io-client'\nimport {serverHostName} from '../config';\nimport {\n    getLocalStorageWithExpiry,\n    setLocalStorageWithExpiry\n} from './StorageService';\nimport {\n    SET_MESSAGE_BOX,\n    SET_USER_LIST,\n    SET_NEW_MESSAGE_ALARM\n} from '../redux/actionTypes';\nimport {\n    messageInterface, \n    userListInterface\n} from '../Interfaces'\n\n\nconst getUserName = (): string => {\n    return getLocalStorageWithExpiry('userName');\n}\n\nexport const createWebSocket = () => {\n    const userName = getUserName();\n    return webSocketClient(serverHostName, {query: `userName=${userName}`});\n}\n\nexport const disconnectWebSocket = (webSocket: any): void => {\n    const userName = getUserName();\n    webSocket.disconnect(serverHostName, {query: `userName=${userName}`});\n}\n\nexport const sendNewMessage = (webSocket: any, messageType: string, sourceUser: string, targetUser: string, message: string, \n    timestamp: string) => {\n    //console.log('socket', sourceUser, targetUser);\n    webSocket.emit('sendMessage', {\n        sourceUser: sourceUser,\n        targetUser: targetUser,\n        messageType: messageType,\n        message: message,\n        timestamp: timestamp\n    });\n}\n\nexport const listenUserList = (webSocket: any, dispatch: any) => {\n    webSocket.on('userList', (userList: userListInterface) => {\n        console.log('userList', userList);\n        dispatch({\n            type: SET_USER_LIST,\n            payload: userList\n        });\n    })\n}\n\nexport const listenNewMessage = (webSocket: any, dispatch: any, isMobile: boolean) => {   \n    webSocket.on('newMessage', (userMessage: messageInterface) => {   \n        setNewMessageAlarm(dispatch, userMessage.sourceUser, userMessage.targetUser);\n        dispatch({\n            type: SET_MESSAGE_BOX,\n            payload: userMessage\n        });\n        if(!document.hasFocus() && !isMobile){  \n            new Notification(userMessage.sourceUser, {\n                body: userMessage.message,\n                icon: require('../Image/message.png'),\n            }); \n        }\n    });\n}\n\nconst setNewMessageAlarm = (dispatch: any, sourceUser: string, targetUser: string) => {\n    const userName = getUserName();\n    if(userName !== sourceUser){\n        dispatch({\n            type: SET_NEW_MESSAGE_ALARM,\n            payload: {\n                type: 'append',\n                userName: (targetUser === 'Public')? targetUser: sourceUser\n            }\n        });\n    }\n}","/* eslint-disable no-constant-condition */\nimport { put } from 'redux-saga/effects'\nimport { push } from 'connected-react-router'\nimport {\n  axiosPost\n} from '../../Services/ApiService';\nimport {\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  DISCONNECT_WEB_SOCKET\n} from '../actionTypes';\nimport {\n  setLocalStorageWithExpiry,\n  //getLocalStorageWithExpiry,\n  removeLocalStorage,\n  setCookie\n} from '../../Services/StorageService'\n\nimport {\n  disconnectWebSocket\n} from '../../Services/WebSocketService';\n\nexport function* loginRequest(action: any) {\n  let {account, password} = action.payload;\n  console.log(account, password);\n  let result = yield axiosPost(\"login\", {email: account, password: password});\n  //console.log(result);\n  if(result.data.status === \"fail\"){\n    console.log('Fail:', result);\n    yield put({ \n      type: LOGIN_FAIL,\n      payload: {\n        message: result.data.message\n      }\n    })\n  }else if(result.data.status === \"success\"){\n    console.log('success:', result);\n    const {token, userName, uid} = result.data;\n    yield setLocalStorageWithExpiry('token', token, 1);\n    yield setLocalStorageWithExpiry('userName', userName, 1);\n    yield setLocalStorageWithExpiry('uid', uid, 1);\n    yield setCookie('XSRF-TOKE', token);\n    yield put({ type: LOGIN_SUCCESS });\n    yield put(push('/'));\n  }\n}\n\nexport function *logout(action: any){\n  console.log('logout action', action);\n  const webSocket = action.payload;\n  yield removeLocalStorage('userName');\n  yield removeLocalStorage('token');\n  yield disconnectWebSocket(webSocket);\n  yield put({type: DISCONNECT_WEB_SOCKET});\n  yield put(push('/login'));\n}\n","/* eslint-disable no-constant-condition */\nimport { put } from 'redux-saga/effects';\nimport {\n    CONNECT_WEB_SOCKET_SUCCESS,\n    CONNECT_WEB_SOCKET_FAIL\n} from '../actionTypes';\nimport {\n    createWebSocket\n} from '../../Services/WebSocketService'\n\nexport function *connectWebSocket(action: any) {\n    //console.log('connectWebSocket', action);\n    let webSocket = yield createWebSocket(); //webSocketClient(DEV_HOST_NAME, {query: `userName=${userName}`}); //webSocketClient('http://localhost:3000');\n    if(webSocket){\n        yield put({\n            type: CONNECT_WEB_SOCKET_SUCCESS,\n            payload: webSocket\n        });\n    }else{\n        yield put({\n            type: CONNECT_WEB_SOCKET_FAIL\n        })\n    }\n}\n","/* eslint-disable no-constant-condition */\nimport { put } from 'redux-saga/effects'\nimport { push } from 'connected-react-router'\nimport {\n  axiosPost,\n  axiosPostFormData\n} from '../../Services/ApiService';\nimport {\n  SIGNUP_SUCCESS,\n  SIGNUP_FAIL,\n} from '../actionTypes';\n\n\nexport function* signupRequest(action: any) {\n  console.log('action.payload', action.payload);\n  const {account, password, userName, photo} = action.payload;  \n  const result = yield axiosPostFormData(\n    \"signup\", \n    {\n      email: account, \n      password: password, \n      userName: userName, \n      photo: photo\n    }\n  );\n  const {status, message} = result.data;\n  console.log('result', result);\n  if(status === \"error\"){\n    console.log('Fail:', result);\n    yield put({ \n      type: SIGNUP_FAIL,\n      payload: {\n        message: message\n      }\n    })\n  }else if(status === \"success\"){\n    console.log('Signup success');\n    yield put({ type: SIGNUP_SUCCESS });\n  }\n}","/* eslint-disable no-constant-condition */\nimport { put } from 'redux-saga/effects'\nimport { push } from 'connected-react-router'\nimport {\n  axiosPost,\n  axiosPostFormData,\n  axiosPatchFormData,\n  axiosGet,\n} from '../../Services/ApiService';\nimport {\n  EDIT_USER_INFO_SUCCESS,\n  EDIT_USER_INFO_FAIL,\n  GET_USER_ACCOUNT_SUCCESS,\n  GET_USER_ACCOUNT_FAIL\n} from '../actionTypes';\nimport {\n  setLocalStorageWithExpiry\n} from '../../Services/StorageService'\n\nexport function* getUserInfoRequest(action: any){\n  try{\n    const result = yield axiosGet('edit/getUserAccount', {uid: action.payload.uid});\n    console.log('result', result);\n    if(result.data.status === 'success'){\n      yield put({\n        type: GET_USER_ACCOUNT_SUCCESS,\n        payload: {\n          account: result.data.account\n        }\n      })\n    }else{\n      yield put({\n        type: GET_USER_ACCOUNT_FAIL,\n        payload:{\n          status: result.data.status,\n          message: result.data.message\n        }\n      });\n    }\n  }catch(err){\n    console.log('error occurs')\n    yield put({\n      type: GET_USER_ACCOUNT_FAIL,\n      payload:{\n        status: 'fail',\n        message: err\n      }\n    });\n  }\n}\n\nexport function* editUserInfoRequest(action: any){\n  console.log('action.payload', action.payload);\n  const {uid, userName, photo} = action.payload;  \n  \n    console.log('sending request');\n    const result = yield axiosPatchFormData(\n      \"edit\", \n      {\n        uid: uid, \n        userName: userName, \n        photo: photo\n      }\n    );\n    if(result.data.status === 'success'){\n      yield setLocalStorageWithExpiry('userName', userName, 1);\n      yield put({\n        type: EDIT_USER_INFO_SUCCESS,\n        payload: {\n          status: result.data.status\n        }\n      })\n    }else{\n      yield put({\n        type: EDIT_USER_INFO_FAIL,\n        payload: {\n          message: result.data.message,\n          account: result.data.status\n        }\n      })\n    }\n    console.log('result', result);\n  \n}\n","/* eslint-disable no-constant-condition */\n\nimport { put, takeEvery } from 'redux-saga/effects'\nimport {\n  LOGIN_REQUEST,\n  SIGNUP_REQUEST,\n  CONNECT_WEB_SOCKET,\n  LOGOUT,\n  GET_USER_ACCOUNT_REQUEST,\n  EDIT_USER_INFO_REQUEST\n} from '../actionTypes'\nimport {\n    loginRequest,\n    logout,\n} from './loginSaga';\nimport {connectWebSocket} from './chatRoomSaga';\nimport { signupRequest } from './signupSaga';\nimport {\n  getUserInfoRequest,\n  editUserInfoRequest\n} from './editSaga';\n\nexport default function* rootSaga() {\n  yield takeEvery(LOGIN_REQUEST, loginRequest);\n  yield takeEvery(SIGNUP_REQUEST, signupRequest);\n  yield takeEvery(LOGOUT, logout);\n  yield takeEvery(CONNECT_WEB_SOCKET, connectWebSocket);\n  yield takeEvery(GET_USER_ACCOUNT_REQUEST, getUserInfoRequest);\n  yield takeEvery(EDIT_USER_INFO_REQUEST, editUserInfoRequest);\n}\n","import { createBrowserHistory } from 'history';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { routerMiddleware } from 'connected-react-router';\nimport createSagaMiddleware from 'redux-saga';\nimport createRootReducer from './reducers/rootReducer';\nimport rootSaga from './sagas/saga';\n\nexport const history = createBrowserHistory()\n\nconst sagaMiddleware = createSagaMiddleware();\n\nexport default function configureStore(preloadedState: object) {\n  const store = createStore(\n    createRootReducer(history), // root reducer with router state\n    preloadedState,\n    compose(\n      applyMiddleware(\n        routerMiddleware(history), // for dispatching history actions\n        sagaMiddleware\n      ),\n    ),\n  )\n  sagaMiddleware.run(rootSaga);\n  return store\n}","import React, {useEffect} from \"react\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport Card, {\n    CardPrimaryContent,\n    CardMedia,\n    CardActions,\n    CardActionButtons,\n} from \"@material/react-card\";\nimport Button from '@material/react-button';\nimport TextField, {Input} from '@material/react-text-field';\nimport MaterialIcon from '@material/react-material-icon';\nimport { push } from 'connected-react-router'\nimport {\n    SET_LOGIN_ACCOUNT,\n    SET_LOGIN_PASSWORD,\n    LOGIN_REQUEST\n} from '../../redux/actionTypes';\nimport {getLocalStorageWithExpiry} from '../../Services/StorageService';\nimport {\n    stateInterface,\n    keyInterface\n} from '../../Interfaces';\n\n\nconst Login = () => {\n    const dispatch = useDispatch();\n    const {account, password, status, message} = useSelector((state: stateInterface) => state.loginReducer);\n    const token = getLocalStorageWithExpiry('token')\n\n    let setAccountPassword = (e: any): void => {\n        const {id, value} = e.currentTarget;\n        switch(id){\n            case \"account\":\n                dispatch({\n                    type: SET_LOGIN_ACCOUNT,\n                    payload: value,\n                });\n                break;\n            case \"password\":\n                dispatch({\n                    type: SET_LOGIN_PASSWORD,\n                    payload: value,\n                });\n                break;\n        }\n    }\n    \n    let loginHandler = (): void => {\n        dispatch({\n            type: LOGIN_REQUEST,\n            payload: {\n                account: account,\n                password: password\n            }   \n        })\n    }\n    \n    ///Check if is logined\n    useEffect((): void => {\n        if(token){\n            dispatch(push('/'));\n        }\n    }, [token]);\n\n    const enterClick = (key: keyInterface): void => {\n        if(key.key === 'Enter'){\n            loginHandler();\n        }\n    };\n\n    useEffect(() => {\n        document.addEventListener('keypress', enterClick);\n        return () => {\n            document.removeEventListener('keypress', enterClick);\n        }\n    }, [account, password]);\n\n    return(\n        <div id='signLoginContainer'>\n            <Card id=\"signLoginCard\">\n                <CardPrimaryContent className=\"tittle\">\n                    <MaterialIcon role=\"button\" icon=\"person\" />\n                    <a>Login</a>\n                </CardPrimaryContent>\n                <hr className='separate_line'/>\n                <CardMedia id=\"login_logo\" square imageUrl={require('../../Image/chat.png')} />   \n                <CardActions>\n                    <CardActionButtons className='signup_login_info'>\n                        <TextField\n                            label='Email'\n                            className=\"textField\" \n                            //helperText={<HelperText>Help Me!</HelperText>}\n                            onTrailingIconSelect={(): void => {\n                                dispatch({\n                                    type: SET_LOGIN_ACCOUNT,\n                                    payload: ''\n                                })\n                            }}\n                            trailingIcon={<MaterialIcon role=\"button\" icon=\"delete\"/>}\n                        >\n                            <Input\n                                id=\"account\"\n                                type=\"email\"\n                                value={account}\n                                onChange={setAccountPassword} \n                            />\n                        </TextField>\n                        <TextField\n                            label='Password'\n                            className=\"textField\"  \n                            //helperText={<HelperText>Help Me!</HelperText>}\n                            onTrailingIconSelect={ (): void => {\n                                dispatch({\n                                    type: SET_LOGIN_PASSWORD,\n                                    payload: ''\n                                })\n                            }}\n                            trailingIcon={<MaterialIcon role=\"button\" icon=\"delete\"/>}\n                        >\n                            <Input\n                                id=\"password\"\n                                type=\"password\"\n                                value={password}\n                                onChange={setAccountPassword} \n                            />\n                        </TextField>\n                        <div>\n                            <Button \n                                className=\"signup_login_btn\"\n                                outlined={true} \n                                raised={true} \n                                icon={<MaterialIcon role=\"button\" icon=\"login\" />}\n                                onClick={loginHandler}\n                            >Login\n                            </Button>\n                            <Button \n                                className=\"signup_login_btn\"\n                                outlined={true} \n                                raised={true} \n                                icon={<MaterialIcon role=\"button\" icon=\"account_box\" />}\n                                onClick={() => {\n                                    dispatch(push('signup'));\n                                }}\n                            >Signup\n                            </Button>\n                        </div>\n                    </CardActionButtons>\n                </CardActions>\n                {(status === \"error\")?(\n                    <div className='warnMsg'>\n                        <p>{message}</p>\n                    </div>\n                ): []}\n            </Card>\n        </div>\n    )\n}\n\nexport default Login;","import React from 'react';\nimport MaterialIcon from '@material/react-material-icon';\nimport {messageInterface} from '../../../Interfaces';\n\nconst MessageBoxUserInfo = (userMessage: messageInterface) => {\n    return(\n        <div className='message-box-userInfo'>\n            <MaterialIcon role=\"button\" icon=\"account_circle\" className=\"account_icon\"/>\n            <span>{userMessage.sourceUser}({userMessage.timestamp})</span>\n        </div>\n    );\n}\n\nexport default MessageBoxUserInfo;","import React from 'react';\nimport {useSelector, useDispatch} from 'react-redux';\nimport { getLocalStorageWithExpiry } from '../../../Services/StorageService';\nimport {\n    SET_IMAGE_MODAL\n} from '../../../redux/actionTypes'\nimport {\n    messageInterface,\n    stateInterface\n} from '../../../Interfaces';\n\nconst MessageBoxText = (userMessage: messageInterface) => {\n    const styleMessageBox = useSelector((state: stateInterface) => state.chatRoomReducer.styleMessageBox);\n    const dispatch = useDispatch();\n    const userName = getLocalStorageWithExpiry('userName');\n\n    const openImageMadal = (): void => {\n        dispatch({\n            type: SET_IMAGE_MODAL,\n            payload:{\n                imageModalOpen: true,\n                imageEncodeString: userMessage.message\n            }\n        })\n    }\n    \n    const getMessage = () => {\n        switch(userMessage.messageType){\n            case 'string':{\n                return userMessage.message\n            }\n            case 'image':{\n                return <img src={userMessage.message} className='message-image' onClick={openImageMadal}></img>\n            }\n        }   \n    }\n    //console.log('userMessage', userMessage);\n    return(\n        <div className={(styleMessageBox)?((userName === userMessage.sourceUser)? \"style-message-text-mine\": \"style-message-text-other\"): 'message-text'}>\n            {   \n                getMessage()\n            }\n        </div>\n    );\n}\n\nexport default MessageBoxText;","import React from 'react';\nimport { getLocalStorageWithExpiry } from '../../../Services/StorageService';\nimport MessageBoxUserInfo from './MessageBoxUserInfo';\nimport MessageBoxText from './MessageBoxText';\nimport {messageInterface} from '../../../Interfaces';\n\nconst MessageBox = React.memo((userMessage: messageInterface) => {\n    const userName = getLocalStorageWithExpiry('userName');\n    return(\n        <div \n            className={(userName === userMessage.sourceUser)? \"message-box-mine\": \"message-box-other\"}>\n            <MessageBoxUserInfo {...userMessage} />\n            <MessageBoxText {...userMessage} />\n        </div>\n    );\n}, (prevProps: messageInterface, nextProps: messageInterface): boolean => {\n    return (prevProps.sourceUser === nextProps.sourceUser && prevProps.timestamp === nextProps.timestamp);\n});\n\nexport default MessageBox","import React, {useEffect, useRef} from 'react';\nimport {useSelector} from 'react-redux';\nimport MessageBox from './MessageBox';\nimport {getLocalStorageWithExpiry} from '../../../Services/StorageService';\nimport {\n    messageInterface,\n    stateInterface\n} from '../../../Interfaces'; \n\nconst MessagePanel = () => {\n    const userName = getLocalStorageWithExpiry('userName');\n    const messageBox = useSelector((state: stateInterface) => state.chatRoomReducer.messageBox);\n    const styleMessageBox = useSelector((state: stateInterface) => state.chatRoomReducer.styleMessageBox);\n    const chatPeople = useSelector((state: stateInterface) => state.chatRoomReducer.chatPeople);\n    const messagePanelRef = useRef<HTMLDivElement>(null);\n    const anchorRef = useRef<HTMLDivElement>(null);\n    const backgroundStyleCss: {style: string, nonStyle: string} = {\n        style: 'style-messagePanel-background', \n        nonStyle: 'non-style-messagePanel-background'\n    };\n\n    useEffect(() => {\n        if(messageBox && messagePanelRef.current){\n            if(messagePanelRef.current.offsetHeight < messagePanelRef.current.scrollHeight\n                && messagePanelRef.current.scrollTop + messagePanelRef.current.offsetHeight + 200\n                > messagePanelRef.current.scrollHeight){\n                    messagePanelRef.current.scrollTo({\n                        behavior: \"smooth\", \n                        top: messagePanelRef.current?.scrollHeight - messagePanelRef.current.offsetHeight\n                    });\n                }\n        }\n    }, [messageBox]); \n    \n\n    return(\n        <div className={(styleMessageBox)? backgroundStyleCss.style: backgroundStyleCss.nonStyle}>\n            <div id=\"messagePanel\" ref={messagePanelRef}>\n                {\n                    messageBox.filter((userMessage:messageInterface) => {\n                        if(chatPeople === 'Public' && userMessage.targetUser === 'Public'){\n                            return userMessage;\n                        }else if((chatPeople === userMessage.targetUser && userName === userMessage.sourceUser) ||\n                                 (chatPeople === userMessage.sourceUser && userName === userMessage.targetUser)\n                                ){\n                                    return userMessage;\n                                }\n                    }).map((userMessage: messageInterface) => (\n                        <MessageBox {...userMessage} key={userMessage.sourceUser + userMessage.timestamp}/>\n                    ))\n                }\n                <div className='anchor' ref={anchorRef}></div>\n            </div>\n        </div>\n    );\n}\n\nexport default MessagePanel;","import imageCompression from 'browser-image-compression';\n\nexport const convertFile = (file: File): Promise<string> => {\n    return new Promise((resolve,reject) => {\n        let reader = new FileReader()\n        // Resolve the Base64 string result\n        reader.onload = () => { \n            if(typeof reader.result === 'string'){\n                resolve(reader.result);\n            }\n        }\n        // Reject if error occurs\n        reader.onerror = () => { \n            reject(reader.error) \n        }\n        // Read the file\n        reader.readAsDataURL(file);\n    })\n}\n\nexport const compressImage = async(file: File): Promise<File> => {\n    const options = {\n        maxSizeMB: 1,\n        maxWidthOrHeight: 1920,\n        useWebWorker: true\n    }\n    //console.log('originalFile instanceof Blob', file instanceof Blob); // true\n    //console.log(`originalFile size ${file.size / 1024 / 1024} MB`);\n    const compressedFile = await imageCompression(file, options);\n    //console.log('compressedFile instanceof Blob', compressedFile instanceof Blob); // true\n    //console.log(`compressedFile size ${compressedFile.size / 1024 / 1024} MB`); // smaller than maxSizeMB\n    return compressedFile;\n}","import React, {useEffect, useState, useRef} from 'react';\nimport { useSelector } from 'react-redux';\nimport TextField, {Input} from '@material/react-text-field';\nimport MaterialIcon from '@material/react-material-icon';\nimport Button from '@material/react-button';\n//import imageCompression from 'browser-image-compression';\nimport {convertFile, compressImage} from '../../../Services/CommonService';\nimport {getLocalStorageWithExpiry} from '../../../Services/StorageService';\nimport {sendNewMessage} from '../../../Services/WebSocketService';\nimport {\n    stateInterface,\n    keyInterface,\n    inputEventInterface\n} from '../../../Interfaces'; \n\n\n\nconst MessageSender = () => {\n    const [message, setMessage] = useState('');\n    const fileUpload = useRef<HTMLInputElement>(null);\n    const  {webSocket, chatPeople} = useSelector((state: stateInterface) => state.chatRoomReducer);\n    const userName = getLocalStorageWithExpiry('userName') || '';\n    \n    const messageHandler = (e: inputEventInterface): void => {\n        const {value} = e.currentTarget;\n        setMessage(value);\n    }\n\n    const getTimeStamp = (): string => {\n        const date: Date = new Date();\n        const timestamp: string = date.getFullYear() + '/' + (date.getMonth() + 1) +  '/' + date.getDate() +\n            ' ' + new Date().getHours() + ':' + new Date().getMinutes() + \n            ':' + new Date().getSeconds() + ':' + new Date().getUTCMilliseconds();\n        return timestamp;\n    }\n\n    const sendMessage = (): void => {\n        const timestamp: string = getTimeStamp();\n        sendNewMessage(webSocket, 'string', userName, chatPeople, message, timestamp);\n        setMessage(''); //Clear Textedit\n    }\n\n    const enterClick = (key: keyInterface): void => {\n        if(key.key === 'Enter'){\n            sendMessage();\n        }\n    };\n\n    useEffect(() => {\n        document.addEventListener('keypress', enterClick);\n        return () => {\n            document.removeEventListener('keypress', enterClick);\n        }\n    }, [message]);\n\n\n    const fileUploadHandler = async() => {\n        if(fileUpload.current?.files !== null && fileUpload.current?.files !== undefined){\n            const file = fileUpload.current.files[0];\n            //Compress Image at first\n            try {\n                const compressedFile = await compressImage(file);\n                /* Convert Image to base64 decode */\n                convertFile(compressedFile).then((fileBase64: string) => {\n                const timestamp: string = getTimeStamp();\n                sendNewMessage(webSocket, 'image', userName, chatPeople, fileBase64, timestamp);\n            }).catch(err => console.log('error', err));\n            } catch (error) {\n                console.log(error);\n            }\n        }\n    }\n\n    return(\n        <div id='messageSender'> \n            <TextField\n                label='你想說什麼'\n                id=\"msgTextEdit\"                 \n                //helperText={<HelperText>Help Me!</HelperText>}\n                onTrailingIconSelect={() => {fileUpload.current?.click();}}\n                trailingIcon={<MaterialIcon role=\"button\" icon=\"image\"/>}\n            >\n                <Input\n                    id=\"msgTextEditInput\" \n                    value={message}\n                    onChange={messageHandler} \n                />\n            </TextField>    \n            <input type='file' className={'input-element'} ref={fileUpload} accept=\"image/*\" onChange={fileUploadHandler}/> \n            <Button \n                id=\"txtSendBtn\"\n                outlined={true} \n                raised={true} \n                icon={<MaterialIcon role=\"button\" icon=\"send\" />}\n                onClick={sendMessage}\n            >Send\n            </Button>\n        </div>\n    );\n}\n\nexport default MessageSender;","import React, { useEffect, useRef } from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {\n    CONNECT_WEB_SOCKET,\n    SET_WEB_SOCKET_IS_LISTENING\n} from '../../redux/actionTypes';\nimport {\n    listenUserList,\n    listenNewMessage,\n} from '../../Services/WebSocketService'\nimport MessagePanel from './Components/MessagePanel';\nimport MessageSender from './Components/MessageSender';\nimport {stateInterface} from '../../Interfaces';\n\nconst ChatRoom = () => {  \n    const dispatch = useDispatch();\n    const webSocket = useSelector((state: stateInterface) => state.chatRoomReducer.webSocket);\n    const isMobile = useSelector((state: stateInterface) => state.chatRoomReducer.isMobile);\n    const webSocketIsListening = useSelector((state: stateInterface) => state.chatRoomReducer.webSocketIsListening);\n    ///Connect web socket\n    useEffect(() => {\n        if(!webSocket){\n            dispatch({type: CONNECT_WEB_SOCKET});\n        }else if(!webSocketIsListening){\n            listenUserList(webSocket, dispatch);\n            listenNewMessage(webSocket, dispatch, isMobile);\n            dispatch({type: SET_WEB_SOCKET_IS_LISTENING});\n        }\n    }, [webSocket]);\n\n    return (\n        <div id='wrap'>\n            <main id='mainGrid'>\n                <MessagePanel/>\n                <MessageSender/>\n            </main>\n        </div>\n    );\n}\n\nexport default ChatRoom;","import React, {useState} from 'react';\nimport {useDispatch} from 'react-redux';\nimport List, {ListItem, ListItemGraphic, ListItemText} from '@material/react-list';\nimport MaterialIcon from '@material/react-material-icon';\nimport {SET_MESSAGE_BOX_STYLE} from '../../../redux/actionTypes';\n\nconst StyleList = () => {\n    const [styleListIndex, setStyleListIndex] = useState(0);\n    const dispatch = useDispatch();\n\n    const setMessageBoxStyle = (index: number): void => {\n        setStyleListIndex(index);\n        const isMessageBoxStyle = index === 0? true: false;\n        dispatch({\n            type: SET_MESSAGE_BOX_STYLE,\n            payload: isMessageBoxStyle\n        })\n    }\n\n    return(\n        <List \n            singleSelection \n            selectedIndex={styleListIndex}\n            handleSelect={setMessageBoxStyle}\n        >\n            <ListItem>\n                <ListItemGraphic graphic={<MaterialIcon icon='color_lens'/>} />\n                <ListItemText primaryText='Colorful Theme' />\n            </ListItem>\n            <ListItem>\n                <ListItemGraphic graphic={<MaterialIcon icon='format_color_reset'/>} />\n                <ListItemText primaryText='Simple Theme' />\n            </ListItem>\n        </List>\n    );\n}\n\nexport default StyleList;","import React from 'react';\n\ninterface propInterface{\n    newMessageCount: number\n}\n\nconst ＭessageAlarm = React.memo((props: propInterface) => {\n    const {newMessageCount} = props;\n    return(\n        <div className='message-alarm'>{newMessageCount}</div>\n    )\n}, (prevProps: propInterface, nextProps: propInterface): boolean => {\n    return (prevProps.newMessageCount === nextProps.newMessageCount);\n})\nexport default ＭessageAlarm;","import React, {useState, useCallback, useEffect} from 'react';\nimport {useSelector, useDispatch} from 'react-redux';\nimport List, {ListItem, ListItemGraphic, ListItemText} from '@material/react-list';\nimport MaterialIcon from '@material/react-material-icon';\nimport {getLocalStorageWithExpiry} from '../../../Services/StorageService';\nimport { \n    SET_CHAT_PEOPLE,\n    SET_NEW_MESSAGE_ALARM\n} from '../../../redux/actionTypes';\nimport ＭessageAlarm from './ＭessageAlarm';\nimport {\n    stateInterface,\n    userListProps,\n    userInfoInterface\n} from '../../../Interfaces';\nimport {serverHostName} from '../../../config';\n\nconst UserList = (props: userListProps) => {\n    const dispatch = useDispatch();\n    const myUserName = getLocalStorageWithExpiry('userName');\n    const {userList, newMessageCount} = useSelector((state: stateInterface) => state.chatRoomReducer);\n    const {isOnline} = props;\n    const [selectedIndex, setSelectedIndex] = useState(-1);\n    let users: any = {};\n    if(isOnline){\n        users = Object.values(userList).filter((user) => user.status === 'online' && user.userName !== myUserName);\n        users.splice(0, 0, {userName: 'Public', status: 'online'});\n    }else{\n        users = Object.values(userList).filter((user) => user.status === 'offline' && user.userName !== myUserName);\n    }\n\n    const changeChatPeople = useCallback((index: number) => {\n        if(isOnline){\n            setSelectedIndex(index);\n            dispatch({\n                type: SET_CHAT_PEOPLE,\n                payload: users[index].userName\n            });\n            dispatch({\n                type: SET_NEW_MESSAGE_ALARM,\n                payload: {\n                    type: 'reset',\n                    userName: users[index].userName\n                }\n            })\n        }\n    }, [users]);\n\n    useEffect(() => {\n        if(isOnline){\n            changeChatPeople(0); //Default is public\n        }\n    }, []);\n\n    return(\n        <List \n            singleSelection={isOnline}\n            selectedIndex={selectedIndex}\n            handleSelect={changeChatPeople}\n        >\n            {\n                users.map((user: userInfoInterface) => {\n                    return(\n                        <ListItem key={user.userName}>\n                            <ListItemGraphic graphic={\n                                (user.photo)?\n                                    <img src={`${serverHostName}/${user.photo}`} alt=\"userPhoto\" />\n                                    :\n                                    <MaterialIcon \n                                        className='userImage'\n                                        icon={(user.userName==='Public')? 'people': 'person'}\n                                    />\n                                } \n                            />\n                            <ListItemText primaryText={user.userName} />\n                            {(newMessageCount[user.userName] > 0)?\n                            <ＭessageAlarm \n                                newMessageCount={(newMessageCount[user.userName])? newMessageCount[user.userName]: 0} \n                            />: []\n                            }\n                        </ListItem>\n                    )\n                })\n            }\n        </List>\n    )\n}\n\nexport default UserList;","import React from 'react';\nimport {useSelector} from 'react-redux';\nimport {getLocalStorageWithExpiry} from '../../../Services/StorageService';\nimport MaterialIcon from '@material/react-material-icon';\nimport {stateInterface, userInfoInterface} from '../../../Interfaces';\nimport {serverHostName} from '../../../config';\n\n\nconst User = () => {\n    const userName = getLocalStorageWithExpiry('userName');\n    const userList = useSelector((state: stateInterface) => state.chatRoomReducer.userList);\n    const userInfo: userInfoInterface = Object.values(userList).filter((user) => user.userName === userName)[0];\n    const photo = (userInfo)? userInfo.photo: '';\n\n    return(\n        <div id='drawer-user'>\n            {(photo)?\n                <img \n                    id='drawer-user-photo'\n                    src={`${serverHostName}/${photo}`}\n                    alt=\"new\"\n                />\n                :\n                <MaterialIcon \n                    className='userImage'\n                    icon={(userName==='Public')? 'people': 'person'}\n                />\n            } \n            <p id='drawer-user-name'>{userName}</p>\n        </div>\n    );\n}\n\nexport default User","import React, {useEffect, useState} from 'react';\nimport {useSelector, useDispatch} from 'react-redux';\nimport Drawer, {DrawerContent} from '@material/react-drawer';\nimport {SET_DRAWER_OPEN} from '../../redux/actionTypes';\nimport StyleList from './Components/StyleList';\nimport UserList from './Components/UserList';\nimport User from './Components/User';\nimport {stateInterface} from '../../Interfaces';\n\nconst DrawerBar = () => {\n    const dispatch = useDispatch();\n    const drawerOpen = useSelector((state: stateInterface) => state.chatRoomReducer.drawerOpen);\n    const [width, setwidth] = useState(window.innerWidth);\n\n    const closeDrawer = () => {\n        dispatch({\n            type: SET_DRAWER_OPEN,\n            payload: false\n        })\n    }\n\n    useEffect(() => {\n        const handleResize = () => {\n            console.log(window.innerWidth);\n            setwidth(window.innerWidth);\n        }\n        window.addEventListener('resize', handleResize);\n        return () => {\n            window.removeEventListener('resize', handleResize);\n        }\n    });\n\n    //console.log('widht', window.window.innerWidth);\n\n    return(\n        <Drawer\n            modal={width<600}\n            open={drawerOpen}\n            onClose={closeDrawer}\n        >\n            <DrawerContent>\n                <User />\n                <hr style={{borderColor: '#2E86C1', width: '90%'}}/>\n                <p className='drawer-title'>Theme</p>\n                <StyleList/>\n                <hr style={{borderColor: '#2E86C1', width: '90%'}}/>\n                <p className='drawer-title'>Online People</p>\n                <UserList isOnline={true}/>\n                <hr style={{borderColor: '#2E86C1', width: '90%'}}/>\n                <p className='drawer-title'>Offline People</p>\n                <UserList isOnline={false}/>\n            </DrawerContent>\n        </Drawer>\n    )\n}\n\nexport default DrawerBar;","import React, {useCallback} from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { push } from 'connected-react-router';\nimport TopAppBar, {\n    TopAppBarIcon,\n    TopAppBarRow,\n    TopAppBarSection,\n    TopAppBarTitle,\n  } from '@material/react-top-app-bar';\nimport MaterialIcon from '@material/react-material-icon';\nimport {\n    SET_DRAWER_OPEN,\n    LOGOUT\n} from '../redux/actionTypes';\nimport {stateInterface} from '../Interfaces';\n\n\nconst TopBar = () => {\n    const dispatch = useDispatch();\n    const {drawerOpen, webSocket, chatPeople, userList} = useSelector((state: stateInterface) => state.chatRoomReducer);\n    \n    /// Turn on/off drawer\n    const showDrawerHandler = () => {\n        dispatch({\n            type: SET_DRAWER_OPEN,\n            payload: !drawerOpen\n        })\n    }\n\n    /// Logout handler\n    const logoutHandler = (): void => {\n        dispatch({\n            type: LOGOUT,\n            payload: webSocket\n        })\n    };\n\n    const getOnlinePeople = useCallback(() => {\n        return Object.values(userList).filter((item) => item.status === 'online').length;\n    }, [userList]);\n\n    return(\n        <TopAppBar>\n            <TopAppBarRow>\n                <TopAppBarSection align='start'>\n                    <TopAppBarIcon navIcon tabIndex={0}>\n                        <MaterialIcon hasRipple icon='menu' onClick={showDrawerHandler}/>\n                    </TopAppBarIcon>\n                    <TopAppBarTitle tabIndex={1}>\n                        Chat Room\n                        <MaterialIcon \n                            hasRipple \n                            icon='chat' \n                        />\n                    </TopAppBarTitle>\n                </TopAppBarSection>\n                <TopAppBarSection className='chat-people-section'>\n                    <div className='chat-people-block'>\n                        <p id='chat-people'> Chat: {chatPeople} </p>\n                        <p id='online-people'> ( Online People: {getOnlinePeople()} )</p>\n                    </div>\n                </TopAppBarSection>\n                <TopAppBarSection align='end' role='toolbar'>\n                    <TopAppBarIcon actionItem tabIndex={0}>\n                        <MaterialIcon \n                            aria-label=\"Edit\" \n                            hasRipple \n                            icon='person'\n                            data-tooltip-id=\"tooltip-id\"\n                            onClick={() => {dispatch(push('/edit'))}}\n                        />\n                       \n                    </TopAppBarIcon>\n                    <TopAppBarIcon actionItem tabIndex={1}>\n                        <MaterialIcon \n                            aria-label=\"Logout\" \n                            hasRipple \n                            icon='exit_to_app' \n                            onClick={logoutHandler}\n                        />\n                    </TopAppBarIcon>\n                </TopAppBarSection>\n            </TopAppBarRow>\n        </TopAppBar>\n    );\n};\n\nexport default TopBar;","import React, {useCallback} from 'react';\nimport {useSelector, useDispatch} from 'react-redux'\nimport {stateInterface} from '../../Interfaces';\nimport {SET_IMAGE_MODAL} from '../../redux/actionTypes';\n\nconst Modal = () => {\n    const {imageModalOpen, imageEncodeString} = useSelector((state: stateInterface) => state.chatRoomReducer);\n    const dispatch = useDispatch();\n    const closeModal = useCallback((): void => {\n        dispatch({\n            type: SET_IMAGE_MODAL,\n            payload:{\n                imageModalOpen: false,\n                imageEncodeString: ''\n            }\n        })\n    }, []);\n    return(\n        <div id=\"myModal\" className=\"modal\" style={{display: (imageModalOpen)? 'block': 'none'} }>\n            <span className=\"close\" style={{color: 'white'}} onClick={closeModal}>&times;</span>\n            <img className=\"modal-content\" alt='messageImage' src={imageEncodeString} />\n        </div>\n    );\n}\n\nexport default Modal;","import React, {useEffect} from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { push } from 'connected-react-router';\nimport {TopAppBarFixedAdjust} from '@material/react-top-app-bar';\nimport {\n    getLocalStorageWithExpiry, \n} from '../Services/StorageService';\nimport {\n    SET_IS_MOBILE\n} from '../redux/actionTypes';\nimport ChatRoom from './ChatRoom/ChatRoom';\nimport DrawerBar from './Drawer/DrawerBar';\nimport TopBar from './TopBar';\nimport Modal from './Components/Modal'\nimport {stateInterface} from '../Interfaces';\n\nconst Home = () => {\n    const dispatch = useDispatch();\n    const {isMobile} = useSelector((state: stateInterface) => state.chatRoomReducer);\n    const token = getLocalStorageWithExpiry('token');\n\n    /// Check if is mobile device\n    useEffect(() => {\n        if(/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(navigator.userAgent) \n            || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(navigator.userAgent.substr(0,4))) { \n            dispatch({\n                type: SET_IS_MOBILE,\n                payload: true\n            });\n        } \n        if(!isMobile){\n            if(window.Notification && Notification.permission !== 'granted'){\n                Notification.requestPermission((status) => {\n                    console.log('status', status);\n                });\n            }\n        }\n    }, []);\n    \n    /// Check if is logined\n    useEffect(() => {\n        if(!token){\n            dispatch(push('/login'));\n        }\n    }, [token]);\n\n\n    return (\n    <>\n    {\n        (token)?\n        <>\n            <div className='drawer-container'>\n                <TopBar/>\n                <TopAppBarFixedAdjust className='top-app-bar-fix-adjust'>\n                    <DrawerBar />\n                    <ChatRoom />                 \n                </TopAppBarFixedAdjust>\n                <Modal />\n            </div>\n        </>\n        :[]\n    }\n    </>\n    )\n}\n\nexport default Home;","import React, { useCallback } from 'react';\nimport Dialog, {\n    DialogTitle,\n    DialogContent,\n    DialogFooter,\n  } from '@material/react-dialog';\nimport Button from '@material/react-button';\nimport MaterialIcon from '@material/react-material-icon';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { push } from 'connected-react-router';\nimport { stateInterface } from '../../../Interfaces';\nimport { SET_SUCCESS_DIALOG } from '../../../redux/actionTypes'\n\nconst SignupDialog = () => {\n    const dispatch = useDispatch();\n    const {successDialog} = useSelector((state: stateInterface) => state.signupReducer);\n\n    const returnLoginHandler = useCallback((e: any) => {\n        dispatch(push('login'));\n        dispatch({\n            type: SET_SUCCESS_DIALOG,\n            payload: false\n        })\n    }, [successDialog]);\n\n    return(\n        <Dialog id='signupDialog' open={successDialog}>\n            <DialogTitle>Success</DialogTitle>\n            <DialogContent>\n                <div>Signup successfully</div>\n            </DialogContent>\n            <DialogFooter>\n                <Button \n                    className=\"signup_login_btn\"\n                    outlined={true} \n                    raised={true} \n                    icon={<MaterialIcon role=\"button\" icon=\"account_box\" />}\n                    onClick={returnLoginHandler}\n                >Login\n                </Button>\n            </DialogFooter>\n        </Dialog>\n    );\n}\n\nexport default SignupDialog;","import React, {useRef} from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Card, {\n    CardPrimaryContent,\n    CardActions,\n    CardActionButtons,\n} from \"@material/react-card\";\nimport Button from '@material/react-button';\nimport TextField, {Input} from '@material/react-text-field';\nimport MaterialIcon from '@material/react-material-icon';\nimport { push } from 'connected-react-router';\nimport {\n    SET_SIGNUP_ACCOUNT,\n    SET_SIGNUP_PASSWORD,\n    SET_SIGNUP_CONFIRM_PASSWORD,\n    SET_SIGNUP_USERNAME,\n    SET_SIGNUP_MESSAGE,\n    SET_SIGNUP_UPLOAD_FILE_NAME,\n    SIGNUP_REQUEST\n} from '../../redux/actionTypes';\nimport SignupDialog from './Components/SignupDialog';\nimport {stateInterface} from '../../Interfaces';\nimport {compressImage} from './../../Services/CommonService';\n\nconst Signup = () => {\n    const dispatch = useDispatch();\n    const uploadPhotoRef = useRef<HTMLInputElement>(null);\n    const photo = useRef<File | null>(null);\n    const {account, password, confirmPassword, userName, status, message, fileName} = useSelector((state: stateInterface) => state.signupReducer);\n\n    const inputHandler = (e: any): void => {\n        const {id, value} = e.currentTarget;\n        switch(id){\n            case \"account\":\n                dispatch({\n                    type: SET_SIGNUP_ACCOUNT,\n                    payload: value,\n                });\n                break;\n            case \"password\":\n                dispatch({\n                    type: SET_SIGNUP_PASSWORD,\n                    payload: value,\n                });\n                break;\n            case \"confirmPassword\":\n                dispatch({\n                    type: SET_SIGNUP_CONFIRM_PASSWORD,\n                    payload: value,\n                });\n                break;\n            case \"userName\":\n                dispatch({\n                    type: SET_SIGNUP_USERNAME,\n                    payload: value,\n                });\n                break;\n        }\n    }\n\n    const signupHandler = (): void => {\n        console.log('photo', photo.current);\n        console.log('signup', account, password, confirmPassword, userName);\n        if(!account || !password || !confirmPassword || !userName){\n            dispatch({\n                type: SET_SIGNUP_MESSAGE,\n                payload: 'Please fill in all information'\n            });\n            return;\n        }\n        if(confirmPassword !== password){\n            dispatch({\n                type: SET_SIGNUP_MESSAGE,\n                payload: 'Passwords are not same!'\n            });\n            return;\n        }\n        if(account.indexOf('@') <= 0){\n            dispatch({\n                type: SET_SIGNUP_MESSAGE,\n                payload: 'Invalid email!'\n            });\n            return;\n        }\n        if(!photo.current){\n            dispatch({\n                type: SET_SIGNUP_MESSAGE,\n                payload: 'Please upload one photo'\n            });\n            return;\n        }\n        \n        dispatch({\n            type: SIGNUP_REQUEST,\n            payload: {\n                account: account,\n                password: password,\n                userName: userName,\n                photo: photo.current\n            }   \n        });\n    }\n\n    const photoUploadHandler = async() => {\n        if(uploadPhotoRef.current?.files && uploadPhotoRef.current?.files.length > 0){\n            photo.current = uploadPhotoRef.current.files[0];\n            dispatch({\n                type: SET_SIGNUP_UPLOAD_FILE_NAME,\n                payload: photo.current.name\n            });\n        }else {\n            photo.current = null;\n            dispatch({\n                type: SET_SIGNUP_UPLOAD_FILE_NAME,\n                payload: ''\n            });\n        }\n    }\n\n    return (\n        <>\n        <div id='signLoginContainer'>\n            <Card id=\"signLoginCard\">\n                <CardPrimaryContent className=\"tittle\">\n                    <MaterialIcon role=\"button\" icon=\"person\" />\n                    <a>Signup+</a>\n                </CardPrimaryContent>\n                <hr className='separate_line'/>\n                <CardActions>\n                    <CardActionButtons className='signup_login_info'>\n                        <TextField\n                            label='Email'\n                            className=\"textField\" \n                            //helperText={<HelperText>Help Me!</HelperText>}\n                            onTrailingIconSelect={(): void => {\n                                dispatch({\n                                    type: SET_SIGNUP_ACCOUNT,\n                                    payload: ''\n                                })\n                            }}\n                            trailingIcon={<MaterialIcon role=\"button\" icon=\"delete\"/>}\n                        >\n                            <Input\n                                id=\"account\"\n                                type=\"account\"\n                                value={account}\n                                onChange={inputHandler} \n                            />\n                        </TextField>\n                        <TextField\n                            label='Nick Name'\n                            className=\"textField\" \n                            //helperText={<HelperText>Help Me!</HelperText>}\n                            onTrailingIconSelect={(): void => {\n                                dispatch({\n                                    type: SET_SIGNUP_USERNAME,\n                                    payload: ''\n                                })\n                            }}\n                            trailingIcon={<MaterialIcon role=\"button\" icon=\"delete\"/>}\n                        >\n                            <Input\n                                id=\"userName\"\n                                type=\"string\"\n                                value={userName}\n                                onChange={inputHandler} \n                            />\n                        </TextField>\n                        <TextField\n                            label='Password'\n                            className=\"textField\"  \n                            //helperText={<HelperText>Help Me!</HelperText>}\n                            onTrailingIconSelect={ (): void => {\n                                dispatch({\n                                    type: SET_SIGNUP_PASSWORD,\n                                    payload: ''\n                                })\n                            }}\n                            trailingIcon={<MaterialIcon role=\"button\" icon=\"delete\"/>}\n                        >\n                            <Input\n                                id=\"password\"\n                                type=\"password\"\n                                value={password}\n                                onChange={inputHandler} \n                            />\n                        </TextField>\n                        <TextField\n                            label='Confirm Password'\n                            className=\"textField\"  \n                            //helperText={<HelperText>Help Me!</HelperText>}\n                            onTrailingIconSelect={ (): void => {\n                                dispatch({\n                                    type: SET_SIGNUP_CONFIRM_PASSWORD,\n                                    payload: ''\n                                })\n                            }}\n                            trailingIcon={<MaterialIcon role=\"button\" icon=\"delete\"/>}\n                        >\n                            <Input\n                                id=\"confirmPassword\"\n                                type=\"password\"\n                                value={confirmPassword}\n                                onChange={inputHandler} \n                            />\n                        </TextField>\n                        <div className='textField'>\n                            <div className='upload-image-div' style={{borderBottom: '1px solid darkgray'}}>\n                                <Button \n                                    className=\"upload-image-btn\"\n                                    outlined={true} \n                                    raised={true} \n                                    icon={<MaterialIcon role=\"button\" icon=\"image\" />}\n                                    onClick={() => {uploadPhotoRef.current?.click();}}\n                                >Photo\n                                </Button>\n                                <input \n                                    type='file' \n                                    className={'input-element'} \n                                    ref={uploadPhotoRef} \n                                    accept=\"image/*\" \n                                    onChange={photoUploadHandler}\n                                />\n                                <span id='upload-photo-name'>{fileName}</span>\n                            </div>\n                        </div>\n                        <div className='signup_btn_block'>\n                            <Button \n                                className=\"signup_login_btn\"\n                                outlined={true} \n                                raised={true} \n                                icon={<MaterialIcon role=\"button\" icon=\"person_add\" />}\n                                onClick={signupHandler}\n                            >Signup\n                            </Button>\n                            <Button \n                                className=\"signup_login_btn\"\n                                outlined={true} \n                                raised={true} \n                                icon={<MaterialIcon role=\"button\" icon=\"keyboard_backspace\" />}\n                                onClick={() => {\n                                    dispatch(push('login'));\n                                }}\n                            >login\n                            </Button>\n                        </div>\n                    </CardActionButtons>\n                </CardActions>\n                {(status === \"error\" || message !== \"\")?(\n                    <div className='warnMsg'>\n                        <p>{message}</p>\n                    </div>\n                ): []}\n            </Card>\n        </div>\n        <SignupDialog/>\n        </>\n    );\n}\n\nexport default Signup;","import React, { useCallback } from 'react';\nimport Dialog, {\n    DialogTitle,\n    DialogContent,\n    DialogFooter,\n  } from '@material/react-dialog';\nimport Button from '@material/react-button';\nimport MaterialIcon from '@material/react-material-icon';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { push } from 'connected-react-router';\nimport { stateInterface } from '../../../Interfaces';\nimport { SET_EDIT_SUCCESS_DIALOG } from '../../../redux/actionTypes'\n\nconst EditDialog = () => {\n    const dispatch = useDispatch();\n    const successDialog = useSelector((state: stateInterface) => state.editReducer.successDialog);\n\n    const returnChatRoomHandler = useCallback((e: any) => {\n        dispatch(push('/'));\n        dispatch({\n            type: SET_EDIT_SUCCESS_DIALOG,\n            payload: false\n        })\n    }, [successDialog]);\n\n    return(\n        <Dialog id='signupDialog' open={successDialog}>\n            <DialogTitle>Success</DialogTitle>\n            <DialogContent>\n                <div>Update account information successfully</div>\n            </DialogContent>\n            <DialogFooter>\n                <Button \n                    className=\"signup_login_btn\"\n                    outlined={true} \n                    raised={true} \n                    icon={<MaterialIcon role=\"button\" icon=\"account_box\" />}\n                    onClick={returnChatRoomHandler}\n                >Chatroom\n                </Button>\n            </DialogFooter>\n        </Dialog>\n    );\n}\n\nexport default EditDialog;","import React, {useRef, useEffect} from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Card, {\n    CardPrimaryContent,\n    CardActions,\n    CardActionButtons,\n} from \"@material/react-card\";\nimport Button from '@material/react-button';\nimport TextField, {Input} from '@material/react-text-field';\nimport MaterialIcon from '@material/react-material-icon';\nimport { push } from 'connected-react-router';\nimport {\n    GET_USER_ACCOUNT_REQUEST,\n    SET_EDIT_USER_NAME,\n    SET_EDIT_FILE_NAME,\n    SET_EDIT_MESSAGE,\n    EDIT_USER_INFO_REQUEST\n} from '../../redux/actionTypes';\nimport {stateInterface} from '../../Interfaces';\nimport {getLocalStorageWithExpiry} from '../../Services/StorageService';\nimport EditDialog from './Components/EditDialog'\n\nconst Edit = () => {\n    const uid: string = getLocalStorageWithExpiry('uid');\n    const uploadPhotoRef = useRef<HTMLInputElement>(null);\n    const newPhoto = useRef<File | null>(null);\n    const dispatch = useDispatch();\n    const {\n        account, \n        newUserName,\n        newPhotoFileName,\n        successDialog,\n        message,\n        status\n    }  = useSelector((state: stateInterface) => state.editReducer);\n\n    useEffect(() => {\n        if(!uid){\n            dispatch(push('/login'));\n        }\n        dispatch({\n            type: GET_USER_ACCOUNT_REQUEST,\n            payload: {\n                uid: uid\n            }\n        })\n    }, []);\n\n    const editUserNameHandler = (e: any): void => {\n        const {value} = e.currentTarget;\n        dispatch({\n            type: SET_EDIT_USER_NAME,\n            payload: value,\n        });\n    }\n\n    const photoUploadHandler = () => {\n        if(uploadPhotoRef.current?.files && uploadPhotoRef.current?.files.length > 0){\n            newPhoto.current = uploadPhotoRef.current.files[0];\n            dispatch({\n                type: SET_EDIT_FILE_NAME,\n                payload: newPhoto.current.name\n            });\n        }else {\n            newPhoto.current = null;\n            dispatch({\n                type: SET_EDIT_FILE_NAME,\n                payload: ''\n            });\n        }\n    }\n\n    const updateHandler = (): void => {        \n        if(!newUserName && !newPhoto.current){\n            dispatch({\n                type: SET_EDIT_MESSAGE,\n                payload: 'No information has been update'\n            });\n            return;\n        }\n        dispatch({\n            type: EDIT_USER_INFO_REQUEST,\n            payload: {\n                uid: uid,\n                userName: newUserName,\n                photo: newPhoto.current\n            }   \n        });\n    }\n\n    return (\n        <>\n        <div id='signLoginContainer'>\n            <Card id=\"signLoginCard\">\n                <CardPrimaryContent className=\"tittle\">\n                    <MaterialIcon role=\"button\" icon=\"person\" />\n                    <span>Information</span>\n                </CardPrimaryContent>\n                <hr className='separate_line'/>\n                <CardActions>\n                    <CardActionButtons className='signup_login_info'>\n                        <TextField\n                            label='Email'\n                            className=\"textField\" \n                            disabled={true}\n                        >\n                            <Input\n                                id=\"account\"\n                                type=\"account\"\n                                value={account}\n                                disabled={true}\n                                //onChange={inputHandler} \n                            />\n                        </TextField>\n                        <TextField\n                            label='New Nick Name (Optional)'\n                            className=\"textField\" \n                            //helperText={<HelperText>Help Me!</HelperText>}\n                            onTrailingIconSelect={(): void => {\n                                dispatch({\n                                    type: SET_EDIT_USER_NAME,\n                                    payload: ''\n                                })\n                            }}\n                            trailingIcon={<MaterialIcon role=\"button\" icon=\"delete\"/>}\n                        >\n                            <Input\n                                id=\"newUserName\"\n                                type=\"string\"\n                                value={newUserName}\n                                onChange={editUserNameHandler} \n                            />\n                        </TextField>\n                        <div className='textField'>\n                            <div className='upload-image-div' style={{borderBottom: '1px solid darkgray'}}>\n                                <Button \n                                    className=\"upload-image-btn\"\n                                    outlined={true} \n                                    raised={true} \n                                    icon={<MaterialIcon role=\"button\" icon=\"image\" />}\n                                    onClick={() => {uploadPhotoRef.current?.click();}}\n                                >Photo\n                                </Button>\n                                <input \n                                    type='file' \n                                    className={'input-element'} \n                                    ref={uploadPhotoRef} \n                                    accept=\"image/*\" \n                                    onChange={photoUploadHandler}\n                                />\n                                <span id='upload-photo-name'>{newPhotoFileName}</span>\n                            </div>\n                        </div>\n                        <div className='signup_btn_block'>\n                            <Button \n                                className=\"signup_login_btn\"\n                                outlined={true} \n                                raised={true} \n                                icon={<MaterialIcon role=\"button\" icon=\"person_add\" />}\n                                onClick={updateHandler}\n                            >Update\n                            </Button>\n                            <Button \n                                className=\"signup_login_btn\"\n                                outlined={true} \n                                raised={true} \n                                icon={<MaterialIcon role=\"button\" icon=\"keyboard_backspace\" />}\n                                onClick={() => {\n                                    dispatch(push('/'));\n                                }}\n                            >Back\n                            </Button>\n                        </div>\n                    </CardActionButtons>\n                </CardActions>\n                {(status === \"error\" || message !== \"\")?(\n                    <div className='warnMsg'>\n                        <p>{message}</p>\n                    </div>\n                ): []}\n            </Card>\n        </div>\n        <EditDialog/>\n        </>\n    );\n}\n\nexport default Edit;","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport { Route, Switch } from 'react-router'; // react-router v4/v5\r\nimport { ConnectedRouter } from 'connected-react-router';\r\nimport configureStore, { history } from './redux/configureStore';\r\nimport './App.scss';\r\nimport Login from './view/LoginSignup/Login';\r\nimport Home from './view/Home'\r\nimport Signup from './view/LoginSignup/Signup';\r\nimport Edit from './view/LoginSignup/Edit';\r\n\r\n\r\nconst store = configureStore({});\r\n\r\nconst App = () => {\r\n    return (\r\n        <Provider store={store}>\r\n            {/*<Navigator />*/}\r\n            <ConnectedRouter history={history}>      \r\n            <Switch>\r\n                <Route exact path=\"/\">\r\n                    <Home /> \r\n                </Route>\r\n                <Route exact path=\"/login\">\r\n                    <Login />\r\n                </Route>\r\n                <Route exact path=\"/signup\">\r\n                    <Signup />\r\n                </Route>\r\n                <Route exact path=\"/edit\">\r\n                    <Edit />\r\n                </Route>\r\n                <Route exact path=\"*\">\r\n                    <div>\r\n                        <h1>Sorry, No this page</h1>\r\n                    </div>\r\n                </Route>\r\n            </Switch>\r\n            </ConnectedRouter>\r\n        </Provider>\r\n    );\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}