{"version":3,"sources":["Image/chat.png","Image/message.png","redux/reducers/loginReducer.ts","redux/actionTypes.ts","redux/reducers/chatRoomReducer.ts","redux/reducers/rootReducer.ts","config.js","ApiService.ts","redux/sagas/loginSaga.ts","redux/sagas/chatRoomSaga.ts","redux/sagas/saga.ts","redux/configureStore.ts","view/Login.tsx","view/ChatRoom/Components/MessagePanel.tsx","view/ChatRoom/Components/MessageSender.tsx","view/ChatRoom/ChatRoom.tsx","view/Home.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["module","exports","initState","account","password","status","email","error","userName","loginReducer","state","action","type","payload","token","message","messageBox","webSocket","onlineCount","connectStatus","styleMessageBox","isMobile","chatRoomReducer","concat","console","log","createRootReducer","history","combineReducers","router","connectRouter","PROD_HOST_NAME","getCookie","key","Cookies","get","setCookie","value","set","expires","delCookie","remove","loginRequest","data","fetch","method","headers","credentials","body","JSON","stringify","then","response","json","result","catch","put","push","connectWebSocket","webSocketClient","rootSaga","takeEvery","createBrowserHistory","sagaMiddleware","createSagaMiddleware","Login","dispatch","useDispatch","useSelector","setAccountPassword","e","currentTarget","id","useEffect","checkLogined","useCallback","undefined","columns","square","imageUrl","require","style","display","label","className","onTrailingIconSelect","trailingIcon","role","icon","onChange","outlined","raised","onClick","disabled","MessagePanel","messagesEnd","backgroundStyleCss","scrollIntoView","behavior","map","timestamp","float","clear","ref","el","MessageSender","useState","setMessage","enterPress","setEnterPress","sendMessage","Date","getHours","getMinutes","getSeconds","getUTCMilliseconds","emit","enterClick","document","addEventListener","removeEventListener","ChatRoom","initWebSocket","on","hasFocus","Notification","Home","test","navigator","userAgent","substr","window","permission","requestPermission","logoutHandler","align","navIcon","tabIndex","hasRipple","nativeControlId","checked","target","htmlFor","actionItem","aria-label","store","preloadedState","createStore","compose","applyMiddleware","routerMiddleware","run","configureStore","App","exact","path","Boolean","location","hostname","match","ReactDOM","render","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.37470d67.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/chat.36cb8b4b.png\";","module.exports = __webpack_public_path__ + \"static/media/message.232a7059.png\";","import {\n    SET_USER_ACCOUNT,\n    SET_USER_PASSWORD,\n    LOGIN_REQUEST,\n    LOGIN_SUCCESS,\n    LOGIN_FAIL\n} from '../actionTypes'\n\nconst initState: object = {\n    account: '',\n    password: '',\n    status: '',\n    email: '',\n    error: '',\n    userName: ''\n}\n\nconst loginReducer = (state: object = initState, action: any) => {\n    switch(action.type){\n        case SET_USER_ACCOUNT: {\n            return {...state, account: action.payload};\n        }\n        case SET_USER_PASSWORD: {\n            return {...state, password: action.payload};\n        }\n        case LOGIN_REQUEST: {\n            return {...state, status: 'loading'};\n        }\n        case LOGIN_SUCCESS: {\n            return {\n                ...state, \n                status: 'logined',\n                email: action.payload.email,\n                token: action.payload.token,\n                userName: action.payload.userName\n            };\n        }\n        case LOGIN_FAIL: {\n            return {\n                ...state, \n                status: 'error',\n                message: action.payload.message,\n            };\n        }\n        default: return state;\n    }\n}\n\nexport default loginReducer;","export const SET_USER_ACCOUNT = 'SET_USER_ACCOUNT';\nexport const SET_USER_PASSWORD = 'SET_USER_PASSWORD';\nexport const LOGIN_REQUEST = 'LOGIN_REQUEST';\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const LOGIN_FAIL = 'LOGIN_FAIL';\n\nexport const CONNECT_WEB_SOCKET = 'CONNECT_WEB_SOCKET';\nexport const CONNECT_WEB_SOCKET_SUCCESS = 'CONNECT_WEB_SOCKET_SUCCESS';\nexport const CONNECT_WEB_SOCKET_FAIL = 'CONNECT_WEB_SOCKET_FAIL';\nexport const SET_MESSAGE_BOX = 'SET_MESSAGE_BOX';\nexport const SET_ONLINE_COUNT = 'SET_ONLINE_COUNT';\nexport const SET_MESSAGE_BOX_STYLE = 'SET_MESSAGE_BOX_STYLE';\nexport const SET_IS_MOBILE = 'SET_IS_MOBILE';\n\n\n","import {\n    CONNECT_WEB_SOCKET,\n    CONNECT_WEB_SOCKET_SUCCESS,\n    CONNECT_WEB_SOCKET_FAIL,\n    SET_ONLINE_COUNT,\n    SET_MESSAGE_BOX,\n    SET_MESSAGE_BOX_STYLE,\n    SET_IS_MOBILE\n} from '../actionTypes'\n\nconst initState = {\n    messageBox: [],\n    webSocket: '',\n    onlineCount: 0,\n    connectStatus: '',\n    styleMessageBox: true,\n    isMobile: false\n}\n\nconst chatRoomReducer = (state = initState, action: any) => {\n    switch(action.type){\n        case CONNECT_WEB_SOCKET:{\n            return {\n                ...state,\n                connectStatus: 'connecting'\n            }\n        }\n        case CONNECT_WEB_SOCKET_SUCCESS:{\n            return{\n                ...state,\n                connectStatus: 'connected',\n                webSocket: action.payload\n            }\n        }\n        case CONNECT_WEB_SOCKET_FAIL:{\n            return{\n                ...state,\n                connectStatus: 'disconnect',\n                webSocket: action.payload\n            }\n        }\n        case SET_ONLINE_COUNT:{\n            return{\n                ...state,\n                onlineCount: action.payload\n            }\n        }\n        case SET_MESSAGE_BOX:{\n            return{\n                ...state,\n                messageBox: state.messageBox.concat(action.payload)\n            }\n        }\n        case SET_MESSAGE_BOX_STYLE:{\n            return{\n                ...state,\n                styleMessageBox: action.payload\n            }\n        }\n        case SET_IS_MOBILE:{\n            console.log(123);\n            return{\n                ...state,\n                isMobile: action.payload\n            }\n        }\n        default: return state;\n    }\n}\n\nexport default chatRoomReducer;","import { combineReducers } from 'redux';\nimport { connectRouter } from 'connected-react-router';\nimport loginReducer from './loginReducer';\nimport chatRoomReducer from './chatRoomReducer';\n\n\nconst createRootReducer = (history: any) => combineReducers({\n  router: connectRouter(history),\n  loginReducer,\n  chatRoomReducer\n});\n\nexport default createRootReducer;","export const PROD_HOST_NAME = 'https://express-chat-room-back-end.herokuapp.com';\nexport const DEV_HOST_NAME = 'http://localhost:3000';\nexport const PROD_ACCESS_CONTROL_ALLOW_ORIGIN = 'https://express-chat-room-back-end.herokuapp.com';\nexport const DEV_ACCESS_CONTROL_ALLOW_ORIGIN = 'http://localhost:3001';","import Cookies from 'js-cookie';\nimport {\n    PROD_HOST_NAME,\n    DEV_HOST_NAME,\n    DEV_ACCESS_CONTROL_ALLOW_ORIGIN\n} from './config'\n\nconst hostName: string = \"https://express-chat-room-back-end.herokuapp.com\" //\"http://localhost:3000\"\nconst token: string|undefined =  getCookie(\"token\");\n\nexport function getCookie(key: string): string|undefined {    \n    return Cookies.get(key);;\n}\n\nexport let setCookie = (key: string, value: string): void => {\n    Cookies.set(key, value, { expires: 7 });\n}\n\nexport let delCookie = (key: string): void => {\n    Cookies.remove(key);\n}\n\nexport let fetchGet = (webApi: string): object => {\n    //console.log(hostName + \"/\" + webApi);\n    const requestHeaders: HeadersInit = new Headers();\n    requestHeaders.set('Accept', 'application/json');\n    requestHeaders.set('Content-Type', 'application/json');\n    requestHeaders.set('Authorization', token||'');\n    return fetch(DEV_HOST_NAME + \"/\" + webApi, {\n        method: 'GET',\n        //dataType: 'jsonp',\n        headers: requestHeaders\n    }).then(\n      (response: any) => {\n          return response.json();\n      }).then((result) => {\n        return result;\n      }).catch((error) => {\n          console.log(\"fetchGet: \" + webApi, error);\n      }\n    );   \n}\n\nexport let fetchPost = (webApi: string, data: object) => {\n    //console.log(\"web api\", PROD_HOST_NAME + \"/\" + webApi);\n    const requestHeaders: any = {\n        'Access-Control-Allow-Origin': DEV_ACCESS_CONTROL_ALLOW_ORIGIN,\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': token\n    };\n    //Dev: DEV_HOST_NAME, Prod: PROD_HOST_NAME\n    return fetch(PROD_HOST_NAME + \"/\" + webApi,{\n        method: 'POST',\n        headers: requestHeaders,\n        credentials: 'include',\n        body: JSON.stringify(data)\n    }).then(\n      (response) => {\n          return response.json();\n      }).then((result) => {\n        return result;\n      }).catch((error) => {\n          console.log(\"fetchPost\", error);\n      }\n    );   \n}","/* eslint-disable no-constant-condition */\nimport { put } from 'redux-saga/effects'\nimport { push } from 'connected-react-router'\nimport {\n  fetchGet,\n  fetchPost\n} from '../../ApiService';\nimport {\n  LOGIN_SUCCESS,\n  LOGIN_FAIL\n} from '../actionTypes';\n\nimport {\n  setCookie\n} from '../../ApiService'\n\nexport function* loginRequest(action: any) {\n  let {account, password} = action.payload;\n  let result = yield fetchPost(\"login\", {email: account, password: password});\n  if(result.status === \"fail\"){\n    console.log('Fail:', result);\n    yield put({ \n      type: LOGIN_FAIL,\n      payload: {\n        message: result.message\n      }\n    })\n  }else if(result.status === \"success\"){\n    console.log('success:', result);\n    yield put({ \n      type: LOGIN_SUCCESS,\n      payload: {\n        token: result.token,\n        email: result.email,\n        userName: result.userName\n      }\n    });\n    yield setCookie('token', result.token);\n    yield setCookie('userName', result.userName);\n    yield put(push('/'));\n  }\n}\n","/* eslint-disable no-constant-condition */\nimport { put } from 'redux-saga/effects';\n\nimport {\n    CONNECT_WEB_SOCKET_SUCCESS,\n    CONNECT_WEB_SOCKET_FAIL\n\n} from '../actionTypes';\nimport webSocketClient from 'socket.io-client'\nimport {\n    PROD_HOST_NAME,\n    DEV_HOST_NAME\n} from '../../config'\n\n\n\nexport function *connectWebSocket(action: any) {\n    console.log('connectWebSocket', action);\n    //Dev: DEV_HOST_NAME, Prod: PROD_HOST_NAME\n    let webSocket = yield webSocketClient(PROD_HOST_NAME); //webSocketClient('http://localhost:3000');\n    if(webSocket){\n        yield put({\n            type: CONNECT_WEB_SOCKET_SUCCESS,\n            payload: webSocket\n        })\n    }else{\n        yield put({\n            type: CONNECT_WEB_SOCKET_FAIL\n        })\n    }\n}\n","/* eslint-disable no-constant-condition */\n\nimport { put, takeEvery } from 'redux-saga/effects'\nimport {\n  LOGIN_REQUEST,\n  CONNECT_WEB_SOCKET\n} from '../actionTypes'\nimport {\n    loginRequest\n} from './loginSaga';\n\nimport {\n  connectWebSocket\n} from './chatRoomSaga'\n\nexport default function* rootSaga() {\n  yield takeEvery(LOGIN_REQUEST, loginRequest);\n  yield takeEvery(CONNECT_WEB_SOCKET, connectWebSocket);\n}\n","import { createBrowserHistory } from 'history';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { routerMiddleware } from 'connected-react-router';\nimport createSagaMiddleware from 'redux-saga';\nimport createRootReducer from './reducers/rootReducer';\nimport rootSaga from './sagas/saga';\n\nexport const history = createBrowserHistory()\n\nconst sagaMiddleware = createSagaMiddleware();\n\nexport default function configureStore(preloadedState: object) {\n  const store = createStore(\n    createRootReducer(history), // root reducer with router state\n    preloadedState,\n    compose(\n      applyMiddleware(\n        routerMiddleware(history), // for dispatching history actions\n        sagaMiddleware\n      ),\n    ),\n  )\n  sagaMiddleware.run(rootSaga);\n  return store\n}","import React, {useCallback, useEffect} from \"react\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport {Cell, Grid, Row} from '@material/react-layout-grid';\nimport Card, {\n    CardPrimaryContent,\n    CardMedia,\n    CardActions,\n    CardActionButtons,\n} from \"@material/react-card\";\nimport Button from '@material/react-button';\nimport TextField, {Input} from '@material/react-text-field';\nimport MaterialIcon from '@material/react-material-icon';\nimport {\n    getCookie\n} from '../ApiService'; \nimport { push } from 'connected-react-router'\nimport {\n    SET_USER_ACCOUNT,\n    SET_USER_PASSWORD,\n    LOGIN_REQUEST\n} from '../redux/actionTypes';\n\ninterface stateInterface {\n    loginReducer:{\n        account: string,\n        password: string,\n        status: string,\n        message: string\n    }\n}\n\nconst Login = () => {\n    const dispatch = useDispatch();\n    const {account, password, status, message} = useSelector((state: stateInterface) => state.loginReducer);\n    const token =  getCookie('token');\n    \n    let setAccountPassword = (e: any): void => {\n        const {id, value} = e.currentTarget;\n        switch(id){\n            case \"account\":\n                dispatch({\n                    type: SET_USER_ACCOUNT,\n                    payload: value,\n                });\n            case \"password\":\n                dispatch({\n                    type: SET_USER_PASSWORD,\n                    payload: value,\n                });\n        }\n    }\n    \n    let loginHandler = (): void => {\n        dispatch({\n            type: LOGIN_REQUEST,\n            payload: {\n                account: account,\n                password: password\n            }   \n        })\n    }\n    \n    useEffect((): any => {\n        checkLogined();\n    }, [token]);\n\n    const checkLogined = useCallback((): any => {\n        console.log('checkLogined', token !== undefined);\n        if(token) {\n            dispatch(push('/'));\n        }\n    }, [token]);\n\n    return(\n    <Grid>        \n        <Row>    \n            <Cell columns={3} />\n            <Cell columns={6}>\n                <Card id=\"loginCard\">\n                    <CardPrimaryContent id=\"tittle\">\n                        <h1>Rick's Chat Room: Beta</h1>\n                        <CardMedia id=\"logoImg\" square imageUrl={require('../Image/chat.png')} />   \n                    </CardPrimaryContent>\n                    <CardActions style={{display: \"block\"}}>\n                        <CardActionButtons id=\"textFieldArea\">\n                            <TextField\n                                label='Email'\n                                className=\"textField\" \n                                //helperText={<HelperText>Help Me!</HelperText>}\n                                onTrailingIconSelect={(): void => {\n                                    dispatch({\n                                        type: SET_USER_ACCOUNT,\n                                        payload: ''\n                                    })\n                                }}\n                                trailingIcon={<MaterialIcon role=\"button\" icon=\"delete\"/>}\n                            >\n                                <Input\n                                    id=\"account\"\n                                    type=\"email\"\n                                    value={account}\n                                    onChange={setAccountPassword} \n                                />\n                            </TextField>\n                            <TextField\n                                label='Password'\n                                className=\"textField\"  \n                                //helperText={<HelperText>Help Me!</HelperText>}\n                                onTrailingIconSelect={ (): void => {\n                                    dispatch({\n                                        type: SET_USER_PASSWORD,\n                                        payload: ''\n                                    })\n                                }}\n                                trailingIcon={<MaterialIcon role=\"button\" icon=\"delete\"/>}\n                            >\n                                <Input\n                                    id=\"password\"\n                                    type=\"password\"\n                                    value={password}\n                                    onChange={setAccountPassword} \n                                />\n                            </TextField>\n                            <div>\n                                <Button \n                                    className=\"loginBtn\"\n                                    outlined={true} \n                                    raised={true} \n                                    icon={<MaterialIcon role=\"button\" icon=\"login\" />}\n                                    onClick={loginHandler}\n                                >Login\n                                </Button>\n                                <Button \n                                    className=\"loginBtn\"\n                                    outlined={true} \n                                    raised={true} \n                                    disabled={true}\n                                    icon={<MaterialIcon role=\"button\" icon=\"account_box\" />}\n                                    onClick={() => {}}\n                                >Signup\n                                </Button>\n                            </div>\n                        </CardActionButtons>\n                    </CardActions>\n                    {(status === \"error\")?(\n                        <div>\n                            <p className='warnMsg'>{message}</p>\n                        </div>\n                    ): []}\n                </Card>\n            </Cell>\n            <Cell columns={3} />\n        </Row>\n    </Grid>\n    )\n}\n\nexport default Login;","import React, {useState, useEffect} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {Cell, Grid, Row} from '@material/react-layout-grid';\nimport MaterialIcon from '@material/react-material-icon';\nimport { getCookie } from '../../../ApiService';\n//import MessageBoxComponent from './MessageBox';\n\ninterface stateInterface{\n    chatRoomReducer:{\n        messageBox: any,\n        styleMessageBox: boolean\n    }\n}\n\ninterface message{\n    userName: string,\n    timestamp: string,\n    message: string\n}\n\nconst MessagePanel = () => {\n    const {messageBox, styleMessageBox} = useSelector((state: stateInterface) => state.chatRoomReducer);\n    const userName = getCookie('userName');\n    let messagesEnd: any;\n    const backgroundStyleCss: {style: string, nonStyle: string} = {\n        style: 'style-messagePanel-background', \n        nonStyle: 'non-style-messagePanel-background'\n    };\n    useEffect(() => {\n        messagesEnd.scrollIntoView({ behavior: \"smooth\" });\n    }, [messageBox]); \n\n    return(\n        <div className={(styleMessageBox)? backgroundStyleCss.style: backgroundStyleCss.nonStyle}>\n            <div id=\"messagePanel\">\n                {\n                    messageBox.map((message: message) => (\n                        <Row key={\"row\" + message.userName + message.timestamp}>\n                            <Cell columns={12}>\n                                <div className={(userName === message.userName)? \"message-box-mine\": \"message-box-other\"}>\n                                    <MaterialIcon role=\"button\" icon=\"account_circle\" className=\"account_icon\"/>\n                                    <span>{message.userName}({message.timestamp})</span>\n                                    <div className={(styleMessageBox)?((userName === message.userName)? \"style-message-mine\": \"style-message-other\"): 'non-style-message'}>\n                                        {message.message}\n                                    </div>\n                                </div>\n                            </Cell>\n                        </Row>\n                    ))\n                }\n                <div style={{ float:\"left\", clear: \"both\" }}\n                    ref={(el) => { messagesEnd = el; }}>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default MessagePanel;","import React, {useEffect, useState} from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport TextField, {Input} from '@material/react-text-field';\nimport MaterialIcon from '@material/react-material-icon';\nimport Button from '@material/react-button';\nimport {getCookie} from '../../../ApiService';\n\ninterface stateInterface{\n    chatRoomReducer:{\n        webSocket: any,\n        onlineCount: number\n    }\n}\n\ninterface key{\n    key: string\n}\n\nconst MessageSender = () => {\n    const [message, setMessage] = useState('');\n    const  {webSocket} = useSelector((state: stateInterface) => state.chatRoomReducer);\n    const [enterPress, setEnterPress] = useState(false);\n    const userName = getCookie('userName');\n    \n    const messageHandler = (e: any) => {\n        const {value} = e.currentTarget;\n        setMessage(value);\n    }\n\n    useEffect(() => {\n        if(enterPress) {\n            sendMessage();\n            setEnterPress(false);\n        }\n    });\n\n    const sendMessage = () => {\n        const timestamp = new Date().getHours() + ':' + new Date().getMinutes() + \n            ':' + new Date().getSeconds() + ':' + new Date().getUTCMilliseconds();\n        //console.log('sendMessage', message);\n        webSocket.emit('send', {\n            userName: userName,\n            message: message,\n            timestamp: timestamp\n        });\n        setMessage(''); //Clear Textedit\n    }\n\n    const enterClick = (key: key) => {\n        //console.log('key', key);\n        if(key.key === 'Enter'){\n            setEnterPress(true);\n        }\n    }\n\n    useEffect(() => {\n        if(webSocket){\n            document.addEventListener('keypress', enterClick);\n        }\n        return () => {\n            document.removeEventListener('keypress', enterClick)\n        }\n    }, [webSocket])\n\n    return(\n        <div id='messageSender'>\n            <TextField\n                label='你想說什麼'\n                id=\"msgTextEdit\" \n                \n                //helperText={<HelperText>Help Me!</HelperText>}\n                onTrailingIconSelect={() => setMessage(\"\")}\n                trailingIcon={<MaterialIcon role=\"button\" icon=\"delete\"/>}\n            >\n                <Input\n                id=\"msgTextEditInput\" \n                    value={message}\n                    onChange={messageHandler} \n                />\n            </TextField>\n            <div className=\"wrapper-div\">\n                <Button \n                    id=\"msgSendBtn\"\n                    outlined={true} \n                    raised={true} \n                    icon={<MaterialIcon role=\"button\" icon=\"send\" />}\n                    onClick={sendMessage}\n                >Send\n                </Button>\n            </div>\n            \n        </div>\n    );\n}\n\nexport default MessageSender;","import React, { useEffect, useCallback, useState } from 'react';\nimport {connect, useDispatch, useSelector} from 'react-redux';\nimport {Cell, Grid, Row} from '@material/react-layout-grid';\nimport MaterialIcon from '@material/react-material-icon';\n\nimport {\n    CONNECT_WEB_SOCKET,\n    SET_ONLINE_COUNT,\n    SET_MESSAGE_BOX\n} from '../../redux/actionTypes'\n\nimport MessagePanel from './Components/MessagePanel';\nimport MessageSender from './Components/MessageSender';\nimport { register } from '../../serviceWorker';\n\n\ninterface stateInterface {\n    chatRoomReducer:{\n        webSocket: any,\n        isMobile: boolean\n    }\n}\n\ninterface messageInterface{\n    userName: string,\n    message: string,\n    timestamp: string\n}\n\nconst ChatRoom = () => {  \n    const dispatch = useDispatch();\n    const {webSocket, isMobile} = useSelector((state: stateInterface) => state.chatRoomReducer);\n\n    useEffect(() => {\n        if(webSocket){\n            initWebSocket();\n        }else{\n            dispatch({\n                type: CONNECT_WEB_SOCKET,\n            });\n        }\n    }, [webSocket]);\n\n    const initWebSocket = () => {\n        console.log('initWebSocket');\n        webSocket.on('online', (onlineCount: number) => {\n            //console.log('onlineCount', onlineCount);\n            dispatch({\n                type: SET_ONLINE_COUNT,\n                payload: onlineCount\n            });\n        });\n\n        webSocket.on('msg', (message: messageInterface) => {\n            //console.log('message', message)\n            dispatch({\n                type: SET_MESSAGE_BOX,\n                payload: message\n            });\n            \n            if(!document.hasFocus() && !isMobile){  \n                new Notification(message.userName, {\n                    body: message.message,\n                    icon: require('../../Image/message.png'),\n                }); \n            }\n        });\n    }\n\n    return (\n    <Grid id='mainGrid'>\n        <Row>\n            <Cell columns={12}>\n                <MessagePanel/>\n            </Cell>\n        </Row>\n        <Row>\n            <Cell columns={12}>\n                <MessageSender/>\n            </Cell>\n        </Row>\n    </Grid>\n    );\n}\n\nexport default ChatRoom;","import React, {useCallback, useEffect} from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { push } from 'connected-react-router';\nimport TopAppBar, {\n    TopAppBarFixedAdjust, \n    TopAppBarIcon,\n    TopAppBarRow,\n    TopAppBarSection,\n    TopAppBarTitle,\n  } from '@material/react-top-app-bar';\nimport MaterialIcon from '@material/react-material-icon';\nimport Switch from '@material/react-switch';\nimport {getCookie, delCookie} from '../ApiService';\nimport {SET_MESSAGE_BOX_STYLE, SET_IS_MOBILE} from '../redux/actionTypes'\nimport ChatRoom from './ChatRoom/ChatRoom';\n\ninterface stateInterface {\n    chatRoomReducer:{\n        onlineCount: number,\n        isMobile: boolean\n    }\n}\n\nconst Home = () => {\n    const dispatch = useDispatch();\n    //useSelector((state: stateInterface) => {console.log('state', state)});\n    const {onlineCount, isMobile} = useSelector((state: stateInterface) => state.chatRoomReducer);\n    const token =  getCookie('token');\n    const userName =  getCookie('userName');\n\n    \n    useEffect(() => {\n        // device detection\n        if(/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(navigator.userAgent) \n            || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(navigator.userAgent.substr(0,4))) { \n            dispatch({\n                type: SET_IS_MOBILE,\n                payload: true\n            });\n        } \n        if(!isMobile){\n            if(window.Notification && Notification.permission !== 'granted'){\n                Notification.requestPermission((status) => {\n                    console.log('status', status);\n                });\n            }\n        }\n    }, [Notification.permission]);\n    \n\n    useEffect(() => {\n        if(!token) dispatch(push('/login'));\n    }, [token]);\n\n\n    const logoutHandler = useCallback((): void => {\n        console.log('logout');\n        delCookie('token');\n        delCookie('userName');\n        dispatch(push('/login'));\n    }, [token]);\n\n\n    // useEffect(() => {\n    //     //localStorage.setItem('myData', '123');\n    //     const data = localStorage.getItem('myData')\n    //     console.log('localStorage', data);\n    // })\n\n    const styleMessageBox = (e: any): void => {\n        dispatch({\n            type: SET_MESSAGE_BOX_STYLE,\n            payload: e.target.checked\n        })\n    }\n    \n    return (\n    <>\n    {(token)?\n    <>\n       <TopAppBar>\n            <TopAppBarRow>\n                <TopAppBarSection align='start'>\n                    <TopAppBarIcon navIcon tabIndex={0}>\n                        <MaterialIcon hasRipple icon='menu' onClick={() => console.log('click')}/>\n                    </TopAppBarIcon>\n                    <TopAppBarTitle tabIndex={1}>\n                        Welcome {userName}, Online People: {onlineCount}\n                    </TopAppBarTitle>\n                </TopAppBarSection>\n                <TopAppBarSection align='start'>\n                    <Switch\n                        nativeControlId='my-switch'\n                        checked={true}\n                        onChange={styleMessageBox} \n                    />\n                    <label htmlFor='my-switch' id=\"mode-switch-label\">Style Message Box</label>\n                </TopAppBarSection>\n                <TopAppBarSection align='end' role='toolbar'>\n                    <TopAppBarIcon actionItem tabIndex={0}>\n                        <MaterialIcon \n                            aria-label=\"print page\" \n                            hasRipple \n                            icon='exit_to_app' \n                            onClick={logoutHandler}\n                        />\n                    </TopAppBarIcon>\n                </TopAppBarSection>\n            </TopAppBarRow>\n        </TopAppBar>\n        <TopAppBarFixedAdjust>\n            <ChatRoom />\n        </TopAppBarFixedAdjust>\n    </>\n    :[]\n    }\n    </>\n    )\n}\n\nexport default Home;","import React, { useState } from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport { Route, Switch } from 'react-router'; // react-router v4/v5\r\nimport { ConnectedRouter } from 'connected-react-router';\r\nimport configureStore, { history } from './redux/configureStore';\r\nimport './App.scss';\r\nimport Login from './view/Login';\r\nimport Home from './view/Home'\r\n\r\n\r\nconst store = configureStore({});\r\n\r\nconst App = () => {\r\n    return (\r\n        <Provider store={store}>\r\n            {/*<Navigator />*/}\r\n            <ConnectedRouter history={history}>      \r\n            <Switch>\r\n                <Route exact path=\"/\">\r\n                    <Home /> \r\n                </Route>\r\n                <Route exact path=\"/login\">\r\n                    <Login />\r\n                </Route>\r\n            </Switch>\r\n            </ConnectedRouter>\r\n        </Provider>\r\n    );\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}